{
    "contracts/BoringOwnable.sol": [
        {
            "check": "missing-zero-check",
            "description": "BoringOwnable.transferOwnership(address,bool,bool).newOwner (contracts/BoringOwnable.sol#30) lacks a zero-check on :\n\t\t- pendingOwner = newOwner (contracts/BoringOwnable.sol#40)\n",
            "impact": "Low",
            "confidence": "Medium",
            "lines": [
                30
            ],
            "start_col": 32,
            "end_col": 48
        },
        {
            "check": "missing-zero-check",
            "description": "BoringOwnable.transferOwnership(address,bool,bool).newOwner (contracts/BoringOwnable.sol#30) lacks a zero-check on :\n\t\t- pendingOwner = newOwner (contracts/BoringOwnable.sol#40)\n",
            "impact": "Low",
            "confidence": "Medium",
            "lines": [
                40
            ],
            "start_col": 13,
            "end_col": 36
        },
        {
            "check": "missing-zero-check",
            "description": "BoringOwnable.transferOwnership(address,bool,bool).newOwner (contracts/BoringOwnable.sol#30) lacks a zero-check on :\n\t\t- pendingOwner = newOwner (contracts/BoringOwnable.sol#40)\n",
            "impact": "Low",
            "confidence": "Medium",
            "lines": [
                30
            ],
            "start_col": 32,
            "end_col": 48
        },
        {
            "check": "missing-zero-check",
            "description": "BoringOwnable.transferOwnership(address,bool,bool).newOwner (contracts/BoringOwnable.sol#30) lacks a zero-check on :\n\t\t- pendingOwner = newOwner (contracts/BoringOwnable.sol#40)\n",
            "impact": "Low",
            "confidence": "Medium",
            "lines": [
                40
            ],
            "start_col": 13,
            "end_col": 36
        }
    ],
    "contracts/MasterChef.sol": [
        {
            "check": "unchecked-transfer",
            "description": "MasterChef.safeSushiTransfer(address,uint256) (contracts/MasterChef.sol#251-258) ignores return value by sushi.transfer(_to,_amount) (contracts/MasterChef.sol#256)\n",
            "impact": "High",
            "confidence": "Medium",
            "lines": [
                251,
                252,
                253,
                254,
                255,
                256,
                257,
                258
            ],
            "start_col": 5,
            "end_col": 6
        },
        {
            "check": "unchecked-transfer",
            "description": "MasterChef.safeSushiTransfer(address,uint256) (contracts/MasterChef.sol#251-258) ignores return value by sushi.transfer(_to,_amount) (contracts/MasterChef.sol#256)\n",
            "impact": "High",
            "confidence": "Medium",
            "lines": [
                256
            ],
            "start_col": 13,
            "end_col": 41
        },
        {
            "check": "unchecked-transfer",
            "description": "MasterChef.safeSushiTransfer(address,uint256) (contracts/MasterChef.sol#251-258) ignores return value by sushi.transfer(_to,sushiBal) (contracts/MasterChef.sol#254)\n",
            "impact": "High",
            "confidence": "Medium",
            "lines": [
                251,
                252,
                253,
                254,
                255,
                256,
                257,
                258
            ],
            "start_col": 5,
            "end_col": 6
        },
        {
            "check": "unchecked-transfer",
            "description": "MasterChef.safeSushiTransfer(address,uint256) (contracts/MasterChef.sol#251-258) ignores return value by sushi.transfer(_to,sushiBal) (contracts/MasterChef.sol#254)\n",
            "impact": "High",
            "confidence": "Medium",
            "lines": [
                254
            ],
            "start_col": 13,
            "end_col": 42
        },
        {
            "check": "divide-before-multiply",
            "description": "MasterChef.pendingSushi(uint256,address) (contracts/MasterChef.sol#162-173) performs a multiplication on the result of a division:\n\t- sushiReward = multiplier.mul(sushiPerBlock).mul(pool.allocPoint).div(totalAllocPoint) (contracts/MasterChef.sol#169)\n\t- accSushiPerShare = accSushiPerShare.add(sushiReward.mul(1e12).div(lpSupply)) (contracts/MasterChef.sol#170)\n",
            "impact": "Medium",
            "confidence": "Medium",
            "lines": [
                162,
                163,
                164,
                165,
                166,
                167,
                168,
                169,
                170,
                171,
                172,
                173
            ],
            "start_col": 5,
            "end_col": 6
        },
        {
            "check": "divide-before-multiply",
            "description": "MasterChef.pendingSushi(uint256,address) (contracts/MasterChef.sol#162-173) performs a multiplication on the result of a division:\n\t- sushiReward = multiplier.mul(sushiPerBlock).mul(pool.allocPoint).div(totalAllocPoint) (contracts/MasterChef.sol#169)\n\t- accSushiPerShare = accSushiPerShare.add(sushiReward.mul(1e12).div(lpSupply)) (contracts/MasterChef.sol#170)\n",
            "impact": "Medium",
            "confidence": "Medium",
            "lines": [
                169
            ],
            "start_col": 13,
            "end_col": 106
        },
        {
            "check": "divide-before-multiply",
            "description": "MasterChef.pendingSushi(uint256,address) (contracts/MasterChef.sol#162-173) performs a multiplication on the result of a division:\n\t- sushiReward = multiplier.mul(sushiPerBlock).mul(pool.allocPoint).div(totalAllocPoint) (contracts/MasterChef.sol#169)\n\t- accSushiPerShare = accSushiPerShare.add(sushiReward.mul(1e12).div(lpSupply)) (contracts/MasterChef.sol#170)\n",
            "impact": "Medium",
            "confidence": "Medium",
            "lines": [
                170
            ],
            "start_col": 13,
            "end_col": 89
        },
        {
            "check": "divide-before-multiply",
            "description": "MasterChef.updatePool(uint256) (contracts/MasterChef.sol#184-200) performs a multiplication on the result of a division:\n\t- sushiReward = multiplier.mul(sushiPerBlock).mul(pool.allocPoint).div(totalAllocPoint) (contracts/MasterChef.sol#195)\n\t- pool.accSushiPerShare = pool.accSushiPerShare.add(sushiReward.mul(1e12).div(lpSupply)) (contracts/MasterChef.sol#198)\n",
            "impact": "Medium",
            "confidence": "Medium",
            "lines": [
                184,
                185,
                186,
                187,
                188,
                189,
                190,
                191,
                192,
                193,
                194,
                195,
                196,
                197,
                198,
                199,
                200
            ],
            "start_col": 5,
            "end_col": 6
        },
        {
            "check": "divide-before-multiply",
            "description": "MasterChef.updatePool(uint256) (contracts/MasterChef.sol#184-200) performs a multiplication on the result of a division:\n\t- sushiReward = multiplier.mul(sushiPerBlock).mul(pool.allocPoint).div(totalAllocPoint) (contracts/MasterChef.sol#195)\n\t- pool.accSushiPerShare = pool.accSushiPerShare.add(sushiReward.mul(1e12).div(lpSupply)) (contracts/MasterChef.sol#198)\n",
            "impact": "Medium",
            "confidence": "Medium",
            "lines": [
                195
            ],
            "start_col": 9,
            "end_col": 102
        },
        {
            "check": "divide-before-multiply",
            "description": "MasterChef.updatePool(uint256) (contracts/MasterChef.sol#184-200) performs a multiplication on the result of a division:\n\t- sushiReward = multiplier.mul(sushiPerBlock).mul(pool.allocPoint).div(totalAllocPoint) (contracts/MasterChef.sol#195)\n\t- pool.accSushiPerShare = pool.accSushiPerShare.add(sushiReward.mul(1e12).div(lpSupply)) (contracts/MasterChef.sol#198)\n",
            "impact": "Medium",
            "confidence": "Medium",
            "lines": [
                198
            ],
            "start_col": 9,
            "end_col": 95
        },
        {
            "check": "incorrect-equality",
            "description": "MasterChef.migrate(uint256) (contracts/MasterChef.sol#137-146) uses a dangerous strict equality:\n\t- require(bool,string)(bal == newLpToken.balanceOf(address(this)),migrate: bad) (contracts/MasterChef.sol#144)\n",
            "impact": "Medium",
            "confidence": "High",
            "lines": [
                137,
                138,
                139,
                140,
                141,
                142,
                143,
                144,
                145,
                146
            ],
            "start_col": 5,
            "end_col": 6
        },
        {
            "check": "incorrect-equality",
            "description": "MasterChef.migrate(uint256) (contracts/MasterChef.sol#137-146) uses a dangerous strict equality:\n\t- require(bool,string)(bal == newLpToken.balanceOf(address(this)),migrate: bad) (contracts/MasterChef.sol#144)\n",
            "impact": "Medium",
            "confidence": "High",
            "lines": [
                144
            ],
            "start_col": 9,
            "end_col": 76
        },
        {
            "check": "incorrect-equality",
            "description": "MasterChef.updatePool(uint256) (contracts/MasterChef.sol#184-200) uses a dangerous strict equality:\n\t- lpSupply == 0 (contracts/MasterChef.sol#190)\n",
            "impact": "Medium",
            "confidence": "High",
            "lines": [
                184,
                185,
                186,
                187,
                188,
                189,
                190,
                191,
                192,
                193,
                194,
                195,
                196,
                197,
                198,
                199,
                200
            ],
            "start_col": 5,
            "end_col": 6
        },
        {
            "check": "incorrect-equality",
            "description": "MasterChef.updatePool(uint256) (contracts/MasterChef.sol#184-200) uses a dangerous strict equality:\n\t- lpSupply == 0 (contracts/MasterChef.sol#190)\n",
            "impact": "Medium",
            "confidence": "High",
            "lines": [
                190
            ],
            "start_col": 13,
            "end_col": 26
        },
        {
            "check": "reentrancy-no-eth",
            "description": "Reentrancy in MasterChef.deposit(uint256,uint256) (contracts/MasterChef.sol#203-219):\n\tExternal calls:\n\t- updatePool(_pid) (contracts/MasterChef.sol#206)\n\t\t- sushi.mint(devaddr,sushiReward.div(10)) (contracts/MasterChef.sol#196)\n\t\t- sushi.mint(address(this),sushiReward) (contracts/MasterChef.sol#197)\n\t- safeSushiTransfer(msg.sender,pending) (contracts/MasterChef.sol#210)\n\t\t- sushi.transfer(_to,sushiBal) (contracts/MasterChef.sol#254)\n\t\t- sushi.transfer(_to,_amount) (contracts/MasterChef.sol#256)\n\t- pool.lpToken.safeTransferFrom(address(msg.sender),address(this),_amount) (contracts/MasterChef.sol#214)\n\tState variables written after the call(s):\n\t- user.amount = user.amount.add(_amount) (contracts/MasterChef.sol#215)\n\tMasterChef.userInfo (contracts/MasterChef.sol#78) can be used in cross function reentrancies:\n\t- MasterChef.deposit(uint256,uint256) (contracts/MasterChef.sol#203-219)\n\t- MasterChef.emergencyWithdraw(uint256) (contracts/MasterChef.sol#240-248)\n\t- MasterChef.pendingSushi(uint256,address) (contracts/MasterChef.sol#162-173)\n\t- MasterChef.userInfo (contracts/MasterChef.sol#78)\n\t- MasterChef.withdraw(uint256,uint256) (contracts/MasterChef.sol#222-237)\n\t- user.rewardDebt = user.amount.mul(pool.accSushiPerShare).div(1e12) (contracts/MasterChef.sol#217)\n\tMasterChef.userInfo (contracts/MasterChef.sol#78) can be used in cross function reentrancies:\n\t- MasterChef.deposit(uint256,uint256) (contracts/MasterChef.sol#203-219)\n\t- MasterChef.emergencyWithdraw(uint256) (contracts/MasterChef.sol#240-248)\n\t- MasterChef.pendingSushi(uint256,address) (contracts/MasterChef.sol#162-173)\n\t- MasterChef.userInfo (contracts/MasterChef.sol#78)\n\t- MasterChef.withdraw(uint256,uint256) (contracts/MasterChef.sol#222-237)\n",
            "impact": "Medium",
            "confidence": "Medium",
            "lines": [
                203,
                204,
                205,
                206,
                207,
                208,
                209,
                210,
                211,
                212,
                213,
                214,
                215,
                216,
                217,
                218,
                219
            ],
            "start_col": 5,
            "end_col": 6
        },
        {
            "check": "reentrancy-no-eth",
            "description": "Reentrancy in MasterChef.deposit(uint256,uint256) (contracts/MasterChef.sol#203-219):\n\tExternal calls:\n\t- updatePool(_pid) (contracts/MasterChef.sol#206)\n\t\t- sushi.mint(devaddr,sushiReward.div(10)) (contracts/MasterChef.sol#196)\n\t\t- sushi.mint(address(this),sushiReward) (contracts/MasterChef.sol#197)\n\t- safeSushiTransfer(msg.sender,pending) (contracts/MasterChef.sol#210)\n\t\t- sushi.transfer(_to,sushiBal) (contracts/MasterChef.sol#254)\n\t\t- sushi.transfer(_to,_amount) (contracts/MasterChef.sol#256)\n\t- pool.lpToken.safeTransferFrom(address(msg.sender),address(this),_amount) (contracts/MasterChef.sol#214)\n\tState variables written after the call(s):\n\t- user.amount = user.amount.add(_amount) (contracts/MasterChef.sol#215)\n\tMasterChef.userInfo (contracts/MasterChef.sol#78) can be used in cross function reentrancies:\n\t- MasterChef.deposit(uint256,uint256) (contracts/MasterChef.sol#203-219)\n\t- MasterChef.emergencyWithdraw(uint256) (contracts/MasterChef.sol#240-248)\n\t- MasterChef.pendingSushi(uint256,address) (contracts/MasterChef.sol#162-173)\n\t- MasterChef.userInfo (contracts/MasterChef.sol#78)\n\t- MasterChef.withdraw(uint256,uint256) (contracts/MasterChef.sol#222-237)\n\t- user.rewardDebt = user.amount.mul(pool.accSushiPerShare).div(1e12) (contracts/MasterChef.sol#217)\n\tMasterChef.userInfo (contracts/MasterChef.sol#78) can be used in cross function reentrancies:\n\t- MasterChef.deposit(uint256,uint256) (contracts/MasterChef.sol#203-219)\n\t- MasterChef.emergencyWithdraw(uint256) (contracts/MasterChef.sol#240-248)\n\t- MasterChef.pendingSushi(uint256,address) (contracts/MasterChef.sol#162-173)\n\t- MasterChef.userInfo (contracts/MasterChef.sol#78)\n\t- MasterChef.withdraw(uint256,uint256) (contracts/MasterChef.sol#222-237)\n",
            "impact": "Medium",
            "confidence": "Medium",
            "lines": [
                206
            ],
            "start_col": 9,
            "end_col": 25
        },
        {
            "check": "reentrancy-no-eth",
            "description": "Reentrancy in MasterChef.deposit(uint256,uint256) (contracts/MasterChef.sol#203-219):\n\tExternal calls:\n\t- updatePool(_pid) (contracts/MasterChef.sol#206)\n\t\t- sushi.mint(devaddr,sushiReward.div(10)) (contracts/MasterChef.sol#196)\n\t\t- sushi.mint(address(this),sushiReward) (contracts/MasterChef.sol#197)\n\t- safeSushiTransfer(msg.sender,pending) (contracts/MasterChef.sol#210)\n\t\t- sushi.transfer(_to,sushiBal) (contracts/MasterChef.sol#254)\n\t\t- sushi.transfer(_to,_amount) (contracts/MasterChef.sol#256)\n\t- pool.lpToken.safeTransferFrom(address(msg.sender),address(this),_amount) (contracts/MasterChef.sol#214)\n\tState variables written after the call(s):\n\t- user.amount = user.amount.add(_amount) (contracts/MasterChef.sol#215)\n\tMasterChef.userInfo (contracts/MasterChef.sol#78) can be used in cross function reentrancies:\n\t- MasterChef.deposit(uint256,uint256) (contracts/MasterChef.sol#203-219)\n\t- MasterChef.emergencyWithdraw(uint256) (contracts/MasterChef.sol#240-248)\n\t- MasterChef.pendingSushi(uint256,address) (contracts/MasterChef.sol#162-173)\n\t- MasterChef.userInfo (contracts/MasterChef.sol#78)\n\t- MasterChef.withdraw(uint256,uint256) (contracts/MasterChef.sol#222-237)\n\t- user.rewardDebt = user.amount.mul(pool.accSushiPerShare).div(1e12) (contracts/MasterChef.sol#217)\n\tMasterChef.userInfo (contracts/MasterChef.sol#78) can be used in cross function reentrancies:\n\t- MasterChef.deposit(uint256,uint256) (contracts/MasterChef.sol#203-219)\n\t- MasterChef.emergencyWithdraw(uint256) (contracts/MasterChef.sol#240-248)\n\t- MasterChef.pendingSushi(uint256,address) (contracts/MasterChef.sol#162-173)\n\t- MasterChef.userInfo (contracts/MasterChef.sol#78)\n\t- MasterChef.withdraw(uint256,uint256) (contracts/MasterChef.sol#222-237)\n",
            "impact": "Medium",
            "confidence": "Medium",
            "lines": [
                196
            ],
            "start_col": 9,
            "end_col": 49
        },
        {
            "check": "reentrancy-no-eth",
            "description": "Reentrancy in MasterChef.deposit(uint256,uint256) (contracts/MasterChef.sol#203-219):\n\tExternal calls:\n\t- updatePool(_pid) (contracts/MasterChef.sol#206)\n\t\t- sushi.mint(devaddr,sushiReward.div(10)) (contracts/MasterChef.sol#196)\n\t\t- sushi.mint(address(this),sushiReward) (contracts/MasterChef.sol#197)\n\t- safeSushiTransfer(msg.sender,pending) (contracts/MasterChef.sol#210)\n\t\t- sushi.transfer(_to,sushiBal) (contracts/MasterChef.sol#254)\n\t\t- sushi.transfer(_to,_amount) (contracts/MasterChef.sol#256)\n\t- pool.lpToken.safeTransferFrom(address(msg.sender),address(this),_amount) (contracts/MasterChef.sol#214)\n\tState variables written after the call(s):\n\t- user.amount = user.amount.add(_amount) (contracts/MasterChef.sol#215)\n\tMasterChef.userInfo (contracts/MasterChef.sol#78) can be used in cross function reentrancies:\n\t- MasterChef.deposit(uint256,uint256) (contracts/MasterChef.sol#203-219)\n\t- MasterChef.emergencyWithdraw(uint256) (contracts/MasterChef.sol#240-248)\n\t- MasterChef.pendingSushi(uint256,address) (contracts/MasterChef.sol#162-173)\n\t- MasterChef.userInfo (contracts/MasterChef.sol#78)\n\t- MasterChef.withdraw(uint256,uint256) (contracts/MasterChef.sol#222-237)\n\t- user.rewardDebt = user.amount.mul(pool.accSushiPerShare).div(1e12) (contracts/MasterChef.sol#217)\n\tMasterChef.userInfo (contracts/MasterChef.sol#78) can be used in cross function reentrancies:\n\t- MasterChef.deposit(uint256,uint256) (contracts/MasterChef.sol#203-219)\n\t- MasterChef.emergencyWithdraw(uint256) (contracts/MasterChef.sol#240-248)\n\t- MasterChef.pendingSushi(uint256,address) (contracts/MasterChef.sol#162-173)\n\t- MasterChef.userInfo (contracts/MasterChef.sol#78)\n\t- MasterChef.withdraw(uint256,uint256) (contracts/MasterChef.sol#222-237)\n",
            "impact": "Medium",
            "confidence": "Medium",
            "lines": [
                197
            ],
            "start_col": 9,
            "end_col": 47
        },
        {
            "check": "reentrancy-no-eth",
            "description": "Reentrancy in MasterChef.deposit(uint256,uint256) (contracts/MasterChef.sol#203-219):\n\tExternal calls:\n\t- updatePool(_pid) (contracts/MasterChef.sol#206)\n\t\t- sushi.mint(devaddr,sushiReward.div(10)) (contracts/MasterChef.sol#196)\n\t\t- sushi.mint(address(this),sushiReward) (contracts/MasterChef.sol#197)\n\t- safeSushiTransfer(msg.sender,pending) (contracts/MasterChef.sol#210)\n\t\t- sushi.transfer(_to,sushiBal) (contracts/MasterChef.sol#254)\n\t\t- sushi.transfer(_to,_amount) (contracts/MasterChef.sol#256)\n\t- pool.lpToken.safeTransferFrom(address(msg.sender),address(this),_amount) (contracts/MasterChef.sol#214)\n\tState variables written after the call(s):\n\t- user.amount = user.amount.add(_amount) (contracts/MasterChef.sol#215)\n\tMasterChef.userInfo (contracts/MasterChef.sol#78) can be used in cross function reentrancies:\n\t- MasterChef.deposit(uint256,uint256) (contracts/MasterChef.sol#203-219)\n\t- MasterChef.emergencyWithdraw(uint256) (contracts/MasterChef.sol#240-248)\n\t- MasterChef.pendingSushi(uint256,address) (contracts/MasterChef.sol#162-173)\n\t- MasterChef.userInfo (contracts/MasterChef.sol#78)\n\t- MasterChef.withdraw(uint256,uint256) (contracts/MasterChef.sol#222-237)\n\t- user.rewardDebt = user.amount.mul(pool.accSushiPerShare).div(1e12) (contracts/MasterChef.sol#217)\n\tMasterChef.userInfo (contracts/MasterChef.sol#78) can be used in cross function reentrancies:\n\t- MasterChef.deposit(uint256,uint256) (contracts/MasterChef.sol#203-219)\n\t- MasterChef.emergencyWithdraw(uint256) (contracts/MasterChef.sol#240-248)\n\t- MasterChef.pendingSushi(uint256,address) (contracts/MasterChef.sol#162-173)\n\t- MasterChef.userInfo (contracts/MasterChef.sol#78)\n\t- MasterChef.withdraw(uint256,uint256) (contracts/MasterChef.sol#222-237)\n",
            "impact": "Medium",
            "confidence": "Medium",
            "lines": [
                210
            ],
            "start_col": 17,
            "end_col": 55
        },
        {
            "check": "reentrancy-no-eth",
            "description": "Reentrancy in MasterChef.deposit(uint256,uint256) (contracts/MasterChef.sol#203-219):\n\tExternal calls:\n\t- updatePool(_pid) (contracts/MasterChef.sol#206)\n\t\t- sushi.mint(devaddr,sushiReward.div(10)) (contracts/MasterChef.sol#196)\n\t\t- sushi.mint(address(this),sushiReward) (contracts/MasterChef.sol#197)\n\t- safeSushiTransfer(msg.sender,pending) (contracts/MasterChef.sol#210)\n\t\t- sushi.transfer(_to,sushiBal) (contracts/MasterChef.sol#254)\n\t\t- sushi.transfer(_to,_amount) (contracts/MasterChef.sol#256)\n\t- pool.lpToken.safeTransferFrom(address(msg.sender),address(this),_amount) (contracts/MasterChef.sol#214)\n\tState variables written after the call(s):\n\t- user.amount = user.amount.add(_amount) (contracts/MasterChef.sol#215)\n\tMasterChef.userInfo (contracts/MasterChef.sol#78) can be used in cross function reentrancies:\n\t- MasterChef.deposit(uint256,uint256) (contracts/MasterChef.sol#203-219)\n\t- MasterChef.emergencyWithdraw(uint256) (contracts/MasterChef.sol#240-248)\n\t- MasterChef.pendingSushi(uint256,address) (contracts/MasterChef.sol#162-173)\n\t- MasterChef.userInfo (contracts/MasterChef.sol#78)\n\t- MasterChef.withdraw(uint256,uint256) (contracts/MasterChef.sol#222-237)\n\t- user.rewardDebt = user.amount.mul(pool.accSushiPerShare).div(1e12) (contracts/MasterChef.sol#217)\n\tMasterChef.userInfo (contracts/MasterChef.sol#78) can be used in cross function reentrancies:\n\t- MasterChef.deposit(uint256,uint256) (contracts/MasterChef.sol#203-219)\n\t- MasterChef.emergencyWithdraw(uint256) (contracts/MasterChef.sol#240-248)\n\t- MasterChef.pendingSushi(uint256,address) (contracts/MasterChef.sol#162-173)\n\t- MasterChef.userInfo (contracts/MasterChef.sol#78)\n\t- MasterChef.withdraw(uint256,uint256) (contracts/MasterChef.sol#222-237)\n",
            "impact": "Medium",
            "confidence": "Medium",
            "lines": [
                254
            ],
            "start_col": 13,
            "end_col": 42
        },
        {
            "check": "reentrancy-no-eth",
            "description": "Reentrancy in MasterChef.deposit(uint256,uint256) (contracts/MasterChef.sol#203-219):\n\tExternal calls:\n\t- updatePool(_pid) (contracts/MasterChef.sol#206)\n\t\t- sushi.mint(devaddr,sushiReward.div(10)) (contracts/MasterChef.sol#196)\n\t\t- sushi.mint(address(this),sushiReward) (contracts/MasterChef.sol#197)\n\t- safeSushiTransfer(msg.sender,pending) (contracts/MasterChef.sol#210)\n\t\t- sushi.transfer(_to,sushiBal) (contracts/MasterChef.sol#254)\n\t\t- sushi.transfer(_to,_amount) (contracts/MasterChef.sol#256)\n\t- pool.lpToken.safeTransferFrom(address(msg.sender),address(this),_amount) (contracts/MasterChef.sol#214)\n\tState variables written after the call(s):\n\t- user.amount = user.amount.add(_amount) (contracts/MasterChef.sol#215)\n\tMasterChef.userInfo (contracts/MasterChef.sol#78) can be used in cross function reentrancies:\n\t- MasterChef.deposit(uint256,uint256) (contracts/MasterChef.sol#203-219)\n\t- MasterChef.emergencyWithdraw(uint256) (contracts/MasterChef.sol#240-248)\n\t- MasterChef.pendingSushi(uint256,address) (contracts/MasterChef.sol#162-173)\n\t- MasterChef.userInfo (contracts/MasterChef.sol#78)\n\t- MasterChef.withdraw(uint256,uint256) (contracts/MasterChef.sol#222-237)\n\t- user.rewardDebt = user.amount.mul(pool.accSushiPerShare).div(1e12) (contracts/MasterChef.sol#217)\n\tMasterChef.userInfo (contracts/MasterChef.sol#78) can be used in cross function reentrancies:\n\t- MasterChef.deposit(uint256,uint256) (contracts/MasterChef.sol#203-219)\n\t- MasterChef.emergencyWithdraw(uint256) (contracts/MasterChef.sol#240-248)\n\t- MasterChef.pendingSushi(uint256,address) (contracts/MasterChef.sol#162-173)\n\t- MasterChef.userInfo (contracts/MasterChef.sol#78)\n\t- MasterChef.withdraw(uint256,uint256) (contracts/MasterChef.sol#222-237)\n",
            "impact": "Medium",
            "confidence": "Medium",
            "lines": [
                256
            ],
            "start_col": 13,
            "end_col": 41
        },
        {
            "check": "reentrancy-no-eth",
            "description": "Reentrancy in MasterChef.deposit(uint256,uint256) (contracts/MasterChef.sol#203-219):\n\tExternal calls:\n\t- updatePool(_pid) (contracts/MasterChef.sol#206)\n\t\t- sushi.mint(devaddr,sushiReward.div(10)) (contracts/MasterChef.sol#196)\n\t\t- sushi.mint(address(this),sushiReward) (contracts/MasterChef.sol#197)\n\t- safeSushiTransfer(msg.sender,pending) (contracts/MasterChef.sol#210)\n\t\t- sushi.transfer(_to,sushiBal) (contracts/MasterChef.sol#254)\n\t\t- sushi.transfer(_to,_amount) (contracts/MasterChef.sol#256)\n\t- pool.lpToken.safeTransferFrom(address(msg.sender),address(this),_amount) (contracts/MasterChef.sol#214)\n\tState variables written after the call(s):\n\t- user.amount = user.amount.add(_amount) (contracts/MasterChef.sol#215)\n\tMasterChef.userInfo (contracts/MasterChef.sol#78) can be used in cross function reentrancies:\n\t- MasterChef.deposit(uint256,uint256) (contracts/MasterChef.sol#203-219)\n\t- MasterChef.emergencyWithdraw(uint256) (contracts/MasterChef.sol#240-248)\n\t- MasterChef.pendingSushi(uint256,address) (contracts/MasterChef.sol#162-173)\n\t- MasterChef.userInfo (contracts/MasterChef.sol#78)\n\t- MasterChef.withdraw(uint256,uint256) (contracts/MasterChef.sol#222-237)\n\t- user.rewardDebt = user.amount.mul(pool.accSushiPerShare).div(1e12) (contracts/MasterChef.sol#217)\n\tMasterChef.userInfo (contracts/MasterChef.sol#78) can be used in cross function reentrancies:\n\t- MasterChef.deposit(uint256,uint256) (contracts/MasterChef.sol#203-219)\n\t- MasterChef.emergencyWithdraw(uint256) (contracts/MasterChef.sol#240-248)\n\t- MasterChef.pendingSushi(uint256,address) (contracts/MasterChef.sol#162-173)\n\t- MasterChef.userInfo (contracts/MasterChef.sol#78)\n\t- MasterChef.withdraw(uint256,uint256) (contracts/MasterChef.sol#222-237)\n",
            "impact": "Medium",
            "confidence": "Medium",
            "lines": [
                214
            ],
            "start_col": 13,
            "end_col": 87
        },
        {
            "check": "reentrancy-no-eth",
            "description": "Reentrancy in MasterChef.deposit(uint256,uint256) (contracts/MasterChef.sol#203-219):\n\tExternal calls:\n\t- updatePool(_pid) (contracts/MasterChef.sol#206)\n\t\t- sushi.mint(devaddr,sushiReward.div(10)) (contracts/MasterChef.sol#196)\n\t\t- sushi.mint(address(this),sushiReward) (contracts/MasterChef.sol#197)\n\t- safeSushiTransfer(msg.sender,pending) (contracts/MasterChef.sol#210)\n\t\t- sushi.transfer(_to,sushiBal) (contracts/MasterChef.sol#254)\n\t\t- sushi.transfer(_to,_amount) (contracts/MasterChef.sol#256)\n\t- pool.lpToken.safeTransferFrom(address(msg.sender),address(this),_amount) (contracts/MasterChef.sol#214)\n\tState variables written after the call(s):\n\t- user.amount = user.amount.add(_amount) (contracts/MasterChef.sol#215)\n\tMasterChef.userInfo (contracts/MasterChef.sol#78) can be used in cross function reentrancies:\n\t- MasterChef.deposit(uint256,uint256) (contracts/MasterChef.sol#203-219)\n\t- MasterChef.emergencyWithdraw(uint256) (contracts/MasterChef.sol#240-248)\n\t- MasterChef.pendingSushi(uint256,address) (contracts/MasterChef.sol#162-173)\n\t- MasterChef.userInfo (contracts/MasterChef.sol#78)\n\t- MasterChef.withdraw(uint256,uint256) (contracts/MasterChef.sol#222-237)\n\t- user.rewardDebt = user.amount.mul(pool.accSushiPerShare).div(1e12) (contracts/MasterChef.sol#217)\n\tMasterChef.userInfo (contracts/MasterChef.sol#78) can be used in cross function reentrancies:\n\t- MasterChef.deposit(uint256,uint256) (contracts/MasterChef.sol#203-219)\n\t- MasterChef.emergencyWithdraw(uint256) (contracts/MasterChef.sol#240-248)\n\t- MasterChef.pendingSushi(uint256,address) (contracts/MasterChef.sol#162-173)\n\t- MasterChef.userInfo (contracts/MasterChef.sol#78)\n\t- MasterChef.withdraw(uint256,uint256) (contracts/MasterChef.sol#222-237)\n",
            "impact": "Medium",
            "confidence": "Medium",
            "lines": [
                215
            ],
            "start_col": 13,
            "end_col": 51
        },
        {
            "check": "reentrancy-no-eth",
            "description": "Reentrancy in MasterChef.deposit(uint256,uint256) (contracts/MasterChef.sol#203-219):\n\tExternal calls:\n\t- updatePool(_pid) (contracts/MasterChef.sol#206)\n\t\t- sushi.mint(devaddr,sushiReward.div(10)) (contracts/MasterChef.sol#196)\n\t\t- sushi.mint(address(this),sushiReward) (contracts/MasterChef.sol#197)\n\t- safeSushiTransfer(msg.sender,pending) (contracts/MasterChef.sol#210)\n\t\t- sushi.transfer(_to,sushiBal) (contracts/MasterChef.sol#254)\n\t\t- sushi.transfer(_to,_amount) (contracts/MasterChef.sol#256)\n\t- pool.lpToken.safeTransferFrom(address(msg.sender),address(this),_amount) (contracts/MasterChef.sol#214)\n\tState variables written after the call(s):\n\t- user.amount = user.amount.add(_amount) (contracts/MasterChef.sol#215)\n\tMasterChef.userInfo (contracts/MasterChef.sol#78) can be used in cross function reentrancies:\n\t- MasterChef.deposit(uint256,uint256) (contracts/MasterChef.sol#203-219)\n\t- MasterChef.emergencyWithdraw(uint256) (contracts/MasterChef.sol#240-248)\n\t- MasterChef.pendingSushi(uint256,address) (contracts/MasterChef.sol#162-173)\n\t- MasterChef.userInfo (contracts/MasterChef.sol#78)\n\t- MasterChef.withdraw(uint256,uint256) (contracts/MasterChef.sol#222-237)\n\t- user.rewardDebt = user.amount.mul(pool.accSushiPerShare).div(1e12) (contracts/MasterChef.sol#217)\n\tMasterChef.userInfo (contracts/MasterChef.sol#78) can be used in cross function reentrancies:\n\t- MasterChef.deposit(uint256,uint256) (contracts/MasterChef.sol#203-219)\n\t- MasterChef.emergencyWithdraw(uint256) (contracts/MasterChef.sol#240-248)\n\t- MasterChef.pendingSushi(uint256,address) (contracts/MasterChef.sol#162-173)\n\t- MasterChef.userInfo (contracts/MasterChef.sol#78)\n\t- MasterChef.withdraw(uint256,uint256) (contracts/MasterChef.sol#222-237)\n",
            "impact": "Medium",
            "confidence": "Medium",
            "lines": [
                217
            ],
            "start_col": 9,
            "end_col": 75
        },
        {
            "check": "reentrancy-no-eth",
            "description": "Reentrancy in MasterChef.add(uint256,IERC20,bool) (contracts/MasterChef.sol#108-120):\n\tExternal calls:\n\t- massUpdatePools() (contracts/MasterChef.sol#110)\n\t\t- sushi.mint(devaddr,sushiReward.div(10)) (contracts/MasterChef.sol#196)\n\t\t- sushi.mint(address(this),sushiReward) (contracts/MasterChef.sol#197)\n\tState variables written after the call(s):\n\t- poolInfo.push(PoolInfo({lpToken:_lpToken,allocPoint:_allocPoint,lastRewardBlock:lastRewardBlock,accSushiPerShare:0})) (contracts/MasterChef.sol#114-119)\n\tMasterChef.poolInfo (contracts/MasterChef.sol#76) can be used in cross function reentrancies:\n\t- MasterChef.add(uint256,IERC20,bool) (contracts/MasterChef.sol#108-120)\n\t- MasterChef.deposit(uint256,uint256) (contracts/MasterChef.sol#203-219)\n\t- MasterChef.emergencyWithdraw(uint256) (contracts/MasterChef.sol#240-248)\n\t- MasterChef.massUpdatePools() (contracts/MasterChef.sol#176-181)\n\t- MasterChef.migrate(uint256) (contracts/MasterChef.sol#137-146)\n\t- MasterChef.pendingSushi(uint256,address) (contracts/MasterChef.sol#162-173)\n\t- MasterChef.poolInfo (contracts/MasterChef.sol#76)\n\t- MasterChef.poolLength() (contracts/MasterChef.sol#102-104)\n\t- MasterChef.set(uint256,uint256,bool) (contracts/MasterChef.sol#123-129)\n\t- MasterChef.updatePool(uint256) (contracts/MasterChef.sol#184-200)\n\t- MasterChef.withdraw(uint256,uint256) (contracts/MasterChef.sol#222-237)\n\t- totalAllocPoint = totalAllocPoint.add(_allocPoint) (contracts/MasterChef.sol#113)\n\tMasterChef.totalAllocPoint (contracts/MasterChef.sol#80) can be used in cross function reentrancies:\n\t- MasterChef.add(uint256,IERC20,bool) (contracts/MasterChef.sol#108-120)\n\t- MasterChef.pendingSushi(uint256,address) (contracts/MasterChef.sol#162-173)\n\t- MasterChef.set(uint256,uint256,bool) (contracts/MasterChef.sol#123-129)\n\t- MasterChef.totalAllocPoint (contracts/MasterChef.sol#80)\n\t- MasterChef.updatePool(uint256) (contracts/MasterChef.sol#184-200)\n",
            "impact": "Medium",
            "confidence": "Medium",
            "lines": [
                108,
                109,
                110,
                111,
                112,
                113,
                114,
                115,
                116,
                117,
                118,
                119,
                120
            ],
            "start_col": 5,
            "end_col": 6
        },
        {
            "check": "reentrancy-no-eth",
            "description": "Reentrancy in MasterChef.add(uint256,IERC20,bool) (contracts/MasterChef.sol#108-120):\n\tExternal calls:\n\t- massUpdatePools() (contracts/MasterChef.sol#110)\n\t\t- sushi.mint(devaddr,sushiReward.div(10)) (contracts/MasterChef.sol#196)\n\t\t- sushi.mint(address(this),sushiReward) (contracts/MasterChef.sol#197)\n\tState variables written after the call(s):\n\t- poolInfo.push(PoolInfo({lpToken:_lpToken,allocPoint:_allocPoint,lastRewardBlock:lastRewardBlock,accSushiPerShare:0})) (contracts/MasterChef.sol#114-119)\n\tMasterChef.poolInfo (contracts/MasterChef.sol#76) can be used in cross function reentrancies:\n\t- MasterChef.add(uint256,IERC20,bool) (contracts/MasterChef.sol#108-120)\n\t- MasterChef.deposit(uint256,uint256) (contracts/MasterChef.sol#203-219)\n\t- MasterChef.emergencyWithdraw(uint256) (contracts/MasterChef.sol#240-248)\n\t- MasterChef.massUpdatePools() (contracts/MasterChef.sol#176-181)\n\t- MasterChef.migrate(uint256) (contracts/MasterChef.sol#137-146)\n\t- MasterChef.pendingSushi(uint256,address) (contracts/MasterChef.sol#162-173)\n\t- MasterChef.poolInfo (contracts/MasterChef.sol#76)\n\t- MasterChef.poolLength() (contracts/MasterChef.sol#102-104)\n\t- MasterChef.set(uint256,uint256,bool) (contracts/MasterChef.sol#123-129)\n\t- MasterChef.updatePool(uint256) (contracts/MasterChef.sol#184-200)\n\t- MasterChef.withdraw(uint256,uint256) (contracts/MasterChef.sol#222-237)\n\t- totalAllocPoint = totalAllocPoint.add(_allocPoint) (contracts/MasterChef.sol#113)\n\tMasterChef.totalAllocPoint (contracts/MasterChef.sol#80) can be used in cross function reentrancies:\n\t- MasterChef.add(uint256,IERC20,bool) (contracts/MasterChef.sol#108-120)\n\t- MasterChef.pendingSushi(uint256,address) (contracts/MasterChef.sol#162-173)\n\t- MasterChef.set(uint256,uint256,bool) (contracts/MasterChef.sol#123-129)\n\t- MasterChef.totalAllocPoint (contracts/MasterChef.sol#80)\n\t- MasterChef.updatePool(uint256) (contracts/MasterChef.sol#184-200)\n",
            "impact": "Medium",
            "confidence": "Medium",
            "lines": [
                110
            ],
            "start_col": 13,
            "end_col": 30
        },
        {
            "check": "reentrancy-no-eth",
            "description": "Reentrancy in MasterChef.add(uint256,IERC20,bool) (contracts/MasterChef.sol#108-120):\n\tExternal calls:\n\t- massUpdatePools() (contracts/MasterChef.sol#110)\n\t\t- sushi.mint(devaddr,sushiReward.div(10)) (contracts/MasterChef.sol#196)\n\t\t- sushi.mint(address(this),sushiReward) (contracts/MasterChef.sol#197)\n\tState variables written after the call(s):\n\t- poolInfo.push(PoolInfo({lpToken:_lpToken,allocPoint:_allocPoint,lastRewardBlock:lastRewardBlock,accSushiPerShare:0})) (contracts/MasterChef.sol#114-119)\n\tMasterChef.poolInfo (contracts/MasterChef.sol#76) can be used in cross function reentrancies:\n\t- MasterChef.add(uint256,IERC20,bool) (contracts/MasterChef.sol#108-120)\n\t- MasterChef.deposit(uint256,uint256) (contracts/MasterChef.sol#203-219)\n\t- MasterChef.emergencyWithdraw(uint256) (contracts/MasterChef.sol#240-248)\n\t- MasterChef.massUpdatePools() (contracts/MasterChef.sol#176-181)\n\t- MasterChef.migrate(uint256) (contracts/MasterChef.sol#137-146)\n\t- MasterChef.pendingSushi(uint256,address) (contracts/MasterChef.sol#162-173)\n\t- MasterChef.poolInfo (contracts/MasterChef.sol#76)\n\t- MasterChef.poolLength() (contracts/MasterChef.sol#102-104)\n\t- MasterChef.set(uint256,uint256,bool) (contracts/MasterChef.sol#123-129)\n\t- MasterChef.updatePool(uint256) (contracts/MasterChef.sol#184-200)\n\t- MasterChef.withdraw(uint256,uint256) (contracts/MasterChef.sol#222-237)\n\t- totalAllocPoint = totalAllocPoint.add(_allocPoint) (contracts/MasterChef.sol#113)\n\tMasterChef.totalAllocPoint (contracts/MasterChef.sol#80) can be used in cross function reentrancies:\n\t- MasterChef.add(uint256,IERC20,bool) (contracts/MasterChef.sol#108-120)\n\t- MasterChef.pendingSushi(uint256,address) (contracts/MasterChef.sol#162-173)\n\t- MasterChef.set(uint256,uint256,bool) (contracts/MasterChef.sol#123-129)\n\t- MasterChef.totalAllocPoint (contracts/MasterChef.sol#80)\n\t- MasterChef.updatePool(uint256) (contracts/MasterChef.sol#184-200)\n",
            "impact": "Medium",
            "confidence": "Medium",
            "lines": [
                196
            ],
            "start_col": 9,
            "end_col": 49
        },
        {
            "check": "reentrancy-no-eth",
            "description": "Reentrancy in MasterChef.add(uint256,IERC20,bool) (contracts/MasterChef.sol#108-120):\n\tExternal calls:\n\t- massUpdatePools() (contracts/MasterChef.sol#110)\n\t\t- sushi.mint(devaddr,sushiReward.div(10)) (contracts/MasterChef.sol#196)\n\t\t- sushi.mint(address(this),sushiReward) (contracts/MasterChef.sol#197)\n\tState variables written after the call(s):\n\t- poolInfo.push(PoolInfo({lpToken:_lpToken,allocPoint:_allocPoint,lastRewardBlock:lastRewardBlock,accSushiPerShare:0})) (contracts/MasterChef.sol#114-119)\n\tMasterChef.poolInfo (contracts/MasterChef.sol#76) can be used in cross function reentrancies:\n\t- MasterChef.add(uint256,IERC20,bool) (contracts/MasterChef.sol#108-120)\n\t- MasterChef.deposit(uint256,uint256) (contracts/MasterChef.sol#203-219)\n\t- MasterChef.emergencyWithdraw(uint256) (contracts/MasterChef.sol#240-248)\n\t- MasterChef.massUpdatePools() (contracts/MasterChef.sol#176-181)\n\t- MasterChef.migrate(uint256) (contracts/MasterChef.sol#137-146)\n\t- MasterChef.pendingSushi(uint256,address) (contracts/MasterChef.sol#162-173)\n\t- MasterChef.poolInfo (contracts/MasterChef.sol#76)\n\t- MasterChef.poolLength() (contracts/MasterChef.sol#102-104)\n\t- MasterChef.set(uint256,uint256,bool) (contracts/MasterChef.sol#123-129)\n\t- MasterChef.updatePool(uint256) (contracts/MasterChef.sol#184-200)\n\t- MasterChef.withdraw(uint256,uint256) (contracts/MasterChef.sol#222-237)\n\t- totalAllocPoint = totalAllocPoint.add(_allocPoint) (contracts/MasterChef.sol#113)\n\tMasterChef.totalAllocPoint (contracts/MasterChef.sol#80) can be used in cross function reentrancies:\n\t- MasterChef.add(uint256,IERC20,bool) (contracts/MasterChef.sol#108-120)\n\t- MasterChef.pendingSushi(uint256,address) (contracts/MasterChef.sol#162-173)\n\t- MasterChef.set(uint256,uint256,bool) (contracts/MasterChef.sol#123-129)\n\t- MasterChef.totalAllocPoint (contracts/MasterChef.sol#80)\n\t- MasterChef.updatePool(uint256) (contracts/MasterChef.sol#184-200)\n",
            "impact": "Medium",
            "confidence": "Medium",
            "lines": [
                197
            ],
            "start_col": 9,
            "end_col": 47
        },
        {
            "check": "reentrancy-no-eth",
            "description": "Reentrancy in MasterChef.add(uint256,IERC20,bool) (contracts/MasterChef.sol#108-120):\n\tExternal calls:\n\t- massUpdatePools() (contracts/MasterChef.sol#110)\n\t\t- sushi.mint(devaddr,sushiReward.div(10)) (contracts/MasterChef.sol#196)\n\t\t- sushi.mint(address(this),sushiReward) (contracts/MasterChef.sol#197)\n\tState variables written after the call(s):\n\t- poolInfo.push(PoolInfo({lpToken:_lpToken,allocPoint:_allocPoint,lastRewardBlock:lastRewardBlock,accSushiPerShare:0})) (contracts/MasterChef.sol#114-119)\n\tMasterChef.poolInfo (contracts/MasterChef.sol#76) can be used in cross function reentrancies:\n\t- MasterChef.add(uint256,IERC20,bool) (contracts/MasterChef.sol#108-120)\n\t- MasterChef.deposit(uint256,uint256) (contracts/MasterChef.sol#203-219)\n\t- MasterChef.emergencyWithdraw(uint256) (contracts/MasterChef.sol#240-248)\n\t- MasterChef.massUpdatePools() (contracts/MasterChef.sol#176-181)\n\t- MasterChef.migrate(uint256) (contracts/MasterChef.sol#137-146)\n\t- MasterChef.pendingSushi(uint256,address) (contracts/MasterChef.sol#162-173)\n\t- MasterChef.poolInfo (contracts/MasterChef.sol#76)\n\t- MasterChef.poolLength() (contracts/MasterChef.sol#102-104)\n\t- MasterChef.set(uint256,uint256,bool) (contracts/MasterChef.sol#123-129)\n\t- MasterChef.updatePool(uint256) (contracts/MasterChef.sol#184-200)\n\t- MasterChef.withdraw(uint256,uint256) (contracts/MasterChef.sol#222-237)\n\t- totalAllocPoint = totalAllocPoint.add(_allocPoint) (contracts/MasterChef.sol#113)\n\tMasterChef.totalAllocPoint (contracts/MasterChef.sol#80) can be used in cross function reentrancies:\n\t- MasterChef.add(uint256,IERC20,bool) (contracts/MasterChef.sol#108-120)\n\t- MasterChef.pendingSushi(uint256,address) (contracts/MasterChef.sol#162-173)\n\t- MasterChef.set(uint256,uint256,bool) (contracts/MasterChef.sol#123-129)\n\t- MasterChef.totalAllocPoint (contracts/MasterChef.sol#80)\n\t- MasterChef.updatePool(uint256) (contracts/MasterChef.sol#184-200)\n",
            "impact": "Medium",
            "confidence": "Medium",
            "lines": [
                114,
                115,
                116,
                117,
                118,
                119
            ],
            "start_col": 9,
            "end_col": 12
        },
        {
            "check": "reentrancy-no-eth",
            "description": "Reentrancy in MasterChef.add(uint256,IERC20,bool) (contracts/MasterChef.sol#108-120):\n\tExternal calls:\n\t- massUpdatePools() (contracts/MasterChef.sol#110)\n\t\t- sushi.mint(devaddr,sushiReward.div(10)) (contracts/MasterChef.sol#196)\n\t\t- sushi.mint(address(this),sushiReward) (contracts/MasterChef.sol#197)\n\tState variables written after the call(s):\n\t- poolInfo.push(PoolInfo({lpToken:_lpToken,allocPoint:_allocPoint,lastRewardBlock:lastRewardBlock,accSushiPerShare:0})) (contracts/MasterChef.sol#114-119)\n\tMasterChef.poolInfo (contracts/MasterChef.sol#76) can be used in cross function reentrancies:\n\t- MasterChef.add(uint256,IERC20,bool) (contracts/MasterChef.sol#108-120)\n\t- MasterChef.deposit(uint256,uint256) (contracts/MasterChef.sol#203-219)\n\t- MasterChef.emergencyWithdraw(uint256) (contracts/MasterChef.sol#240-248)\n\t- MasterChef.massUpdatePools() (contracts/MasterChef.sol#176-181)\n\t- MasterChef.migrate(uint256) (contracts/MasterChef.sol#137-146)\n\t- MasterChef.pendingSushi(uint256,address) (contracts/MasterChef.sol#162-173)\n\t- MasterChef.poolInfo (contracts/MasterChef.sol#76)\n\t- MasterChef.poolLength() (contracts/MasterChef.sol#102-104)\n\t- MasterChef.set(uint256,uint256,bool) (contracts/MasterChef.sol#123-129)\n\t- MasterChef.updatePool(uint256) (contracts/MasterChef.sol#184-200)\n\t- MasterChef.withdraw(uint256,uint256) (contracts/MasterChef.sol#222-237)\n\t- totalAllocPoint = totalAllocPoint.add(_allocPoint) (contracts/MasterChef.sol#113)\n\tMasterChef.totalAllocPoint (contracts/MasterChef.sol#80) can be used in cross function reentrancies:\n\t- MasterChef.add(uint256,IERC20,bool) (contracts/MasterChef.sol#108-120)\n\t- MasterChef.pendingSushi(uint256,address) (contracts/MasterChef.sol#162-173)\n\t- MasterChef.set(uint256,uint256,bool) (contracts/MasterChef.sol#123-129)\n\t- MasterChef.totalAllocPoint (contracts/MasterChef.sol#80)\n\t- MasterChef.updatePool(uint256) (contracts/MasterChef.sol#184-200)\n",
            "impact": "Medium",
            "confidence": "Medium",
            "lines": [
                113
            ],
            "start_col": 9,
            "end_col": 59
        },
        {
            "check": "reentrancy-no-eth",
            "description": "Reentrancy in MasterChef.withdraw(uint256,uint256) (contracts/MasterChef.sol#222-237):\n\tExternal calls:\n\t- updatePool(_pid) (contracts/MasterChef.sol#226)\n\t\t- sushi.mint(devaddr,sushiReward.div(10)) (contracts/MasterChef.sol#196)\n\t\t- sushi.mint(address(this),sushiReward) (contracts/MasterChef.sol#197)\n\t- safeSushiTransfer(msg.sender,pending) (contracts/MasterChef.sol#229)\n\t\t- sushi.transfer(_to,sushiBal) (contracts/MasterChef.sol#254)\n\t\t- sushi.transfer(_to,_amount) (contracts/MasterChef.sol#256)\n\t- pool.lpToken.safeTransfer(address(msg.sender),_amount) (contracts/MasterChef.sol#233)\n\tState variables written after the call(s):\n\t- user.rewardDebt = user.amount.mul(pool.accSushiPerShare).div(1e12) (contracts/MasterChef.sol#235)\n\tMasterChef.userInfo (contracts/MasterChef.sol#78) can be used in cross function reentrancies:\n\t- MasterChef.deposit(uint256,uint256) (contracts/MasterChef.sol#203-219)\n\t- MasterChef.emergencyWithdraw(uint256) (contracts/MasterChef.sol#240-248)\n\t- MasterChef.pendingSushi(uint256,address) (contracts/MasterChef.sol#162-173)\n\t- MasterChef.userInfo (contracts/MasterChef.sol#78)\n\t- MasterChef.withdraw(uint256,uint256) (contracts/MasterChef.sol#222-237)\n",
            "impact": "Medium",
            "confidence": "Medium",
            "lines": [
                222,
                223,
                224,
                225,
                226,
                227,
                228,
                229,
                230,
                231,
                232,
                233,
                234,
                235,
                236,
                237
            ],
            "start_col": 5,
            "end_col": 6
        },
        {
            "check": "reentrancy-no-eth",
            "description": "Reentrancy in MasterChef.withdraw(uint256,uint256) (contracts/MasterChef.sol#222-237):\n\tExternal calls:\n\t- updatePool(_pid) (contracts/MasterChef.sol#226)\n\t\t- sushi.mint(devaddr,sushiReward.div(10)) (contracts/MasterChef.sol#196)\n\t\t- sushi.mint(address(this),sushiReward) (contracts/MasterChef.sol#197)\n\t- safeSushiTransfer(msg.sender,pending) (contracts/MasterChef.sol#229)\n\t\t- sushi.transfer(_to,sushiBal) (contracts/MasterChef.sol#254)\n\t\t- sushi.transfer(_to,_amount) (contracts/MasterChef.sol#256)\n\t- pool.lpToken.safeTransfer(address(msg.sender),_amount) (contracts/MasterChef.sol#233)\n\tState variables written after the call(s):\n\t- user.rewardDebt = user.amount.mul(pool.accSushiPerShare).div(1e12) (contracts/MasterChef.sol#235)\n\tMasterChef.userInfo (contracts/MasterChef.sol#78) can be used in cross function reentrancies:\n\t- MasterChef.deposit(uint256,uint256) (contracts/MasterChef.sol#203-219)\n\t- MasterChef.emergencyWithdraw(uint256) (contracts/MasterChef.sol#240-248)\n\t- MasterChef.pendingSushi(uint256,address) (contracts/MasterChef.sol#162-173)\n\t- MasterChef.userInfo (contracts/MasterChef.sol#78)\n\t- MasterChef.withdraw(uint256,uint256) (contracts/MasterChef.sol#222-237)\n",
            "impact": "Medium",
            "confidence": "Medium",
            "lines": [
                226
            ],
            "start_col": 9,
            "end_col": 25
        },
        {
            "check": "reentrancy-no-eth",
            "description": "Reentrancy in MasterChef.withdraw(uint256,uint256) (contracts/MasterChef.sol#222-237):\n\tExternal calls:\n\t- updatePool(_pid) (contracts/MasterChef.sol#226)\n\t\t- sushi.mint(devaddr,sushiReward.div(10)) (contracts/MasterChef.sol#196)\n\t\t- sushi.mint(address(this),sushiReward) (contracts/MasterChef.sol#197)\n\t- safeSushiTransfer(msg.sender,pending) (contracts/MasterChef.sol#229)\n\t\t- sushi.transfer(_to,sushiBal) (contracts/MasterChef.sol#254)\n\t\t- sushi.transfer(_to,_amount) (contracts/MasterChef.sol#256)\n\t- pool.lpToken.safeTransfer(address(msg.sender),_amount) (contracts/MasterChef.sol#233)\n\tState variables written after the call(s):\n\t- user.rewardDebt = user.amount.mul(pool.accSushiPerShare).div(1e12) (contracts/MasterChef.sol#235)\n\tMasterChef.userInfo (contracts/MasterChef.sol#78) can be used in cross function reentrancies:\n\t- MasterChef.deposit(uint256,uint256) (contracts/MasterChef.sol#203-219)\n\t- MasterChef.emergencyWithdraw(uint256) (contracts/MasterChef.sol#240-248)\n\t- MasterChef.pendingSushi(uint256,address) (contracts/MasterChef.sol#162-173)\n\t- MasterChef.userInfo (contracts/MasterChef.sol#78)\n\t- MasterChef.withdraw(uint256,uint256) (contracts/MasterChef.sol#222-237)\n",
            "impact": "Medium",
            "confidence": "Medium",
            "lines": [
                196
            ],
            "start_col": 9,
            "end_col": 49
        },
        {
            "check": "reentrancy-no-eth",
            "description": "Reentrancy in MasterChef.withdraw(uint256,uint256) (contracts/MasterChef.sol#222-237):\n\tExternal calls:\n\t- updatePool(_pid) (contracts/MasterChef.sol#226)\n\t\t- sushi.mint(devaddr,sushiReward.div(10)) (contracts/MasterChef.sol#196)\n\t\t- sushi.mint(address(this),sushiReward) (contracts/MasterChef.sol#197)\n\t- safeSushiTransfer(msg.sender,pending) (contracts/MasterChef.sol#229)\n\t\t- sushi.transfer(_to,sushiBal) (contracts/MasterChef.sol#254)\n\t\t- sushi.transfer(_to,_amount) (contracts/MasterChef.sol#256)\n\t- pool.lpToken.safeTransfer(address(msg.sender),_amount) (contracts/MasterChef.sol#233)\n\tState variables written after the call(s):\n\t- user.rewardDebt = user.amount.mul(pool.accSushiPerShare).div(1e12) (contracts/MasterChef.sol#235)\n\tMasterChef.userInfo (contracts/MasterChef.sol#78) can be used in cross function reentrancies:\n\t- MasterChef.deposit(uint256,uint256) (contracts/MasterChef.sol#203-219)\n\t- MasterChef.emergencyWithdraw(uint256) (contracts/MasterChef.sol#240-248)\n\t- MasterChef.pendingSushi(uint256,address) (contracts/MasterChef.sol#162-173)\n\t- MasterChef.userInfo (contracts/MasterChef.sol#78)\n\t- MasterChef.withdraw(uint256,uint256) (contracts/MasterChef.sol#222-237)\n",
            "impact": "Medium",
            "confidence": "Medium",
            "lines": [
                197
            ],
            "start_col": 9,
            "end_col": 47
        },
        {
            "check": "reentrancy-no-eth",
            "description": "Reentrancy in MasterChef.withdraw(uint256,uint256) (contracts/MasterChef.sol#222-237):\n\tExternal calls:\n\t- updatePool(_pid) (contracts/MasterChef.sol#226)\n\t\t- sushi.mint(devaddr,sushiReward.div(10)) (contracts/MasterChef.sol#196)\n\t\t- sushi.mint(address(this),sushiReward) (contracts/MasterChef.sol#197)\n\t- safeSushiTransfer(msg.sender,pending) (contracts/MasterChef.sol#229)\n\t\t- sushi.transfer(_to,sushiBal) (contracts/MasterChef.sol#254)\n\t\t- sushi.transfer(_to,_amount) (contracts/MasterChef.sol#256)\n\t- pool.lpToken.safeTransfer(address(msg.sender),_amount) (contracts/MasterChef.sol#233)\n\tState variables written after the call(s):\n\t- user.rewardDebt = user.amount.mul(pool.accSushiPerShare).div(1e12) (contracts/MasterChef.sol#235)\n\tMasterChef.userInfo (contracts/MasterChef.sol#78) can be used in cross function reentrancies:\n\t- MasterChef.deposit(uint256,uint256) (contracts/MasterChef.sol#203-219)\n\t- MasterChef.emergencyWithdraw(uint256) (contracts/MasterChef.sol#240-248)\n\t- MasterChef.pendingSushi(uint256,address) (contracts/MasterChef.sol#162-173)\n\t- MasterChef.userInfo (contracts/MasterChef.sol#78)\n\t- MasterChef.withdraw(uint256,uint256) (contracts/MasterChef.sol#222-237)\n",
            "impact": "Medium",
            "confidence": "Medium",
            "lines": [
                229
            ],
            "start_col": 13,
            "end_col": 51
        },
        {
            "check": "reentrancy-no-eth",
            "description": "Reentrancy in MasterChef.withdraw(uint256,uint256) (contracts/MasterChef.sol#222-237):\n\tExternal calls:\n\t- updatePool(_pid) (contracts/MasterChef.sol#226)\n\t\t- sushi.mint(devaddr,sushiReward.div(10)) (contracts/MasterChef.sol#196)\n\t\t- sushi.mint(address(this),sushiReward) (contracts/MasterChef.sol#197)\n\t- safeSushiTransfer(msg.sender,pending) (contracts/MasterChef.sol#229)\n\t\t- sushi.transfer(_to,sushiBal) (contracts/MasterChef.sol#254)\n\t\t- sushi.transfer(_to,_amount) (contracts/MasterChef.sol#256)\n\t- pool.lpToken.safeTransfer(address(msg.sender),_amount) (contracts/MasterChef.sol#233)\n\tState variables written after the call(s):\n\t- user.rewardDebt = user.amount.mul(pool.accSushiPerShare).div(1e12) (contracts/MasterChef.sol#235)\n\tMasterChef.userInfo (contracts/MasterChef.sol#78) can be used in cross function reentrancies:\n\t- MasterChef.deposit(uint256,uint256) (contracts/MasterChef.sol#203-219)\n\t- MasterChef.emergencyWithdraw(uint256) (contracts/MasterChef.sol#240-248)\n\t- MasterChef.pendingSushi(uint256,address) (contracts/MasterChef.sol#162-173)\n\t- MasterChef.userInfo (contracts/MasterChef.sol#78)\n\t- MasterChef.withdraw(uint256,uint256) (contracts/MasterChef.sol#222-237)\n",
            "impact": "Medium",
            "confidence": "Medium",
            "lines": [
                254
            ],
            "start_col": 13,
            "end_col": 42
        },
        {
            "check": "reentrancy-no-eth",
            "description": "Reentrancy in MasterChef.withdraw(uint256,uint256) (contracts/MasterChef.sol#222-237):\n\tExternal calls:\n\t- updatePool(_pid) (contracts/MasterChef.sol#226)\n\t\t- sushi.mint(devaddr,sushiReward.div(10)) (contracts/MasterChef.sol#196)\n\t\t- sushi.mint(address(this),sushiReward) (contracts/MasterChef.sol#197)\n\t- safeSushiTransfer(msg.sender,pending) (contracts/MasterChef.sol#229)\n\t\t- sushi.transfer(_to,sushiBal) (contracts/MasterChef.sol#254)\n\t\t- sushi.transfer(_to,_amount) (contracts/MasterChef.sol#256)\n\t- pool.lpToken.safeTransfer(address(msg.sender),_amount) (contracts/MasterChef.sol#233)\n\tState variables written after the call(s):\n\t- user.rewardDebt = user.amount.mul(pool.accSushiPerShare).div(1e12) (contracts/MasterChef.sol#235)\n\tMasterChef.userInfo (contracts/MasterChef.sol#78) can be used in cross function reentrancies:\n\t- MasterChef.deposit(uint256,uint256) (contracts/MasterChef.sol#203-219)\n\t- MasterChef.emergencyWithdraw(uint256) (contracts/MasterChef.sol#240-248)\n\t- MasterChef.pendingSushi(uint256,address) (contracts/MasterChef.sol#162-173)\n\t- MasterChef.userInfo (contracts/MasterChef.sol#78)\n\t- MasterChef.withdraw(uint256,uint256) (contracts/MasterChef.sol#222-237)\n",
            "impact": "Medium",
            "confidence": "Medium",
            "lines": [
                256
            ],
            "start_col": 13,
            "end_col": 41
        },
        {
            "check": "reentrancy-no-eth",
            "description": "Reentrancy in MasterChef.withdraw(uint256,uint256) (contracts/MasterChef.sol#222-237):\n\tExternal calls:\n\t- updatePool(_pid) (contracts/MasterChef.sol#226)\n\t\t- sushi.mint(devaddr,sushiReward.div(10)) (contracts/MasterChef.sol#196)\n\t\t- sushi.mint(address(this),sushiReward) (contracts/MasterChef.sol#197)\n\t- safeSushiTransfer(msg.sender,pending) (contracts/MasterChef.sol#229)\n\t\t- sushi.transfer(_to,sushiBal) (contracts/MasterChef.sol#254)\n\t\t- sushi.transfer(_to,_amount) (contracts/MasterChef.sol#256)\n\t- pool.lpToken.safeTransfer(address(msg.sender),_amount) (contracts/MasterChef.sol#233)\n\tState variables written after the call(s):\n\t- user.rewardDebt = user.amount.mul(pool.accSushiPerShare).div(1e12) (contracts/MasterChef.sol#235)\n\tMasterChef.userInfo (contracts/MasterChef.sol#78) can be used in cross function reentrancies:\n\t- MasterChef.deposit(uint256,uint256) (contracts/MasterChef.sol#203-219)\n\t- MasterChef.emergencyWithdraw(uint256) (contracts/MasterChef.sol#240-248)\n\t- MasterChef.pendingSushi(uint256,address) (contracts/MasterChef.sol#162-173)\n\t- MasterChef.userInfo (contracts/MasterChef.sol#78)\n\t- MasterChef.withdraw(uint256,uint256) (contracts/MasterChef.sol#222-237)\n",
            "impact": "Medium",
            "confidence": "Medium",
            "lines": [
                233
            ],
            "start_col": 13,
            "end_col": 68
        },
        {
            "check": "reentrancy-no-eth",
            "description": "Reentrancy in MasterChef.withdraw(uint256,uint256) (contracts/MasterChef.sol#222-237):\n\tExternal calls:\n\t- updatePool(_pid) (contracts/MasterChef.sol#226)\n\t\t- sushi.mint(devaddr,sushiReward.div(10)) (contracts/MasterChef.sol#196)\n\t\t- sushi.mint(address(this),sushiReward) (contracts/MasterChef.sol#197)\n\t- safeSushiTransfer(msg.sender,pending) (contracts/MasterChef.sol#229)\n\t\t- sushi.transfer(_to,sushiBal) (contracts/MasterChef.sol#254)\n\t\t- sushi.transfer(_to,_amount) (contracts/MasterChef.sol#256)\n\t- pool.lpToken.safeTransfer(address(msg.sender),_amount) (contracts/MasterChef.sol#233)\n\tState variables written after the call(s):\n\t- user.rewardDebt = user.amount.mul(pool.accSushiPerShare).div(1e12) (contracts/MasterChef.sol#235)\n\tMasterChef.userInfo (contracts/MasterChef.sol#78) can be used in cross function reentrancies:\n\t- MasterChef.deposit(uint256,uint256) (contracts/MasterChef.sol#203-219)\n\t- MasterChef.emergencyWithdraw(uint256) (contracts/MasterChef.sol#240-248)\n\t- MasterChef.pendingSushi(uint256,address) (contracts/MasterChef.sol#162-173)\n\t- MasterChef.userInfo (contracts/MasterChef.sol#78)\n\t- MasterChef.withdraw(uint256,uint256) (contracts/MasterChef.sol#222-237)\n",
            "impact": "Medium",
            "confidence": "Medium",
            "lines": [
                235
            ],
            "start_col": 9,
            "end_col": 75
        },
        {
            "check": "reentrancy-no-eth",
            "description": "Reentrancy in MasterChef.updatePool(uint256) (contracts/MasterChef.sol#184-200):\n\tExternal calls:\n\t- sushi.mint(devaddr,sushiReward.div(10)) (contracts/MasterChef.sol#196)\n\t- sushi.mint(address(this),sushiReward) (contracts/MasterChef.sol#197)\n\tState variables written after the call(s):\n\t- pool.accSushiPerShare = pool.accSushiPerShare.add(sushiReward.mul(1e12).div(lpSupply)) (contracts/MasterChef.sol#198)\n\tMasterChef.poolInfo (contracts/MasterChef.sol#76) can be used in cross function reentrancies:\n\t- MasterChef.add(uint256,IERC20,bool) (contracts/MasterChef.sol#108-120)\n\t- MasterChef.deposit(uint256,uint256) (contracts/MasterChef.sol#203-219)\n\t- MasterChef.emergencyWithdraw(uint256) (contracts/MasterChef.sol#240-248)\n\t- MasterChef.massUpdatePools() (contracts/MasterChef.sol#176-181)\n\t- MasterChef.migrate(uint256) (contracts/MasterChef.sol#137-146)\n\t- MasterChef.pendingSushi(uint256,address) (contracts/MasterChef.sol#162-173)\n\t- MasterChef.poolInfo (contracts/MasterChef.sol#76)\n\t- MasterChef.poolLength() (contracts/MasterChef.sol#102-104)\n\t- MasterChef.set(uint256,uint256,bool) (contracts/MasterChef.sol#123-129)\n\t- MasterChef.updatePool(uint256) (contracts/MasterChef.sol#184-200)\n\t- MasterChef.withdraw(uint256,uint256) (contracts/MasterChef.sol#222-237)\n\t- pool.lastRewardBlock = block.number (contracts/MasterChef.sol#199)\n\tMasterChef.poolInfo (contracts/MasterChef.sol#76) can be used in cross function reentrancies:\n\t- MasterChef.add(uint256,IERC20,bool) (contracts/MasterChef.sol#108-120)\n\t- MasterChef.deposit(uint256,uint256) (contracts/MasterChef.sol#203-219)\n\t- MasterChef.emergencyWithdraw(uint256) (contracts/MasterChef.sol#240-248)\n\t- MasterChef.massUpdatePools() (contracts/MasterChef.sol#176-181)\n\t- MasterChef.migrate(uint256) (contracts/MasterChef.sol#137-146)\n\t- MasterChef.pendingSushi(uint256,address) (contracts/MasterChef.sol#162-173)\n\t- MasterChef.poolInfo (contracts/MasterChef.sol#76)\n\t- MasterChef.poolLength() (contracts/MasterChef.sol#102-104)\n\t- MasterChef.set(uint256,uint256,bool) (contracts/MasterChef.sol#123-129)\n\t- MasterChef.updatePool(uint256) (contracts/MasterChef.sol#184-200)\n\t- MasterChef.withdraw(uint256,uint256) (contracts/MasterChef.sol#222-237)\n",
            "impact": "Medium",
            "confidence": "Medium",
            "lines": [
                184,
                185,
                186,
                187,
                188,
                189,
                190,
                191,
                192,
                193,
                194,
                195,
                196,
                197,
                198,
                199,
                200
            ],
            "start_col": 5,
            "end_col": 6
        },
        {
            "check": "reentrancy-no-eth",
            "description": "Reentrancy in MasterChef.updatePool(uint256) (contracts/MasterChef.sol#184-200):\n\tExternal calls:\n\t- sushi.mint(devaddr,sushiReward.div(10)) (contracts/MasterChef.sol#196)\n\t- sushi.mint(address(this),sushiReward) (contracts/MasterChef.sol#197)\n\tState variables written after the call(s):\n\t- pool.accSushiPerShare = pool.accSushiPerShare.add(sushiReward.mul(1e12).div(lpSupply)) (contracts/MasterChef.sol#198)\n\tMasterChef.poolInfo (contracts/MasterChef.sol#76) can be used in cross function reentrancies:\n\t- MasterChef.add(uint256,IERC20,bool) (contracts/MasterChef.sol#108-120)\n\t- MasterChef.deposit(uint256,uint256) (contracts/MasterChef.sol#203-219)\n\t- MasterChef.emergencyWithdraw(uint256) (contracts/MasterChef.sol#240-248)\n\t- MasterChef.massUpdatePools() (contracts/MasterChef.sol#176-181)\n\t- MasterChef.migrate(uint256) (contracts/MasterChef.sol#137-146)\n\t- MasterChef.pendingSushi(uint256,address) (contracts/MasterChef.sol#162-173)\n\t- MasterChef.poolInfo (contracts/MasterChef.sol#76)\n\t- MasterChef.poolLength() (contracts/MasterChef.sol#102-104)\n\t- MasterChef.set(uint256,uint256,bool) (contracts/MasterChef.sol#123-129)\n\t- MasterChef.updatePool(uint256) (contracts/MasterChef.sol#184-200)\n\t- MasterChef.withdraw(uint256,uint256) (contracts/MasterChef.sol#222-237)\n\t- pool.lastRewardBlock = block.number (contracts/MasterChef.sol#199)\n\tMasterChef.poolInfo (contracts/MasterChef.sol#76) can be used in cross function reentrancies:\n\t- MasterChef.add(uint256,IERC20,bool) (contracts/MasterChef.sol#108-120)\n\t- MasterChef.deposit(uint256,uint256) (contracts/MasterChef.sol#203-219)\n\t- MasterChef.emergencyWithdraw(uint256) (contracts/MasterChef.sol#240-248)\n\t- MasterChef.massUpdatePools() (contracts/MasterChef.sol#176-181)\n\t- MasterChef.migrate(uint256) (contracts/MasterChef.sol#137-146)\n\t- MasterChef.pendingSushi(uint256,address) (contracts/MasterChef.sol#162-173)\n\t- MasterChef.poolInfo (contracts/MasterChef.sol#76)\n\t- MasterChef.poolLength() (contracts/MasterChef.sol#102-104)\n\t- MasterChef.set(uint256,uint256,bool) (contracts/MasterChef.sol#123-129)\n\t- MasterChef.updatePool(uint256) (contracts/MasterChef.sol#184-200)\n\t- MasterChef.withdraw(uint256,uint256) (contracts/MasterChef.sol#222-237)\n",
            "impact": "Medium",
            "confidence": "Medium",
            "lines": [
                196
            ],
            "start_col": 9,
            "end_col": 49
        },
        {
            "check": "reentrancy-no-eth",
            "description": "Reentrancy in MasterChef.updatePool(uint256) (contracts/MasterChef.sol#184-200):\n\tExternal calls:\n\t- sushi.mint(devaddr,sushiReward.div(10)) (contracts/MasterChef.sol#196)\n\t- sushi.mint(address(this),sushiReward) (contracts/MasterChef.sol#197)\n\tState variables written after the call(s):\n\t- pool.accSushiPerShare = pool.accSushiPerShare.add(sushiReward.mul(1e12).div(lpSupply)) (contracts/MasterChef.sol#198)\n\tMasterChef.poolInfo (contracts/MasterChef.sol#76) can be used in cross function reentrancies:\n\t- MasterChef.add(uint256,IERC20,bool) (contracts/MasterChef.sol#108-120)\n\t- MasterChef.deposit(uint256,uint256) (contracts/MasterChef.sol#203-219)\n\t- MasterChef.emergencyWithdraw(uint256) (contracts/MasterChef.sol#240-248)\n\t- MasterChef.massUpdatePools() (contracts/MasterChef.sol#176-181)\n\t- MasterChef.migrate(uint256) (contracts/MasterChef.sol#137-146)\n\t- MasterChef.pendingSushi(uint256,address) (contracts/MasterChef.sol#162-173)\n\t- MasterChef.poolInfo (contracts/MasterChef.sol#76)\n\t- MasterChef.poolLength() (contracts/MasterChef.sol#102-104)\n\t- MasterChef.set(uint256,uint256,bool) (contracts/MasterChef.sol#123-129)\n\t- MasterChef.updatePool(uint256) (contracts/MasterChef.sol#184-200)\n\t- MasterChef.withdraw(uint256,uint256) (contracts/MasterChef.sol#222-237)\n\t- pool.lastRewardBlock = block.number (contracts/MasterChef.sol#199)\n\tMasterChef.poolInfo (contracts/MasterChef.sol#76) can be used in cross function reentrancies:\n\t- MasterChef.add(uint256,IERC20,bool) (contracts/MasterChef.sol#108-120)\n\t- MasterChef.deposit(uint256,uint256) (contracts/MasterChef.sol#203-219)\n\t- MasterChef.emergencyWithdraw(uint256) (contracts/MasterChef.sol#240-248)\n\t- MasterChef.massUpdatePools() (contracts/MasterChef.sol#176-181)\n\t- MasterChef.migrate(uint256) (contracts/MasterChef.sol#137-146)\n\t- MasterChef.pendingSushi(uint256,address) (contracts/MasterChef.sol#162-173)\n\t- MasterChef.poolInfo (contracts/MasterChef.sol#76)\n\t- MasterChef.poolLength() (contracts/MasterChef.sol#102-104)\n\t- MasterChef.set(uint256,uint256,bool) (contracts/MasterChef.sol#123-129)\n\t- MasterChef.updatePool(uint256) (contracts/MasterChef.sol#184-200)\n\t- MasterChef.withdraw(uint256,uint256) (contracts/MasterChef.sol#222-237)\n",
            "impact": "Medium",
            "confidence": "Medium",
            "lines": [
                197
            ],
            "start_col": 9,
            "end_col": 47
        },
        {
            "check": "reentrancy-no-eth",
            "description": "Reentrancy in MasterChef.updatePool(uint256) (contracts/MasterChef.sol#184-200):\n\tExternal calls:\n\t- sushi.mint(devaddr,sushiReward.div(10)) (contracts/MasterChef.sol#196)\n\t- sushi.mint(address(this),sushiReward) (contracts/MasterChef.sol#197)\n\tState variables written after the call(s):\n\t- pool.accSushiPerShare = pool.accSushiPerShare.add(sushiReward.mul(1e12).div(lpSupply)) (contracts/MasterChef.sol#198)\n\tMasterChef.poolInfo (contracts/MasterChef.sol#76) can be used in cross function reentrancies:\n\t- MasterChef.add(uint256,IERC20,bool) (contracts/MasterChef.sol#108-120)\n\t- MasterChef.deposit(uint256,uint256) (contracts/MasterChef.sol#203-219)\n\t- MasterChef.emergencyWithdraw(uint256) (contracts/MasterChef.sol#240-248)\n\t- MasterChef.massUpdatePools() (contracts/MasterChef.sol#176-181)\n\t- MasterChef.migrate(uint256) (contracts/MasterChef.sol#137-146)\n\t- MasterChef.pendingSushi(uint256,address) (contracts/MasterChef.sol#162-173)\n\t- MasterChef.poolInfo (contracts/MasterChef.sol#76)\n\t- MasterChef.poolLength() (contracts/MasterChef.sol#102-104)\n\t- MasterChef.set(uint256,uint256,bool) (contracts/MasterChef.sol#123-129)\n\t- MasterChef.updatePool(uint256) (contracts/MasterChef.sol#184-200)\n\t- MasterChef.withdraw(uint256,uint256) (contracts/MasterChef.sol#222-237)\n\t- pool.lastRewardBlock = block.number (contracts/MasterChef.sol#199)\n\tMasterChef.poolInfo (contracts/MasterChef.sol#76) can be used in cross function reentrancies:\n\t- MasterChef.add(uint256,IERC20,bool) (contracts/MasterChef.sol#108-120)\n\t- MasterChef.deposit(uint256,uint256) (contracts/MasterChef.sol#203-219)\n\t- MasterChef.emergencyWithdraw(uint256) (contracts/MasterChef.sol#240-248)\n\t- MasterChef.massUpdatePools() (contracts/MasterChef.sol#176-181)\n\t- MasterChef.migrate(uint256) (contracts/MasterChef.sol#137-146)\n\t- MasterChef.pendingSushi(uint256,address) (contracts/MasterChef.sol#162-173)\n\t- MasterChef.poolInfo (contracts/MasterChef.sol#76)\n\t- MasterChef.poolLength() (contracts/MasterChef.sol#102-104)\n\t- MasterChef.set(uint256,uint256,bool) (contracts/MasterChef.sol#123-129)\n\t- MasterChef.updatePool(uint256) (contracts/MasterChef.sol#184-200)\n\t- MasterChef.withdraw(uint256,uint256) (contracts/MasterChef.sol#222-237)\n",
            "impact": "Medium",
            "confidence": "Medium",
            "lines": [
                198
            ],
            "start_col": 9,
            "end_col": 95
        },
        {
            "check": "reentrancy-no-eth",
            "description": "Reentrancy in MasterChef.updatePool(uint256) (contracts/MasterChef.sol#184-200):\n\tExternal calls:\n\t- sushi.mint(devaddr,sushiReward.div(10)) (contracts/MasterChef.sol#196)\n\t- sushi.mint(address(this),sushiReward) (contracts/MasterChef.sol#197)\n\tState variables written after the call(s):\n\t- pool.accSushiPerShare = pool.accSushiPerShare.add(sushiReward.mul(1e12).div(lpSupply)) (contracts/MasterChef.sol#198)\n\tMasterChef.poolInfo (contracts/MasterChef.sol#76) can be used in cross function reentrancies:\n\t- MasterChef.add(uint256,IERC20,bool) (contracts/MasterChef.sol#108-120)\n\t- MasterChef.deposit(uint256,uint256) (contracts/MasterChef.sol#203-219)\n\t- MasterChef.emergencyWithdraw(uint256) (contracts/MasterChef.sol#240-248)\n\t- MasterChef.massUpdatePools() (contracts/MasterChef.sol#176-181)\n\t- MasterChef.migrate(uint256) (contracts/MasterChef.sol#137-146)\n\t- MasterChef.pendingSushi(uint256,address) (contracts/MasterChef.sol#162-173)\n\t- MasterChef.poolInfo (contracts/MasterChef.sol#76)\n\t- MasterChef.poolLength() (contracts/MasterChef.sol#102-104)\n\t- MasterChef.set(uint256,uint256,bool) (contracts/MasterChef.sol#123-129)\n\t- MasterChef.updatePool(uint256) (contracts/MasterChef.sol#184-200)\n\t- MasterChef.withdraw(uint256,uint256) (contracts/MasterChef.sol#222-237)\n\t- pool.lastRewardBlock = block.number (contracts/MasterChef.sol#199)\n\tMasterChef.poolInfo (contracts/MasterChef.sol#76) can be used in cross function reentrancies:\n\t- MasterChef.add(uint256,IERC20,bool) (contracts/MasterChef.sol#108-120)\n\t- MasterChef.deposit(uint256,uint256) (contracts/MasterChef.sol#203-219)\n\t- MasterChef.emergencyWithdraw(uint256) (contracts/MasterChef.sol#240-248)\n\t- MasterChef.massUpdatePools() (contracts/MasterChef.sol#176-181)\n\t- MasterChef.migrate(uint256) (contracts/MasterChef.sol#137-146)\n\t- MasterChef.pendingSushi(uint256,address) (contracts/MasterChef.sol#162-173)\n\t- MasterChef.poolInfo (contracts/MasterChef.sol#76)\n\t- MasterChef.poolLength() (contracts/MasterChef.sol#102-104)\n\t- MasterChef.set(uint256,uint256,bool) (contracts/MasterChef.sol#123-129)\n\t- MasterChef.updatePool(uint256) (contracts/MasterChef.sol#184-200)\n\t- MasterChef.withdraw(uint256,uint256) (contracts/MasterChef.sol#222-237)\n",
            "impact": "Medium",
            "confidence": "Medium",
            "lines": [
                199
            ],
            "start_col": 9,
            "end_col": 44
        },
        {
            "check": "reentrancy-no-eth",
            "description": "Reentrancy in MasterChef.migrate(uint256) (contracts/MasterChef.sol#137-146):\n\tExternal calls:\n\t- lpToken.safeApprove(address(migrator),bal) (contracts/MasterChef.sol#142)\n\t- newLpToken = migrator.migrate(lpToken) (contracts/MasterChef.sol#143)\n\tState variables written after the call(s):\n\t- pool.lpToken = newLpToken (contracts/MasterChef.sol#145)\n\tMasterChef.poolInfo (contracts/MasterChef.sol#76) can be used in cross function reentrancies:\n\t- MasterChef.add(uint256,IERC20,bool) (contracts/MasterChef.sol#108-120)\n\t- MasterChef.deposit(uint256,uint256) (contracts/MasterChef.sol#203-219)\n\t- MasterChef.emergencyWithdraw(uint256) (contracts/MasterChef.sol#240-248)\n\t- MasterChef.massUpdatePools() (contracts/MasterChef.sol#176-181)\n\t- MasterChef.migrate(uint256) (contracts/MasterChef.sol#137-146)\n\t- MasterChef.pendingSushi(uint256,address) (contracts/MasterChef.sol#162-173)\n\t- MasterChef.poolInfo (contracts/MasterChef.sol#76)\n\t- MasterChef.poolLength() (contracts/MasterChef.sol#102-104)\n\t- MasterChef.set(uint256,uint256,bool) (contracts/MasterChef.sol#123-129)\n\t- MasterChef.updatePool(uint256) (contracts/MasterChef.sol#184-200)\n\t- MasterChef.withdraw(uint256,uint256) (contracts/MasterChef.sol#222-237)\n",
            "impact": "Medium",
            "confidence": "Medium",
            "lines": [
                137,
                138,
                139,
                140,
                141,
                142,
                143,
                144,
                145,
                146
            ],
            "start_col": 5,
            "end_col": 6
        },
        {
            "check": "reentrancy-no-eth",
            "description": "Reentrancy in MasterChef.migrate(uint256) (contracts/MasterChef.sol#137-146):\n\tExternal calls:\n\t- lpToken.safeApprove(address(migrator),bal) (contracts/MasterChef.sol#142)\n\t- newLpToken = migrator.migrate(lpToken) (contracts/MasterChef.sol#143)\n\tState variables written after the call(s):\n\t- pool.lpToken = newLpToken (contracts/MasterChef.sol#145)\n\tMasterChef.poolInfo (contracts/MasterChef.sol#76) can be used in cross function reentrancies:\n\t- MasterChef.add(uint256,IERC20,bool) (contracts/MasterChef.sol#108-120)\n\t- MasterChef.deposit(uint256,uint256) (contracts/MasterChef.sol#203-219)\n\t- MasterChef.emergencyWithdraw(uint256) (contracts/MasterChef.sol#240-248)\n\t- MasterChef.massUpdatePools() (contracts/MasterChef.sol#176-181)\n\t- MasterChef.migrate(uint256) (contracts/MasterChef.sol#137-146)\n\t- MasterChef.pendingSushi(uint256,address) (contracts/MasterChef.sol#162-173)\n\t- MasterChef.poolInfo (contracts/MasterChef.sol#76)\n\t- MasterChef.poolLength() (contracts/MasterChef.sol#102-104)\n\t- MasterChef.set(uint256,uint256,bool) (contracts/MasterChef.sol#123-129)\n\t- MasterChef.updatePool(uint256) (contracts/MasterChef.sol#184-200)\n\t- MasterChef.withdraw(uint256,uint256) (contracts/MasterChef.sol#222-237)\n",
            "impact": "Medium",
            "confidence": "Medium",
            "lines": [
                142
            ],
            "start_col": 9,
            "end_col": 52
        },
        {
            "check": "reentrancy-no-eth",
            "description": "Reentrancy in MasterChef.migrate(uint256) (contracts/MasterChef.sol#137-146):\n\tExternal calls:\n\t- lpToken.safeApprove(address(migrator),bal) (contracts/MasterChef.sol#142)\n\t- newLpToken = migrator.migrate(lpToken) (contracts/MasterChef.sol#143)\n\tState variables written after the call(s):\n\t- pool.lpToken = newLpToken (contracts/MasterChef.sol#145)\n\tMasterChef.poolInfo (contracts/MasterChef.sol#76) can be used in cross function reentrancies:\n\t- MasterChef.add(uint256,IERC20,bool) (contracts/MasterChef.sol#108-120)\n\t- MasterChef.deposit(uint256,uint256) (contracts/MasterChef.sol#203-219)\n\t- MasterChef.emergencyWithdraw(uint256) (contracts/MasterChef.sol#240-248)\n\t- MasterChef.massUpdatePools() (contracts/MasterChef.sol#176-181)\n\t- MasterChef.migrate(uint256) (contracts/MasterChef.sol#137-146)\n\t- MasterChef.pendingSushi(uint256,address) (contracts/MasterChef.sol#162-173)\n\t- MasterChef.poolInfo (contracts/MasterChef.sol#76)\n\t- MasterChef.poolLength() (contracts/MasterChef.sol#102-104)\n\t- MasterChef.set(uint256,uint256,bool) (contracts/MasterChef.sol#123-129)\n\t- MasterChef.updatePool(uint256) (contracts/MasterChef.sol#184-200)\n\t- MasterChef.withdraw(uint256,uint256) (contracts/MasterChef.sol#222-237)\n",
            "impact": "Medium",
            "confidence": "Medium",
            "lines": [
                143
            ],
            "start_col": 9,
            "end_col": 54
        },
        {
            "check": "reentrancy-no-eth",
            "description": "Reentrancy in MasterChef.migrate(uint256) (contracts/MasterChef.sol#137-146):\n\tExternal calls:\n\t- lpToken.safeApprove(address(migrator),bal) (contracts/MasterChef.sol#142)\n\t- newLpToken = migrator.migrate(lpToken) (contracts/MasterChef.sol#143)\n\tState variables written after the call(s):\n\t- pool.lpToken = newLpToken (contracts/MasterChef.sol#145)\n\tMasterChef.poolInfo (contracts/MasterChef.sol#76) can be used in cross function reentrancies:\n\t- MasterChef.add(uint256,IERC20,bool) (contracts/MasterChef.sol#108-120)\n\t- MasterChef.deposit(uint256,uint256) (contracts/MasterChef.sol#203-219)\n\t- MasterChef.emergencyWithdraw(uint256) (contracts/MasterChef.sol#240-248)\n\t- MasterChef.massUpdatePools() (contracts/MasterChef.sol#176-181)\n\t- MasterChef.migrate(uint256) (contracts/MasterChef.sol#137-146)\n\t- MasterChef.pendingSushi(uint256,address) (contracts/MasterChef.sol#162-173)\n\t- MasterChef.poolInfo (contracts/MasterChef.sol#76)\n\t- MasterChef.poolLength() (contracts/MasterChef.sol#102-104)\n\t- MasterChef.set(uint256,uint256,bool) (contracts/MasterChef.sol#123-129)\n\t- MasterChef.updatePool(uint256) (contracts/MasterChef.sol#184-200)\n\t- MasterChef.withdraw(uint256,uint256) (contracts/MasterChef.sol#222-237)\n",
            "impact": "Medium",
            "confidence": "Medium",
            "lines": [
                145
            ],
            "start_col": 9,
            "end_col": 34
        },
        {
            "check": "reentrancy-no-eth",
            "description": "Reentrancy in MasterChef.set(uint256,uint256,bool) (contracts/MasterChef.sol#123-129):\n\tExternal calls:\n\t- massUpdatePools() (contracts/MasterChef.sol#125)\n\t\t- sushi.mint(devaddr,sushiReward.div(10)) (contracts/MasterChef.sol#196)\n\t\t- sushi.mint(address(this),sushiReward) (contracts/MasterChef.sol#197)\n\tState variables written after the call(s):\n\t- poolInfo[_pid].allocPoint = _allocPoint (contracts/MasterChef.sol#128)\n\tMasterChef.poolInfo (contracts/MasterChef.sol#76) can be used in cross function reentrancies:\n\t- MasterChef.add(uint256,IERC20,bool) (contracts/MasterChef.sol#108-120)\n\t- MasterChef.deposit(uint256,uint256) (contracts/MasterChef.sol#203-219)\n\t- MasterChef.emergencyWithdraw(uint256) (contracts/MasterChef.sol#240-248)\n\t- MasterChef.massUpdatePools() (contracts/MasterChef.sol#176-181)\n\t- MasterChef.migrate(uint256) (contracts/MasterChef.sol#137-146)\n\t- MasterChef.pendingSushi(uint256,address) (contracts/MasterChef.sol#162-173)\n\t- MasterChef.poolInfo (contracts/MasterChef.sol#76)\n\t- MasterChef.poolLength() (contracts/MasterChef.sol#102-104)\n\t- MasterChef.set(uint256,uint256,bool) (contracts/MasterChef.sol#123-129)\n\t- MasterChef.updatePool(uint256) (contracts/MasterChef.sol#184-200)\n\t- MasterChef.withdraw(uint256,uint256) (contracts/MasterChef.sol#222-237)\n\t- totalAllocPoint = totalAllocPoint.sub(poolInfo[_pid].allocPoint).add(_allocPoint) (contracts/MasterChef.sol#127)\n\tMasterChef.totalAllocPoint (contracts/MasterChef.sol#80) can be used in cross function reentrancies:\n\t- MasterChef.add(uint256,IERC20,bool) (contracts/MasterChef.sol#108-120)\n\t- MasterChef.pendingSushi(uint256,address) (contracts/MasterChef.sol#162-173)\n\t- MasterChef.set(uint256,uint256,bool) (contracts/MasterChef.sol#123-129)\n\t- MasterChef.totalAllocPoint (contracts/MasterChef.sol#80)\n\t- MasterChef.updatePool(uint256) (contracts/MasterChef.sol#184-200)\n",
            "impact": "Medium",
            "confidence": "Medium",
            "lines": [
                123,
                124,
                125,
                126,
                127,
                128,
                129
            ],
            "start_col": 5,
            "end_col": 6
        },
        {
            "check": "reentrancy-no-eth",
            "description": "Reentrancy in MasterChef.set(uint256,uint256,bool) (contracts/MasterChef.sol#123-129):\n\tExternal calls:\n\t- massUpdatePools() (contracts/MasterChef.sol#125)\n\t\t- sushi.mint(devaddr,sushiReward.div(10)) (contracts/MasterChef.sol#196)\n\t\t- sushi.mint(address(this),sushiReward) (contracts/MasterChef.sol#197)\n\tState variables written after the call(s):\n\t- poolInfo[_pid].allocPoint = _allocPoint (contracts/MasterChef.sol#128)\n\tMasterChef.poolInfo (contracts/MasterChef.sol#76) can be used in cross function reentrancies:\n\t- MasterChef.add(uint256,IERC20,bool) (contracts/MasterChef.sol#108-120)\n\t- MasterChef.deposit(uint256,uint256) (contracts/MasterChef.sol#203-219)\n\t- MasterChef.emergencyWithdraw(uint256) (contracts/MasterChef.sol#240-248)\n\t- MasterChef.massUpdatePools() (contracts/MasterChef.sol#176-181)\n\t- MasterChef.migrate(uint256) (contracts/MasterChef.sol#137-146)\n\t- MasterChef.pendingSushi(uint256,address) (contracts/MasterChef.sol#162-173)\n\t- MasterChef.poolInfo (contracts/MasterChef.sol#76)\n\t- MasterChef.poolLength() (contracts/MasterChef.sol#102-104)\n\t- MasterChef.set(uint256,uint256,bool) (contracts/MasterChef.sol#123-129)\n\t- MasterChef.updatePool(uint256) (contracts/MasterChef.sol#184-200)\n\t- MasterChef.withdraw(uint256,uint256) (contracts/MasterChef.sol#222-237)\n\t- totalAllocPoint = totalAllocPoint.sub(poolInfo[_pid].allocPoint).add(_allocPoint) (contracts/MasterChef.sol#127)\n\tMasterChef.totalAllocPoint (contracts/MasterChef.sol#80) can be used in cross function reentrancies:\n\t- MasterChef.add(uint256,IERC20,bool) (contracts/MasterChef.sol#108-120)\n\t- MasterChef.pendingSushi(uint256,address) (contracts/MasterChef.sol#162-173)\n\t- MasterChef.set(uint256,uint256,bool) (contracts/MasterChef.sol#123-129)\n\t- MasterChef.totalAllocPoint (contracts/MasterChef.sol#80)\n\t- MasterChef.updatePool(uint256) (contracts/MasterChef.sol#184-200)\n",
            "impact": "Medium",
            "confidence": "Medium",
            "lines": [
                125
            ],
            "start_col": 13,
            "end_col": 30
        },
        {
            "check": "reentrancy-no-eth",
            "description": "Reentrancy in MasterChef.set(uint256,uint256,bool) (contracts/MasterChef.sol#123-129):\n\tExternal calls:\n\t- massUpdatePools() (contracts/MasterChef.sol#125)\n\t\t- sushi.mint(devaddr,sushiReward.div(10)) (contracts/MasterChef.sol#196)\n\t\t- sushi.mint(address(this),sushiReward) (contracts/MasterChef.sol#197)\n\tState variables written after the call(s):\n\t- poolInfo[_pid].allocPoint = _allocPoint (contracts/MasterChef.sol#128)\n\tMasterChef.poolInfo (contracts/MasterChef.sol#76) can be used in cross function reentrancies:\n\t- MasterChef.add(uint256,IERC20,bool) (contracts/MasterChef.sol#108-120)\n\t- MasterChef.deposit(uint256,uint256) (contracts/MasterChef.sol#203-219)\n\t- MasterChef.emergencyWithdraw(uint256) (contracts/MasterChef.sol#240-248)\n\t- MasterChef.massUpdatePools() (contracts/MasterChef.sol#176-181)\n\t- MasterChef.migrate(uint256) (contracts/MasterChef.sol#137-146)\n\t- MasterChef.pendingSushi(uint256,address) (contracts/MasterChef.sol#162-173)\n\t- MasterChef.poolInfo (contracts/MasterChef.sol#76)\n\t- MasterChef.poolLength() (contracts/MasterChef.sol#102-104)\n\t- MasterChef.set(uint256,uint256,bool) (contracts/MasterChef.sol#123-129)\n\t- MasterChef.updatePool(uint256) (contracts/MasterChef.sol#184-200)\n\t- MasterChef.withdraw(uint256,uint256) (contracts/MasterChef.sol#222-237)\n\t- totalAllocPoint = totalAllocPoint.sub(poolInfo[_pid].allocPoint).add(_allocPoint) (contracts/MasterChef.sol#127)\n\tMasterChef.totalAllocPoint (contracts/MasterChef.sol#80) can be used in cross function reentrancies:\n\t- MasterChef.add(uint256,IERC20,bool) (contracts/MasterChef.sol#108-120)\n\t- MasterChef.pendingSushi(uint256,address) (contracts/MasterChef.sol#162-173)\n\t- MasterChef.set(uint256,uint256,bool) (contracts/MasterChef.sol#123-129)\n\t- MasterChef.totalAllocPoint (contracts/MasterChef.sol#80)\n\t- MasterChef.updatePool(uint256) (contracts/MasterChef.sol#184-200)\n",
            "impact": "Medium",
            "confidence": "Medium",
            "lines": [
                196
            ],
            "start_col": 9,
            "end_col": 49
        },
        {
            "check": "reentrancy-no-eth",
            "description": "Reentrancy in MasterChef.set(uint256,uint256,bool) (contracts/MasterChef.sol#123-129):\n\tExternal calls:\n\t- massUpdatePools() (contracts/MasterChef.sol#125)\n\t\t- sushi.mint(devaddr,sushiReward.div(10)) (contracts/MasterChef.sol#196)\n\t\t- sushi.mint(address(this),sushiReward) (contracts/MasterChef.sol#197)\n\tState variables written after the call(s):\n\t- poolInfo[_pid].allocPoint = _allocPoint (contracts/MasterChef.sol#128)\n\tMasterChef.poolInfo (contracts/MasterChef.sol#76) can be used in cross function reentrancies:\n\t- MasterChef.add(uint256,IERC20,bool) (contracts/MasterChef.sol#108-120)\n\t- MasterChef.deposit(uint256,uint256) (contracts/MasterChef.sol#203-219)\n\t- MasterChef.emergencyWithdraw(uint256) (contracts/MasterChef.sol#240-248)\n\t- MasterChef.massUpdatePools() (contracts/MasterChef.sol#176-181)\n\t- MasterChef.migrate(uint256) (contracts/MasterChef.sol#137-146)\n\t- MasterChef.pendingSushi(uint256,address) (contracts/MasterChef.sol#162-173)\n\t- MasterChef.poolInfo (contracts/MasterChef.sol#76)\n\t- MasterChef.poolLength() (contracts/MasterChef.sol#102-104)\n\t- MasterChef.set(uint256,uint256,bool) (contracts/MasterChef.sol#123-129)\n\t- MasterChef.updatePool(uint256) (contracts/MasterChef.sol#184-200)\n\t- MasterChef.withdraw(uint256,uint256) (contracts/MasterChef.sol#222-237)\n\t- totalAllocPoint = totalAllocPoint.sub(poolInfo[_pid].allocPoint).add(_allocPoint) (contracts/MasterChef.sol#127)\n\tMasterChef.totalAllocPoint (contracts/MasterChef.sol#80) can be used in cross function reentrancies:\n\t- MasterChef.add(uint256,IERC20,bool) (contracts/MasterChef.sol#108-120)\n\t- MasterChef.pendingSushi(uint256,address) (contracts/MasterChef.sol#162-173)\n\t- MasterChef.set(uint256,uint256,bool) (contracts/MasterChef.sol#123-129)\n\t- MasterChef.totalAllocPoint (contracts/MasterChef.sol#80)\n\t- MasterChef.updatePool(uint256) (contracts/MasterChef.sol#184-200)\n",
            "impact": "Medium",
            "confidence": "Medium",
            "lines": [
                197
            ],
            "start_col": 9,
            "end_col": 47
        },
        {
            "check": "reentrancy-no-eth",
            "description": "Reentrancy in MasterChef.set(uint256,uint256,bool) (contracts/MasterChef.sol#123-129):\n\tExternal calls:\n\t- massUpdatePools() (contracts/MasterChef.sol#125)\n\t\t- sushi.mint(devaddr,sushiReward.div(10)) (contracts/MasterChef.sol#196)\n\t\t- sushi.mint(address(this),sushiReward) (contracts/MasterChef.sol#197)\n\tState variables written after the call(s):\n\t- poolInfo[_pid].allocPoint = _allocPoint (contracts/MasterChef.sol#128)\n\tMasterChef.poolInfo (contracts/MasterChef.sol#76) can be used in cross function reentrancies:\n\t- MasterChef.add(uint256,IERC20,bool) (contracts/MasterChef.sol#108-120)\n\t- MasterChef.deposit(uint256,uint256) (contracts/MasterChef.sol#203-219)\n\t- MasterChef.emergencyWithdraw(uint256) (contracts/MasterChef.sol#240-248)\n\t- MasterChef.massUpdatePools() (contracts/MasterChef.sol#176-181)\n\t- MasterChef.migrate(uint256) (contracts/MasterChef.sol#137-146)\n\t- MasterChef.pendingSushi(uint256,address) (contracts/MasterChef.sol#162-173)\n\t- MasterChef.poolInfo (contracts/MasterChef.sol#76)\n\t- MasterChef.poolLength() (contracts/MasterChef.sol#102-104)\n\t- MasterChef.set(uint256,uint256,bool) (contracts/MasterChef.sol#123-129)\n\t- MasterChef.updatePool(uint256) (contracts/MasterChef.sol#184-200)\n\t- MasterChef.withdraw(uint256,uint256) (contracts/MasterChef.sol#222-237)\n\t- totalAllocPoint = totalAllocPoint.sub(poolInfo[_pid].allocPoint).add(_allocPoint) (contracts/MasterChef.sol#127)\n\tMasterChef.totalAllocPoint (contracts/MasterChef.sol#80) can be used in cross function reentrancies:\n\t- MasterChef.add(uint256,IERC20,bool) (contracts/MasterChef.sol#108-120)\n\t- MasterChef.pendingSushi(uint256,address) (contracts/MasterChef.sol#162-173)\n\t- MasterChef.set(uint256,uint256,bool) (contracts/MasterChef.sol#123-129)\n\t- MasterChef.totalAllocPoint (contracts/MasterChef.sol#80)\n\t- MasterChef.updatePool(uint256) (contracts/MasterChef.sol#184-200)\n",
            "impact": "Medium",
            "confidence": "Medium",
            "lines": [
                128
            ],
            "start_col": 9,
            "end_col": 48
        },
        {
            "check": "reentrancy-no-eth",
            "description": "Reentrancy in MasterChef.set(uint256,uint256,bool) (contracts/MasterChef.sol#123-129):\n\tExternal calls:\n\t- massUpdatePools() (contracts/MasterChef.sol#125)\n\t\t- sushi.mint(devaddr,sushiReward.div(10)) (contracts/MasterChef.sol#196)\n\t\t- sushi.mint(address(this),sushiReward) (contracts/MasterChef.sol#197)\n\tState variables written after the call(s):\n\t- poolInfo[_pid].allocPoint = _allocPoint (contracts/MasterChef.sol#128)\n\tMasterChef.poolInfo (contracts/MasterChef.sol#76) can be used in cross function reentrancies:\n\t- MasterChef.add(uint256,IERC20,bool) (contracts/MasterChef.sol#108-120)\n\t- MasterChef.deposit(uint256,uint256) (contracts/MasterChef.sol#203-219)\n\t- MasterChef.emergencyWithdraw(uint256) (contracts/MasterChef.sol#240-248)\n\t- MasterChef.massUpdatePools() (contracts/MasterChef.sol#176-181)\n\t- MasterChef.migrate(uint256) (contracts/MasterChef.sol#137-146)\n\t- MasterChef.pendingSushi(uint256,address) (contracts/MasterChef.sol#162-173)\n\t- MasterChef.poolInfo (contracts/MasterChef.sol#76)\n\t- MasterChef.poolLength() (contracts/MasterChef.sol#102-104)\n\t- MasterChef.set(uint256,uint256,bool) (contracts/MasterChef.sol#123-129)\n\t- MasterChef.updatePool(uint256) (contracts/MasterChef.sol#184-200)\n\t- MasterChef.withdraw(uint256,uint256) (contracts/MasterChef.sol#222-237)\n\t- totalAllocPoint = totalAllocPoint.sub(poolInfo[_pid].allocPoint).add(_allocPoint) (contracts/MasterChef.sol#127)\n\tMasterChef.totalAllocPoint (contracts/MasterChef.sol#80) can be used in cross function reentrancies:\n\t- MasterChef.add(uint256,IERC20,bool) (contracts/MasterChef.sol#108-120)\n\t- MasterChef.pendingSushi(uint256,address) (contracts/MasterChef.sol#162-173)\n\t- MasterChef.set(uint256,uint256,bool) (contracts/MasterChef.sol#123-129)\n\t- MasterChef.totalAllocPoint (contracts/MasterChef.sol#80)\n\t- MasterChef.updatePool(uint256) (contracts/MasterChef.sol#184-200)\n",
            "impact": "Medium",
            "confidence": "Medium",
            "lines": [
                127
            ],
            "start_col": 9,
            "end_col": 90
        },
        {
            "check": "reentrancy-no-eth",
            "description": "Reentrancy in MasterChef.withdraw(uint256,uint256) (contracts/MasterChef.sol#222-237):\n\tExternal calls:\n\t- updatePool(_pid) (contracts/MasterChef.sol#226)\n\t\t- sushi.mint(devaddr,sushiReward.div(10)) (contracts/MasterChef.sol#196)\n\t\t- sushi.mint(address(this),sushiReward) (contracts/MasterChef.sol#197)\n\t- safeSushiTransfer(msg.sender,pending) (contracts/MasterChef.sol#229)\n\t\t- sushi.transfer(_to,sushiBal) (contracts/MasterChef.sol#254)\n\t\t- sushi.transfer(_to,_amount) (contracts/MasterChef.sol#256)\n\tState variables written after the call(s):\n\t- user.amount = user.amount.sub(_amount) (contracts/MasterChef.sol#232)\n\tMasterChef.userInfo (contracts/MasterChef.sol#78) can be used in cross function reentrancies:\n\t- MasterChef.deposit(uint256,uint256) (contracts/MasterChef.sol#203-219)\n\t- MasterChef.emergencyWithdraw(uint256) (contracts/MasterChef.sol#240-248)\n\t- MasterChef.pendingSushi(uint256,address) (contracts/MasterChef.sol#162-173)\n\t- MasterChef.userInfo (contracts/MasterChef.sol#78)\n\t- MasterChef.withdraw(uint256,uint256) (contracts/MasterChef.sol#222-237)\n",
            "impact": "Medium",
            "confidence": "Medium",
            "lines": [
                222,
                223,
                224,
                225,
                226,
                227,
                228,
                229,
                230,
                231,
                232,
                233,
                234,
                235,
                236,
                237
            ],
            "start_col": 5,
            "end_col": 6
        },
        {
            "check": "reentrancy-no-eth",
            "description": "Reentrancy in MasterChef.withdraw(uint256,uint256) (contracts/MasterChef.sol#222-237):\n\tExternal calls:\n\t- updatePool(_pid) (contracts/MasterChef.sol#226)\n\t\t- sushi.mint(devaddr,sushiReward.div(10)) (contracts/MasterChef.sol#196)\n\t\t- sushi.mint(address(this),sushiReward) (contracts/MasterChef.sol#197)\n\t- safeSushiTransfer(msg.sender,pending) (contracts/MasterChef.sol#229)\n\t\t- sushi.transfer(_to,sushiBal) (contracts/MasterChef.sol#254)\n\t\t- sushi.transfer(_to,_amount) (contracts/MasterChef.sol#256)\n\tState variables written after the call(s):\n\t- user.amount = user.amount.sub(_amount) (contracts/MasterChef.sol#232)\n\tMasterChef.userInfo (contracts/MasterChef.sol#78) can be used in cross function reentrancies:\n\t- MasterChef.deposit(uint256,uint256) (contracts/MasterChef.sol#203-219)\n\t- MasterChef.emergencyWithdraw(uint256) (contracts/MasterChef.sol#240-248)\n\t- MasterChef.pendingSushi(uint256,address) (contracts/MasterChef.sol#162-173)\n\t- MasterChef.userInfo (contracts/MasterChef.sol#78)\n\t- MasterChef.withdraw(uint256,uint256) (contracts/MasterChef.sol#222-237)\n",
            "impact": "Medium",
            "confidence": "Medium",
            "lines": [
                226
            ],
            "start_col": 9,
            "end_col": 25
        },
        {
            "check": "reentrancy-no-eth",
            "description": "Reentrancy in MasterChef.withdraw(uint256,uint256) (contracts/MasterChef.sol#222-237):\n\tExternal calls:\n\t- updatePool(_pid) (contracts/MasterChef.sol#226)\n\t\t- sushi.mint(devaddr,sushiReward.div(10)) (contracts/MasterChef.sol#196)\n\t\t- sushi.mint(address(this),sushiReward) (contracts/MasterChef.sol#197)\n\t- safeSushiTransfer(msg.sender,pending) (contracts/MasterChef.sol#229)\n\t\t- sushi.transfer(_to,sushiBal) (contracts/MasterChef.sol#254)\n\t\t- sushi.transfer(_to,_amount) (contracts/MasterChef.sol#256)\n\tState variables written after the call(s):\n\t- user.amount = user.amount.sub(_amount) (contracts/MasterChef.sol#232)\n\tMasterChef.userInfo (contracts/MasterChef.sol#78) can be used in cross function reentrancies:\n\t- MasterChef.deposit(uint256,uint256) (contracts/MasterChef.sol#203-219)\n\t- MasterChef.emergencyWithdraw(uint256) (contracts/MasterChef.sol#240-248)\n\t- MasterChef.pendingSushi(uint256,address) (contracts/MasterChef.sol#162-173)\n\t- MasterChef.userInfo (contracts/MasterChef.sol#78)\n\t- MasterChef.withdraw(uint256,uint256) (contracts/MasterChef.sol#222-237)\n",
            "impact": "Medium",
            "confidence": "Medium",
            "lines": [
                196
            ],
            "start_col": 9,
            "end_col": 49
        },
        {
            "check": "reentrancy-no-eth",
            "description": "Reentrancy in MasterChef.withdraw(uint256,uint256) (contracts/MasterChef.sol#222-237):\n\tExternal calls:\n\t- updatePool(_pid) (contracts/MasterChef.sol#226)\n\t\t- sushi.mint(devaddr,sushiReward.div(10)) (contracts/MasterChef.sol#196)\n\t\t- sushi.mint(address(this),sushiReward) (contracts/MasterChef.sol#197)\n\t- safeSushiTransfer(msg.sender,pending) (contracts/MasterChef.sol#229)\n\t\t- sushi.transfer(_to,sushiBal) (contracts/MasterChef.sol#254)\n\t\t- sushi.transfer(_to,_amount) (contracts/MasterChef.sol#256)\n\tState variables written after the call(s):\n\t- user.amount = user.amount.sub(_amount) (contracts/MasterChef.sol#232)\n\tMasterChef.userInfo (contracts/MasterChef.sol#78) can be used in cross function reentrancies:\n\t- MasterChef.deposit(uint256,uint256) (contracts/MasterChef.sol#203-219)\n\t- MasterChef.emergencyWithdraw(uint256) (contracts/MasterChef.sol#240-248)\n\t- MasterChef.pendingSushi(uint256,address) (contracts/MasterChef.sol#162-173)\n\t- MasterChef.userInfo (contracts/MasterChef.sol#78)\n\t- MasterChef.withdraw(uint256,uint256) (contracts/MasterChef.sol#222-237)\n",
            "impact": "Medium",
            "confidence": "Medium",
            "lines": [
                197
            ],
            "start_col": 9,
            "end_col": 47
        },
        {
            "check": "reentrancy-no-eth",
            "description": "Reentrancy in MasterChef.withdraw(uint256,uint256) (contracts/MasterChef.sol#222-237):\n\tExternal calls:\n\t- updatePool(_pid) (contracts/MasterChef.sol#226)\n\t\t- sushi.mint(devaddr,sushiReward.div(10)) (contracts/MasterChef.sol#196)\n\t\t- sushi.mint(address(this),sushiReward) (contracts/MasterChef.sol#197)\n\t- safeSushiTransfer(msg.sender,pending) (contracts/MasterChef.sol#229)\n\t\t- sushi.transfer(_to,sushiBal) (contracts/MasterChef.sol#254)\n\t\t- sushi.transfer(_to,_amount) (contracts/MasterChef.sol#256)\n\tState variables written after the call(s):\n\t- user.amount = user.amount.sub(_amount) (contracts/MasterChef.sol#232)\n\tMasterChef.userInfo (contracts/MasterChef.sol#78) can be used in cross function reentrancies:\n\t- MasterChef.deposit(uint256,uint256) (contracts/MasterChef.sol#203-219)\n\t- MasterChef.emergencyWithdraw(uint256) (contracts/MasterChef.sol#240-248)\n\t- MasterChef.pendingSushi(uint256,address) (contracts/MasterChef.sol#162-173)\n\t- MasterChef.userInfo (contracts/MasterChef.sol#78)\n\t- MasterChef.withdraw(uint256,uint256) (contracts/MasterChef.sol#222-237)\n",
            "impact": "Medium",
            "confidence": "Medium",
            "lines": [
                229
            ],
            "start_col": 13,
            "end_col": 51
        },
        {
            "check": "reentrancy-no-eth",
            "description": "Reentrancy in MasterChef.withdraw(uint256,uint256) (contracts/MasterChef.sol#222-237):\n\tExternal calls:\n\t- updatePool(_pid) (contracts/MasterChef.sol#226)\n\t\t- sushi.mint(devaddr,sushiReward.div(10)) (contracts/MasterChef.sol#196)\n\t\t- sushi.mint(address(this),sushiReward) (contracts/MasterChef.sol#197)\n\t- safeSushiTransfer(msg.sender,pending) (contracts/MasterChef.sol#229)\n\t\t- sushi.transfer(_to,sushiBal) (contracts/MasterChef.sol#254)\n\t\t- sushi.transfer(_to,_amount) (contracts/MasterChef.sol#256)\n\tState variables written after the call(s):\n\t- user.amount = user.amount.sub(_amount) (contracts/MasterChef.sol#232)\n\tMasterChef.userInfo (contracts/MasterChef.sol#78) can be used in cross function reentrancies:\n\t- MasterChef.deposit(uint256,uint256) (contracts/MasterChef.sol#203-219)\n\t- MasterChef.emergencyWithdraw(uint256) (contracts/MasterChef.sol#240-248)\n\t- MasterChef.pendingSushi(uint256,address) (contracts/MasterChef.sol#162-173)\n\t- MasterChef.userInfo (contracts/MasterChef.sol#78)\n\t- MasterChef.withdraw(uint256,uint256) (contracts/MasterChef.sol#222-237)\n",
            "impact": "Medium",
            "confidence": "Medium",
            "lines": [
                254
            ],
            "start_col": 13,
            "end_col": 42
        },
        {
            "check": "reentrancy-no-eth",
            "description": "Reentrancy in MasterChef.withdraw(uint256,uint256) (contracts/MasterChef.sol#222-237):\n\tExternal calls:\n\t- updatePool(_pid) (contracts/MasterChef.sol#226)\n\t\t- sushi.mint(devaddr,sushiReward.div(10)) (contracts/MasterChef.sol#196)\n\t\t- sushi.mint(address(this),sushiReward) (contracts/MasterChef.sol#197)\n\t- safeSushiTransfer(msg.sender,pending) (contracts/MasterChef.sol#229)\n\t\t- sushi.transfer(_to,sushiBal) (contracts/MasterChef.sol#254)\n\t\t- sushi.transfer(_to,_amount) (contracts/MasterChef.sol#256)\n\tState variables written after the call(s):\n\t- user.amount = user.amount.sub(_amount) (contracts/MasterChef.sol#232)\n\tMasterChef.userInfo (contracts/MasterChef.sol#78) can be used in cross function reentrancies:\n\t- MasterChef.deposit(uint256,uint256) (contracts/MasterChef.sol#203-219)\n\t- MasterChef.emergencyWithdraw(uint256) (contracts/MasterChef.sol#240-248)\n\t- MasterChef.pendingSushi(uint256,address) (contracts/MasterChef.sol#162-173)\n\t- MasterChef.userInfo (contracts/MasterChef.sol#78)\n\t- MasterChef.withdraw(uint256,uint256) (contracts/MasterChef.sol#222-237)\n",
            "impact": "Medium",
            "confidence": "Medium",
            "lines": [
                256
            ],
            "start_col": 13,
            "end_col": 41
        },
        {
            "check": "reentrancy-no-eth",
            "description": "Reentrancy in MasterChef.withdraw(uint256,uint256) (contracts/MasterChef.sol#222-237):\n\tExternal calls:\n\t- updatePool(_pid) (contracts/MasterChef.sol#226)\n\t\t- sushi.mint(devaddr,sushiReward.div(10)) (contracts/MasterChef.sol#196)\n\t\t- sushi.mint(address(this),sushiReward) (contracts/MasterChef.sol#197)\n\t- safeSushiTransfer(msg.sender,pending) (contracts/MasterChef.sol#229)\n\t\t- sushi.transfer(_to,sushiBal) (contracts/MasterChef.sol#254)\n\t\t- sushi.transfer(_to,_amount) (contracts/MasterChef.sol#256)\n\tState variables written after the call(s):\n\t- user.amount = user.amount.sub(_amount) (contracts/MasterChef.sol#232)\n\tMasterChef.userInfo (contracts/MasterChef.sol#78) can be used in cross function reentrancies:\n\t- MasterChef.deposit(uint256,uint256) (contracts/MasterChef.sol#203-219)\n\t- MasterChef.emergencyWithdraw(uint256) (contracts/MasterChef.sol#240-248)\n\t- MasterChef.pendingSushi(uint256,address) (contracts/MasterChef.sol#162-173)\n\t- MasterChef.userInfo (contracts/MasterChef.sol#78)\n\t- MasterChef.withdraw(uint256,uint256) (contracts/MasterChef.sol#222-237)\n",
            "impact": "Medium",
            "confidence": "Medium",
            "lines": [
                232
            ],
            "start_col": 13,
            "end_col": 51
        },
        {
            "check": "events-maths",
            "description": "MasterChef.set(uint256,uint256,bool) (contracts/MasterChef.sol#123-129) should emit an event for: \n\t- totalAllocPoint = totalAllocPoint.sub(poolInfo[_pid].allocPoint).add(_allocPoint) (contracts/MasterChef.sol#127) \n",
            "impact": "Low",
            "confidence": "Medium",
            "lines": [
                123,
                124,
                125,
                126,
                127,
                128,
                129
            ],
            "start_col": 5,
            "end_col": 6
        },
        {
            "check": "events-maths",
            "description": "MasterChef.set(uint256,uint256,bool) (contracts/MasterChef.sol#123-129) should emit an event for: \n\t- totalAllocPoint = totalAllocPoint.sub(poolInfo[_pid].allocPoint).add(_allocPoint) (contracts/MasterChef.sol#127) \n",
            "impact": "Low",
            "confidence": "Medium",
            "lines": [
                127
            ],
            "start_col": 9,
            "end_col": 90
        },
        {
            "check": "events-maths",
            "description": "MasterChef.add(uint256,IERC20,bool) (contracts/MasterChef.sol#108-120) should emit an event for: \n\t- totalAllocPoint = totalAllocPoint.add(_allocPoint) (contracts/MasterChef.sol#113) \n",
            "impact": "Low",
            "confidence": "Medium",
            "lines": [
                108,
                109,
                110,
                111,
                112,
                113,
                114,
                115,
                116,
                117,
                118,
                119,
                120
            ],
            "start_col": 5,
            "end_col": 6
        },
        {
            "check": "events-maths",
            "description": "MasterChef.add(uint256,IERC20,bool) (contracts/MasterChef.sol#108-120) should emit an event for: \n\t- totalAllocPoint = totalAllocPoint.add(_allocPoint) (contracts/MasterChef.sol#113) \n",
            "impact": "Low",
            "confidence": "Medium",
            "lines": [
                113
            ],
            "start_col": 9,
            "end_col": 59
        },
        {
            "check": "missing-zero-check",
            "description": "MasterChef.constructor(SushiToken,address,uint256,uint256,uint256)._devaddr (contracts/MasterChef.sol#90) lacks a zero-check on :\n\t\t- devaddr = _devaddr (contracts/MasterChef.sol#96)\n",
            "impact": "Low",
            "confidence": "Medium",
            "lines": [
                90
            ],
            "start_col": 9,
            "end_col": 25
        },
        {
            "check": "missing-zero-check",
            "description": "MasterChef.constructor(SushiToken,address,uint256,uint256,uint256)._devaddr (contracts/MasterChef.sol#90) lacks a zero-check on :\n\t\t- devaddr = _devaddr (contracts/MasterChef.sol#96)\n",
            "impact": "Low",
            "confidence": "Medium",
            "lines": [
                96
            ],
            "start_col": 9,
            "end_col": 27
        },
        {
            "check": "missing-zero-check",
            "description": "MasterChef.dev(address)._devaddr (contracts/MasterChef.sol#261) lacks a zero-check on :\n\t\t- devaddr = _devaddr (contracts/MasterChef.sol#263)\n",
            "impact": "Low",
            "confidence": "Medium",
            "lines": [
                261
            ],
            "start_col": 18,
            "end_col": 34
        },
        {
            "check": "missing-zero-check",
            "description": "MasterChef.dev(address)._devaddr (contracts/MasterChef.sol#261) lacks a zero-check on :\n\t\t- devaddr = _devaddr (contracts/MasterChef.sol#263)\n",
            "impact": "Low",
            "confidence": "Medium",
            "lines": [
                263
            ],
            "start_col": 9,
            "end_col": 27
        },
        {
            "check": "calls-loop",
            "description": "MasterChef.updatePool(uint256) (contracts/MasterChef.sol#184-200) has external calls inside a loop: sushi.mint(address(this),sushiReward) (contracts/MasterChef.sol#197)\n",
            "impact": "Low",
            "confidence": "Medium",
            "lines": [
                184,
                185,
                186,
                187,
                188,
                189,
                190,
                191,
                192,
                193,
                194,
                195,
                196,
                197,
                198,
                199,
                200
            ],
            "start_col": 5,
            "end_col": 6
        },
        {
            "check": "calls-loop",
            "description": "MasterChef.updatePool(uint256) (contracts/MasterChef.sol#184-200) has external calls inside a loop: sushi.mint(address(this),sushiReward) (contracts/MasterChef.sol#197)\n",
            "impact": "Low",
            "confidence": "Medium",
            "lines": [
                197
            ],
            "start_col": 9,
            "end_col": 47
        },
        {
            "check": "calls-loop",
            "description": "MasterChef.updatePool(uint256) (contracts/MasterChef.sol#184-200) has external calls inside a loop: lpSupply = pool.lpToken.balanceOf(address(this)) (contracts/MasterChef.sol#189)\n",
            "impact": "Low",
            "confidence": "Medium",
            "lines": [
                184,
                185,
                186,
                187,
                188,
                189,
                190,
                191,
                192,
                193,
                194,
                195,
                196,
                197,
                198,
                199,
                200
            ],
            "start_col": 5,
            "end_col": 6
        },
        {
            "check": "calls-loop",
            "description": "MasterChef.updatePool(uint256) (contracts/MasterChef.sol#184-200) has external calls inside a loop: lpSupply = pool.lpToken.balanceOf(address(this)) (contracts/MasterChef.sol#189)\n",
            "impact": "Low",
            "confidence": "Medium",
            "lines": [
                189
            ],
            "start_col": 9,
            "end_col": 65
        },
        {
            "check": "calls-loop",
            "description": "MasterChef.updatePool(uint256) (contracts/MasterChef.sol#184-200) has external calls inside a loop: sushi.mint(devaddr,sushiReward.div(10)) (contracts/MasterChef.sol#196)\n",
            "impact": "Low",
            "confidence": "Medium",
            "lines": [
                184,
                185,
                186,
                187,
                188,
                189,
                190,
                191,
                192,
                193,
                194,
                195,
                196,
                197,
                198,
                199,
                200
            ],
            "start_col": 5,
            "end_col": 6
        },
        {
            "check": "calls-loop",
            "description": "MasterChef.updatePool(uint256) (contracts/MasterChef.sol#184-200) has external calls inside a loop: sushi.mint(devaddr,sushiReward.div(10)) (contracts/MasterChef.sol#196)\n",
            "impact": "Low",
            "confidence": "Medium",
            "lines": [
                196
            ],
            "start_col": 9,
            "end_col": 49
        },
        {
            "check": "reentrancy-events",
            "description": "Reentrancy in MasterChef.deposit(uint256,uint256) (contracts/MasterChef.sol#203-219):\n\tExternal calls:\n\t- updatePool(_pid) (contracts/MasterChef.sol#206)\n\t\t- sushi.mint(devaddr,sushiReward.div(10)) (contracts/MasterChef.sol#196)\n\t\t- sushi.mint(address(this),sushiReward) (contracts/MasterChef.sol#197)\n\t- safeSushiTransfer(msg.sender,pending) (contracts/MasterChef.sol#210)\n\t\t- sushi.transfer(_to,sushiBal) (contracts/MasterChef.sol#254)\n\t\t- sushi.transfer(_to,_amount) (contracts/MasterChef.sol#256)\n\t- pool.lpToken.safeTransferFrom(address(msg.sender),address(this),_amount) (contracts/MasterChef.sol#214)\n\tEvent emitted after the call(s):\n\t- Deposit(msg.sender,_pid,_amount) (contracts/MasterChef.sol#218)\n",
            "impact": "Low",
            "confidence": "Medium",
            "lines": [
                203,
                204,
                205,
                206,
                207,
                208,
                209,
                210,
                211,
                212,
                213,
                214,
                215,
                216,
                217,
                218,
                219
            ],
            "start_col": 5,
            "end_col": 6
        },
        {
            "check": "reentrancy-events",
            "description": "Reentrancy in MasterChef.deposit(uint256,uint256) (contracts/MasterChef.sol#203-219):\n\tExternal calls:\n\t- updatePool(_pid) (contracts/MasterChef.sol#206)\n\t\t- sushi.mint(devaddr,sushiReward.div(10)) (contracts/MasterChef.sol#196)\n\t\t- sushi.mint(address(this),sushiReward) (contracts/MasterChef.sol#197)\n\t- safeSushiTransfer(msg.sender,pending) (contracts/MasterChef.sol#210)\n\t\t- sushi.transfer(_to,sushiBal) (contracts/MasterChef.sol#254)\n\t\t- sushi.transfer(_to,_amount) (contracts/MasterChef.sol#256)\n\t- pool.lpToken.safeTransferFrom(address(msg.sender),address(this),_amount) (contracts/MasterChef.sol#214)\n\tEvent emitted after the call(s):\n\t- Deposit(msg.sender,_pid,_amount) (contracts/MasterChef.sol#218)\n",
            "impact": "Low",
            "confidence": "Medium",
            "lines": [
                206
            ],
            "start_col": 9,
            "end_col": 25
        },
        {
            "check": "reentrancy-events",
            "description": "Reentrancy in MasterChef.deposit(uint256,uint256) (contracts/MasterChef.sol#203-219):\n\tExternal calls:\n\t- updatePool(_pid) (contracts/MasterChef.sol#206)\n\t\t- sushi.mint(devaddr,sushiReward.div(10)) (contracts/MasterChef.sol#196)\n\t\t- sushi.mint(address(this),sushiReward) (contracts/MasterChef.sol#197)\n\t- safeSushiTransfer(msg.sender,pending) (contracts/MasterChef.sol#210)\n\t\t- sushi.transfer(_to,sushiBal) (contracts/MasterChef.sol#254)\n\t\t- sushi.transfer(_to,_amount) (contracts/MasterChef.sol#256)\n\t- pool.lpToken.safeTransferFrom(address(msg.sender),address(this),_amount) (contracts/MasterChef.sol#214)\n\tEvent emitted after the call(s):\n\t- Deposit(msg.sender,_pid,_amount) (contracts/MasterChef.sol#218)\n",
            "impact": "Low",
            "confidence": "Medium",
            "lines": [
                196
            ],
            "start_col": 9,
            "end_col": 49
        },
        {
            "check": "reentrancy-events",
            "description": "Reentrancy in MasterChef.deposit(uint256,uint256) (contracts/MasterChef.sol#203-219):\n\tExternal calls:\n\t- updatePool(_pid) (contracts/MasterChef.sol#206)\n\t\t- sushi.mint(devaddr,sushiReward.div(10)) (contracts/MasterChef.sol#196)\n\t\t- sushi.mint(address(this),sushiReward) (contracts/MasterChef.sol#197)\n\t- safeSushiTransfer(msg.sender,pending) (contracts/MasterChef.sol#210)\n\t\t- sushi.transfer(_to,sushiBal) (contracts/MasterChef.sol#254)\n\t\t- sushi.transfer(_to,_amount) (contracts/MasterChef.sol#256)\n\t- pool.lpToken.safeTransferFrom(address(msg.sender),address(this),_amount) (contracts/MasterChef.sol#214)\n\tEvent emitted after the call(s):\n\t- Deposit(msg.sender,_pid,_amount) (contracts/MasterChef.sol#218)\n",
            "impact": "Low",
            "confidence": "Medium",
            "lines": [
                197
            ],
            "start_col": 9,
            "end_col": 47
        },
        {
            "check": "reentrancy-events",
            "description": "Reentrancy in MasterChef.deposit(uint256,uint256) (contracts/MasterChef.sol#203-219):\n\tExternal calls:\n\t- updatePool(_pid) (contracts/MasterChef.sol#206)\n\t\t- sushi.mint(devaddr,sushiReward.div(10)) (contracts/MasterChef.sol#196)\n\t\t- sushi.mint(address(this),sushiReward) (contracts/MasterChef.sol#197)\n\t- safeSushiTransfer(msg.sender,pending) (contracts/MasterChef.sol#210)\n\t\t- sushi.transfer(_to,sushiBal) (contracts/MasterChef.sol#254)\n\t\t- sushi.transfer(_to,_amount) (contracts/MasterChef.sol#256)\n\t- pool.lpToken.safeTransferFrom(address(msg.sender),address(this),_amount) (contracts/MasterChef.sol#214)\n\tEvent emitted after the call(s):\n\t- Deposit(msg.sender,_pid,_amount) (contracts/MasterChef.sol#218)\n",
            "impact": "Low",
            "confidence": "Medium",
            "lines": [
                210
            ],
            "start_col": 17,
            "end_col": 55
        },
        {
            "check": "reentrancy-events",
            "description": "Reentrancy in MasterChef.deposit(uint256,uint256) (contracts/MasterChef.sol#203-219):\n\tExternal calls:\n\t- updatePool(_pid) (contracts/MasterChef.sol#206)\n\t\t- sushi.mint(devaddr,sushiReward.div(10)) (contracts/MasterChef.sol#196)\n\t\t- sushi.mint(address(this),sushiReward) (contracts/MasterChef.sol#197)\n\t- safeSushiTransfer(msg.sender,pending) (contracts/MasterChef.sol#210)\n\t\t- sushi.transfer(_to,sushiBal) (contracts/MasterChef.sol#254)\n\t\t- sushi.transfer(_to,_amount) (contracts/MasterChef.sol#256)\n\t- pool.lpToken.safeTransferFrom(address(msg.sender),address(this),_amount) (contracts/MasterChef.sol#214)\n\tEvent emitted after the call(s):\n\t- Deposit(msg.sender,_pid,_amount) (contracts/MasterChef.sol#218)\n",
            "impact": "Low",
            "confidence": "Medium",
            "lines": [
                254
            ],
            "start_col": 13,
            "end_col": 42
        },
        {
            "check": "reentrancy-events",
            "description": "Reentrancy in MasterChef.deposit(uint256,uint256) (contracts/MasterChef.sol#203-219):\n\tExternal calls:\n\t- updatePool(_pid) (contracts/MasterChef.sol#206)\n\t\t- sushi.mint(devaddr,sushiReward.div(10)) (contracts/MasterChef.sol#196)\n\t\t- sushi.mint(address(this),sushiReward) (contracts/MasterChef.sol#197)\n\t- safeSushiTransfer(msg.sender,pending) (contracts/MasterChef.sol#210)\n\t\t- sushi.transfer(_to,sushiBal) (contracts/MasterChef.sol#254)\n\t\t- sushi.transfer(_to,_amount) (contracts/MasterChef.sol#256)\n\t- pool.lpToken.safeTransferFrom(address(msg.sender),address(this),_amount) (contracts/MasterChef.sol#214)\n\tEvent emitted after the call(s):\n\t- Deposit(msg.sender,_pid,_amount) (contracts/MasterChef.sol#218)\n",
            "impact": "Low",
            "confidence": "Medium",
            "lines": [
                256
            ],
            "start_col": 13,
            "end_col": 41
        },
        {
            "check": "reentrancy-events",
            "description": "Reentrancy in MasterChef.deposit(uint256,uint256) (contracts/MasterChef.sol#203-219):\n\tExternal calls:\n\t- updatePool(_pid) (contracts/MasterChef.sol#206)\n\t\t- sushi.mint(devaddr,sushiReward.div(10)) (contracts/MasterChef.sol#196)\n\t\t- sushi.mint(address(this),sushiReward) (contracts/MasterChef.sol#197)\n\t- safeSushiTransfer(msg.sender,pending) (contracts/MasterChef.sol#210)\n\t\t- sushi.transfer(_to,sushiBal) (contracts/MasterChef.sol#254)\n\t\t- sushi.transfer(_to,_amount) (contracts/MasterChef.sol#256)\n\t- pool.lpToken.safeTransferFrom(address(msg.sender),address(this),_amount) (contracts/MasterChef.sol#214)\n\tEvent emitted after the call(s):\n\t- Deposit(msg.sender,_pid,_amount) (contracts/MasterChef.sol#218)\n",
            "impact": "Low",
            "confidence": "Medium",
            "lines": [
                214
            ],
            "start_col": 13,
            "end_col": 87
        },
        {
            "check": "reentrancy-events",
            "description": "Reentrancy in MasterChef.deposit(uint256,uint256) (contracts/MasterChef.sol#203-219):\n\tExternal calls:\n\t- updatePool(_pid) (contracts/MasterChef.sol#206)\n\t\t- sushi.mint(devaddr,sushiReward.div(10)) (contracts/MasterChef.sol#196)\n\t\t- sushi.mint(address(this),sushiReward) (contracts/MasterChef.sol#197)\n\t- safeSushiTransfer(msg.sender,pending) (contracts/MasterChef.sol#210)\n\t\t- sushi.transfer(_to,sushiBal) (contracts/MasterChef.sol#254)\n\t\t- sushi.transfer(_to,_amount) (contracts/MasterChef.sol#256)\n\t- pool.lpToken.safeTransferFrom(address(msg.sender),address(this),_amount) (contracts/MasterChef.sol#214)\n\tEvent emitted after the call(s):\n\t- Deposit(msg.sender,_pid,_amount) (contracts/MasterChef.sol#218)\n",
            "impact": "Low",
            "confidence": "Medium",
            "lines": [
                218
            ],
            "start_col": 9,
            "end_col": 48
        },
        {
            "check": "reentrancy-events",
            "description": "Reentrancy in MasterChef.withdraw(uint256,uint256) (contracts/MasterChef.sol#222-237):\n\tExternal calls:\n\t- updatePool(_pid) (contracts/MasterChef.sol#226)\n\t\t- sushi.mint(devaddr,sushiReward.div(10)) (contracts/MasterChef.sol#196)\n\t\t- sushi.mint(address(this),sushiReward) (contracts/MasterChef.sol#197)\n\t- safeSushiTransfer(msg.sender,pending) (contracts/MasterChef.sol#229)\n\t\t- sushi.transfer(_to,sushiBal) (contracts/MasterChef.sol#254)\n\t\t- sushi.transfer(_to,_amount) (contracts/MasterChef.sol#256)\n\t- pool.lpToken.safeTransfer(address(msg.sender),_amount) (contracts/MasterChef.sol#233)\n\tEvent emitted after the call(s):\n\t- Withdraw(msg.sender,_pid,_amount) (contracts/MasterChef.sol#236)\n",
            "impact": "Low",
            "confidence": "Medium",
            "lines": [
                222,
                223,
                224,
                225,
                226,
                227,
                228,
                229,
                230,
                231,
                232,
                233,
                234,
                235,
                236,
                237
            ],
            "start_col": 5,
            "end_col": 6
        },
        {
            "check": "reentrancy-events",
            "description": "Reentrancy in MasterChef.withdraw(uint256,uint256) (contracts/MasterChef.sol#222-237):\n\tExternal calls:\n\t- updatePool(_pid) (contracts/MasterChef.sol#226)\n\t\t- sushi.mint(devaddr,sushiReward.div(10)) (contracts/MasterChef.sol#196)\n\t\t- sushi.mint(address(this),sushiReward) (contracts/MasterChef.sol#197)\n\t- safeSushiTransfer(msg.sender,pending) (contracts/MasterChef.sol#229)\n\t\t- sushi.transfer(_to,sushiBal) (contracts/MasterChef.sol#254)\n\t\t- sushi.transfer(_to,_amount) (contracts/MasterChef.sol#256)\n\t- pool.lpToken.safeTransfer(address(msg.sender),_amount) (contracts/MasterChef.sol#233)\n\tEvent emitted after the call(s):\n\t- Withdraw(msg.sender,_pid,_amount) (contracts/MasterChef.sol#236)\n",
            "impact": "Low",
            "confidence": "Medium",
            "lines": [
                226
            ],
            "start_col": 9,
            "end_col": 25
        },
        {
            "check": "reentrancy-events",
            "description": "Reentrancy in MasterChef.withdraw(uint256,uint256) (contracts/MasterChef.sol#222-237):\n\tExternal calls:\n\t- updatePool(_pid) (contracts/MasterChef.sol#226)\n\t\t- sushi.mint(devaddr,sushiReward.div(10)) (contracts/MasterChef.sol#196)\n\t\t- sushi.mint(address(this),sushiReward) (contracts/MasterChef.sol#197)\n\t- safeSushiTransfer(msg.sender,pending) (contracts/MasterChef.sol#229)\n\t\t- sushi.transfer(_to,sushiBal) (contracts/MasterChef.sol#254)\n\t\t- sushi.transfer(_to,_amount) (contracts/MasterChef.sol#256)\n\t- pool.lpToken.safeTransfer(address(msg.sender),_amount) (contracts/MasterChef.sol#233)\n\tEvent emitted after the call(s):\n\t- Withdraw(msg.sender,_pid,_amount) (contracts/MasterChef.sol#236)\n",
            "impact": "Low",
            "confidence": "Medium",
            "lines": [
                196
            ],
            "start_col": 9,
            "end_col": 49
        },
        {
            "check": "reentrancy-events",
            "description": "Reentrancy in MasterChef.withdraw(uint256,uint256) (contracts/MasterChef.sol#222-237):\n\tExternal calls:\n\t- updatePool(_pid) (contracts/MasterChef.sol#226)\n\t\t- sushi.mint(devaddr,sushiReward.div(10)) (contracts/MasterChef.sol#196)\n\t\t- sushi.mint(address(this),sushiReward) (contracts/MasterChef.sol#197)\n\t- safeSushiTransfer(msg.sender,pending) (contracts/MasterChef.sol#229)\n\t\t- sushi.transfer(_to,sushiBal) (contracts/MasterChef.sol#254)\n\t\t- sushi.transfer(_to,_amount) (contracts/MasterChef.sol#256)\n\t- pool.lpToken.safeTransfer(address(msg.sender),_amount) (contracts/MasterChef.sol#233)\n\tEvent emitted after the call(s):\n\t- Withdraw(msg.sender,_pid,_amount) (contracts/MasterChef.sol#236)\n",
            "impact": "Low",
            "confidence": "Medium",
            "lines": [
                197
            ],
            "start_col": 9,
            "end_col": 47
        },
        {
            "check": "reentrancy-events",
            "description": "Reentrancy in MasterChef.withdraw(uint256,uint256) (contracts/MasterChef.sol#222-237):\n\tExternal calls:\n\t- updatePool(_pid) (contracts/MasterChef.sol#226)\n\t\t- sushi.mint(devaddr,sushiReward.div(10)) (contracts/MasterChef.sol#196)\n\t\t- sushi.mint(address(this),sushiReward) (contracts/MasterChef.sol#197)\n\t- safeSushiTransfer(msg.sender,pending) (contracts/MasterChef.sol#229)\n\t\t- sushi.transfer(_to,sushiBal) (contracts/MasterChef.sol#254)\n\t\t- sushi.transfer(_to,_amount) (contracts/MasterChef.sol#256)\n\t- pool.lpToken.safeTransfer(address(msg.sender),_amount) (contracts/MasterChef.sol#233)\n\tEvent emitted after the call(s):\n\t- Withdraw(msg.sender,_pid,_amount) (contracts/MasterChef.sol#236)\n",
            "impact": "Low",
            "confidence": "Medium",
            "lines": [
                229
            ],
            "start_col": 13,
            "end_col": 51
        },
        {
            "check": "reentrancy-events",
            "description": "Reentrancy in MasterChef.withdraw(uint256,uint256) (contracts/MasterChef.sol#222-237):\n\tExternal calls:\n\t- updatePool(_pid) (contracts/MasterChef.sol#226)\n\t\t- sushi.mint(devaddr,sushiReward.div(10)) (contracts/MasterChef.sol#196)\n\t\t- sushi.mint(address(this),sushiReward) (contracts/MasterChef.sol#197)\n\t- safeSushiTransfer(msg.sender,pending) (contracts/MasterChef.sol#229)\n\t\t- sushi.transfer(_to,sushiBal) (contracts/MasterChef.sol#254)\n\t\t- sushi.transfer(_to,_amount) (contracts/MasterChef.sol#256)\n\t- pool.lpToken.safeTransfer(address(msg.sender),_amount) (contracts/MasterChef.sol#233)\n\tEvent emitted after the call(s):\n\t- Withdraw(msg.sender,_pid,_amount) (contracts/MasterChef.sol#236)\n",
            "impact": "Low",
            "confidence": "Medium",
            "lines": [
                254
            ],
            "start_col": 13,
            "end_col": 42
        },
        {
            "check": "reentrancy-events",
            "description": "Reentrancy in MasterChef.withdraw(uint256,uint256) (contracts/MasterChef.sol#222-237):\n\tExternal calls:\n\t- updatePool(_pid) (contracts/MasterChef.sol#226)\n\t\t- sushi.mint(devaddr,sushiReward.div(10)) (contracts/MasterChef.sol#196)\n\t\t- sushi.mint(address(this),sushiReward) (contracts/MasterChef.sol#197)\n\t- safeSushiTransfer(msg.sender,pending) (contracts/MasterChef.sol#229)\n\t\t- sushi.transfer(_to,sushiBal) (contracts/MasterChef.sol#254)\n\t\t- sushi.transfer(_to,_amount) (contracts/MasterChef.sol#256)\n\t- pool.lpToken.safeTransfer(address(msg.sender),_amount) (contracts/MasterChef.sol#233)\n\tEvent emitted after the call(s):\n\t- Withdraw(msg.sender,_pid,_amount) (contracts/MasterChef.sol#236)\n",
            "impact": "Low",
            "confidence": "Medium",
            "lines": [
                256
            ],
            "start_col": 13,
            "end_col": 41
        },
        {
            "check": "reentrancy-events",
            "description": "Reentrancy in MasterChef.withdraw(uint256,uint256) (contracts/MasterChef.sol#222-237):\n\tExternal calls:\n\t- updatePool(_pid) (contracts/MasterChef.sol#226)\n\t\t- sushi.mint(devaddr,sushiReward.div(10)) (contracts/MasterChef.sol#196)\n\t\t- sushi.mint(address(this),sushiReward) (contracts/MasterChef.sol#197)\n\t- safeSushiTransfer(msg.sender,pending) (contracts/MasterChef.sol#229)\n\t\t- sushi.transfer(_to,sushiBal) (contracts/MasterChef.sol#254)\n\t\t- sushi.transfer(_to,_amount) (contracts/MasterChef.sol#256)\n\t- pool.lpToken.safeTransfer(address(msg.sender),_amount) (contracts/MasterChef.sol#233)\n\tEvent emitted after the call(s):\n\t- Withdraw(msg.sender,_pid,_amount) (contracts/MasterChef.sol#236)\n",
            "impact": "Low",
            "confidence": "Medium",
            "lines": [
                233
            ],
            "start_col": 13,
            "end_col": 68
        },
        {
            "check": "reentrancy-events",
            "description": "Reentrancy in MasterChef.withdraw(uint256,uint256) (contracts/MasterChef.sol#222-237):\n\tExternal calls:\n\t- updatePool(_pid) (contracts/MasterChef.sol#226)\n\t\t- sushi.mint(devaddr,sushiReward.div(10)) (contracts/MasterChef.sol#196)\n\t\t- sushi.mint(address(this),sushiReward) (contracts/MasterChef.sol#197)\n\t- safeSushiTransfer(msg.sender,pending) (contracts/MasterChef.sol#229)\n\t\t- sushi.transfer(_to,sushiBal) (contracts/MasterChef.sol#254)\n\t\t- sushi.transfer(_to,_amount) (contracts/MasterChef.sol#256)\n\t- pool.lpToken.safeTransfer(address(msg.sender),_amount) (contracts/MasterChef.sol#233)\n\tEvent emitted after the call(s):\n\t- Withdraw(msg.sender,_pid,_amount) (contracts/MasterChef.sol#236)\n",
            "impact": "Low",
            "confidence": "Medium",
            "lines": [
                236
            ],
            "start_col": 9,
            "end_col": 49
        },
        {
            "check": "reentrancy-events",
            "description": "Reentrancy in MasterChef.emergencyWithdraw(uint256) (contracts/MasterChef.sol#240-248):\n\tExternal calls:\n\t- pool.lpToken.safeTransfer(address(msg.sender),amount) (contracts/MasterChef.sol#246)\n\tEvent emitted after the call(s):\n\t- EmergencyWithdraw(msg.sender,_pid,amount) (contracts/MasterChef.sol#247)\n",
            "impact": "Low",
            "confidence": "Medium",
            "lines": [
                240,
                241,
                242,
                243,
                244,
                245,
                246,
                247,
                248
            ],
            "start_col": 5,
            "end_col": 6
        },
        {
            "check": "reentrancy-events",
            "description": "Reentrancy in MasterChef.emergencyWithdraw(uint256) (contracts/MasterChef.sol#240-248):\n\tExternal calls:\n\t- pool.lpToken.safeTransfer(address(msg.sender),amount) (contracts/MasterChef.sol#246)\n\tEvent emitted after the call(s):\n\t- EmergencyWithdraw(msg.sender,_pid,amount) (contracts/MasterChef.sol#247)\n",
            "impact": "Low",
            "confidence": "Medium",
            "lines": [
                246
            ],
            "start_col": 9,
            "end_col": 63
        },
        {
            "check": "reentrancy-events",
            "description": "Reentrancy in MasterChef.emergencyWithdraw(uint256) (contracts/MasterChef.sol#240-248):\n\tExternal calls:\n\t- pool.lpToken.safeTransfer(address(msg.sender),amount) (contracts/MasterChef.sol#246)\n\tEvent emitted after the call(s):\n\t- EmergencyWithdraw(msg.sender,_pid,amount) (contracts/MasterChef.sol#247)\n",
            "impact": "Low",
            "confidence": "Medium",
            "lines": [
                247
            ],
            "start_col": 9,
            "end_col": 57
        },
        {
            "check": "naming-convention",
            "description": "Parameter MasterChef.add(uint256,IERC20,bool)._allocPoint (contracts/MasterChef.sol#108) is not in mixedCase\n",
            "impact": "Informational",
            "confidence": "High",
            "lines": [
                108
            ],
            "start_col": 18,
            "end_col": 37
        },
        {
            "check": "naming-convention",
            "description": "Parameter MasterChef.safeSushiTransfer(address,uint256)._to (contracts/MasterChef.sol#251) is not in mixedCase\n",
            "impact": "Informational",
            "confidence": "High",
            "lines": [
                251
            ],
            "start_col": 32,
            "end_col": 43
        },
        {
            "check": "naming-convention",
            "description": "Parameter MasterChef.emergencyWithdraw(uint256)._pid (contracts/MasterChef.sol#240) is not in mixedCase\n",
            "impact": "Informational",
            "confidence": "High",
            "lines": [
                240
            ],
            "start_col": 32,
            "end_col": 44
        },
        {
            "check": "naming-convention",
            "description": "Parameter MasterChef.deposit(uint256,uint256)._pid (contracts/MasterChef.sol#203) is not in mixedCase\n",
            "impact": "Informational",
            "confidence": "High",
            "lines": [
                203
            ],
            "start_col": 22,
            "end_col": 34
        },
        {
            "check": "naming-convention",
            "description": "Parameter MasterChef.dev(address)._devaddr (contracts/MasterChef.sol#261) is not in mixedCase\n",
            "impact": "Informational",
            "confidence": "High",
            "lines": [
                261
            ],
            "start_col": 18,
            "end_col": 34
        },
        {
            "check": "naming-convention",
            "description": "Parameter MasterChef.updatePool(uint256)._pid (contracts/MasterChef.sol#184) is not in mixedCase\n",
            "impact": "Informational",
            "confidence": "High",
            "lines": [
                184
            ],
            "start_col": 25,
            "end_col": 37
        },
        {
            "check": "naming-convention",
            "description": "Parameter MasterChef.setMigrator(IMigratorChef)._migrator (contracts/MasterChef.sol#132) is not in mixedCase\n",
            "impact": "Informational",
            "confidence": "High",
            "lines": [
                132
            ],
            "start_col": 26,
            "end_col": 49
        },
        {
            "check": "naming-convention",
            "description": "Parameter MasterChef.getMultiplier(uint256,uint256)._from (contracts/MasterChef.sol#149) is not in mixedCase\n",
            "impact": "Informational",
            "confidence": "High",
            "lines": [
                149
            ],
            "start_col": 28,
            "end_col": 41
        },
        {
            "check": "naming-convention",
            "description": "Parameter MasterChef.add(uint256,IERC20,bool)._lpToken (contracts/MasterChef.sol#108) is not in mixedCase\n",
            "impact": "Informational",
            "confidence": "High",
            "lines": [
                108
            ],
            "start_col": 39,
            "end_col": 54
        },
        {
            "check": "naming-convention",
            "description": "Parameter MasterChef.add(uint256,IERC20,bool)._withUpdate (contracts/MasterChef.sol#108) is not in mixedCase\n",
            "impact": "Informational",
            "confidence": "High",
            "lines": [
                108
            ],
            "start_col": 56,
            "end_col": 72
        },
        {
            "check": "naming-convention",
            "description": "Parameter MasterChef.deposit(uint256,uint256)._amount (contracts/MasterChef.sol#203) is not in mixedCase\n",
            "impact": "Informational",
            "confidence": "High",
            "lines": [
                203
            ],
            "start_col": 36,
            "end_col": 51
        },
        {
            "check": "naming-convention",
            "description": "Parameter MasterChef.safeSushiTransfer(address,uint256)._amount (contracts/MasterChef.sol#251) is not in mixedCase\n",
            "impact": "Informational",
            "confidence": "High",
            "lines": [
                251
            ],
            "start_col": 45,
            "end_col": 60
        },
        {
            "check": "naming-convention",
            "description": "Parameter MasterChef.set(uint256,uint256,bool)._pid (contracts/MasterChef.sol#123) is not in mixedCase\n",
            "impact": "Informational",
            "confidence": "High",
            "lines": [
                123
            ],
            "start_col": 18,
            "end_col": 30
        },
        {
            "check": "naming-convention",
            "description": "Parameter MasterChef.withdraw(uint256,uint256)._amount (contracts/MasterChef.sol#222) is not in mixedCase\n",
            "impact": "Informational",
            "confidence": "High",
            "lines": [
                222
            ],
            "start_col": 37,
            "end_col": 52
        },
        {
            "check": "naming-convention",
            "description": "Parameter MasterChef.pendingSushi(uint256,address)._pid (contracts/MasterChef.sol#162) is not in mixedCase\n",
            "impact": "Informational",
            "confidence": "High",
            "lines": [
                162
            ],
            "start_col": 27,
            "end_col": 39
        },
        {
            "check": "naming-convention",
            "description": "Parameter MasterChef.set(uint256,uint256,bool)._withUpdate (contracts/MasterChef.sol#123) is not in mixedCase\n",
            "impact": "Informational",
            "confidence": "High",
            "lines": [
                123
            ],
            "start_col": 53,
            "end_col": 69
        },
        {
            "check": "naming-convention",
            "description": "Parameter MasterChef.set(uint256,uint256,bool)._allocPoint (contracts/MasterChef.sol#123) is not in mixedCase\n",
            "impact": "Informational",
            "confidence": "High",
            "lines": [
                123
            ],
            "start_col": 32,
            "end_col": 51
        },
        {
            "check": "naming-convention",
            "description": "Parameter MasterChef.pendingSushi(uint256,address)._user (contracts/MasterChef.sol#162) is not in mixedCase\n",
            "impact": "Informational",
            "confidence": "High",
            "lines": [
                162
            ],
            "start_col": 41,
            "end_col": 54
        },
        {
            "check": "naming-convention",
            "description": "Parameter MasterChef.getMultiplier(uint256,uint256)._to (contracts/MasterChef.sol#149) is not in mixedCase\n",
            "impact": "Informational",
            "confidence": "High",
            "lines": [
                149
            ],
            "start_col": 43,
            "end_col": 54
        },
        {
            "check": "naming-convention",
            "description": "Parameter MasterChef.withdraw(uint256,uint256)._pid (contracts/MasterChef.sol#222) is not in mixedCase\n",
            "impact": "Informational",
            "confidence": "High",
            "lines": [
                222
            ],
            "start_col": 23,
            "end_col": 35
        },
        {
            "check": "naming-convention",
            "description": "Parameter MasterChef.migrate(uint256)._pid (contracts/MasterChef.sol#137) is not in mixedCase\n",
            "impact": "Informational",
            "confidence": "High",
            "lines": [
                137
            ],
            "start_col": 22,
            "end_col": 34
        },
        {
            "check": "immutable-states",
            "description": "MasterChef.startBlock (contracts/MasterChef.sol#82) should be immutable \n",
            "impact": "Optimization",
            "confidence": "High",
            "lines": [
                82
            ],
            "start_col": 5,
            "end_col": 30
        },
        {
            "check": "immutable-states",
            "description": "MasterChef.sushiPerBlock (contracts/MasterChef.sol#69) should be immutable \n",
            "impact": "Optimization",
            "confidence": "High",
            "lines": [
                69
            ],
            "start_col": 5,
            "end_col": 33
        },
        {
            "check": "immutable-states",
            "description": "MasterChef.bonusEndBlock (contracts/MasterChef.sol#67) should be immutable \n",
            "impact": "Optimization",
            "confidence": "High",
            "lines": [
                67
            ],
            "start_col": 5,
            "end_col": 33
        },
        {
            "check": "immutable-states",
            "description": "MasterChef.sushi (contracts/MasterChef.sol#63) should be immutable \n",
            "impact": "Optimization",
            "confidence": "High",
            "lines": [
                63
            ],
            "start_col": 5,
            "end_col": 28
        }
    ],
    "contracts/SushiToken.sol": [
        {
            "check": "incorrect-equality",
            "description": "SushiToken._writeCheckpoint(address,uint32,uint256,uint256) (contracts/SushiToken.sol#216-234) uses a dangerous strict equality:\n\t- nCheckpoints > 0 && checkpoints[delegatee][nCheckpoints - 1].fromBlock == blockNumber (contracts/SushiToken.sol#226)\n",
            "impact": "Medium",
            "confidence": "High",
            "lines": [
                216,
                217,
                218,
                219,
                220,
                221,
                222,
                223,
                224,
                225,
                226,
                227,
                228,
                229,
                230,
                231,
                232,
                233,
                234
            ],
            "start_col": 5,
            "end_col": 6
        },
        {
            "check": "incorrect-equality",
            "description": "SushiToken._writeCheckpoint(address,uint32,uint256,uint256) (contracts/SushiToken.sol#216-234) uses a dangerous strict equality:\n\t- nCheckpoints > 0 && checkpoints[delegatee][nCheckpoints - 1].fromBlock == blockNumber (contracts/SushiToken.sol#226)\n",
            "impact": "Medium",
            "confidence": "High",
            "lines": [
                226
            ],
            "start_col": 13,
            "end_col": 98
        },
        {
            "check": "timestamp",
            "description": "SushiToken.delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32) (contracts/SushiToken.sol#82-123) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- require(bool,string)(now <= expiry,SUSHI::delegateBySig: signature expired) (contracts/SushiToken.sol#121)\n",
            "impact": "Low",
            "confidence": "Medium",
            "lines": [
                82,
                83,
                84,
                85,
                86,
                87,
                88,
                89,
                90,
                91,
                92,
                93,
                94,
                95,
                96,
                97,
                98,
                99,
                100,
                101,
                102,
                103,
                104,
                105,
                106,
                107,
                108,
                109,
                110,
                111,
                112,
                113,
                114,
                115,
                116,
                117,
                118,
                119,
                120,
                121,
                122,
                123
            ],
            "start_col": 5,
            "end_col": 6
        },
        {
            "check": "timestamp",
            "description": "SushiToken.delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32) (contracts/SushiToken.sol#82-123) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- require(bool,string)(now <= expiry,SUSHI::delegateBySig: signature expired) (contracts/SushiToken.sol#121)\n",
            "impact": "Low",
            "confidence": "Medium",
            "lines": [
                121
            ],
            "start_col": 9,
            "end_col": 74
        },
        {
            "check": "assembly",
            "description": "SushiToken.getChainId() (contracts/SushiToken.sol#241-245) uses assembly\n\t- INLINE ASM (contracts/SushiToken.sol#243)\n",
            "impact": "Informational",
            "confidence": "High",
            "lines": [
                241,
                242,
                243,
                244,
                245
            ],
            "start_col": 5,
            "end_col": 6
        },
        {
            "check": "assembly",
            "description": "SushiToken.getChainId() (contracts/SushiToken.sol#241-245) uses assembly\n\t- INLINE ASM (contracts/SushiToken.sol#243)\n",
            "impact": "Informational",
            "confidence": "High",
            "lines": [
                243
            ],
            "start_col": 9,
            "end_col": 42
        },
        {
            "check": "naming-convention",
            "description": "Parameter SushiToken.mint(address,uint256)._to (contracts/SushiToken.sol#12) is not in mixedCase\n",
            "impact": "Informational",
            "confidence": "High",
            "lines": [
                12
            ],
            "start_col": 19,
            "end_col": 30
        },
        {
            "check": "naming-convention",
            "description": "Parameter SushiToken.mint(address,uint256)._amount (contracts/SushiToken.sol#12) is not in mixedCase\n",
            "impact": "Informational",
            "confidence": "High",
            "lines": [
                12
            ],
            "start_col": 32,
            "end_col": 47
        },
        {
            "check": "incorrect-equality",
            "description": "SushiToken._writeCheckpoint(address,uint32,uint256,uint256) (contracts/SushiToken.sol#216-234) uses a dangerous strict equality:\n\t- nCheckpoints > 0 && checkpoints[delegatee][nCheckpoints - 1].fromBlock == blockNumber (contracts/SushiToken.sol#226)\n",
            "impact": "Medium",
            "confidence": "High",
            "lines": [
                216,
                217,
                218,
                219,
                220,
                221,
                222,
                223,
                224,
                225,
                226,
                227,
                228,
                229,
                230,
                231,
                232,
                233,
                234
            ],
            "start_col": 5,
            "end_col": 6
        },
        {
            "check": "incorrect-equality",
            "description": "SushiToken._writeCheckpoint(address,uint32,uint256,uint256) (contracts/SushiToken.sol#216-234) uses a dangerous strict equality:\n\t- nCheckpoints > 0 && checkpoints[delegatee][nCheckpoints - 1].fromBlock == blockNumber (contracts/SushiToken.sol#226)\n",
            "impact": "Medium",
            "confidence": "High",
            "lines": [
                226
            ],
            "start_col": 13,
            "end_col": 98
        },
        {
            "check": "timestamp",
            "description": "SushiToken.delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32) (contracts/SushiToken.sol#82-123) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- require(bool,string)(now <= expiry,SUSHI::delegateBySig: signature expired) (contracts/SushiToken.sol#121)\n",
            "impact": "Low",
            "confidence": "Medium",
            "lines": [
                82,
                83,
                84,
                85,
                86,
                87,
                88,
                89,
                90,
                91,
                92,
                93,
                94,
                95,
                96,
                97,
                98,
                99,
                100,
                101,
                102,
                103,
                104,
                105,
                106,
                107,
                108,
                109,
                110,
                111,
                112,
                113,
                114,
                115,
                116,
                117,
                118,
                119,
                120,
                121,
                122,
                123
            ],
            "start_col": 5,
            "end_col": 6
        },
        {
            "check": "timestamp",
            "description": "SushiToken.delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32) (contracts/SushiToken.sol#82-123) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- require(bool,string)(now <= expiry,SUSHI::delegateBySig: signature expired) (contracts/SushiToken.sol#121)\n",
            "impact": "Low",
            "confidence": "Medium",
            "lines": [
                121
            ],
            "start_col": 9,
            "end_col": 74
        },
        {
            "check": "assembly",
            "description": "SushiToken.getChainId() (contracts/SushiToken.sol#241-245) uses assembly\n\t- INLINE ASM (contracts/SushiToken.sol#243)\n",
            "impact": "Informational",
            "confidence": "High",
            "lines": [
                241,
                242,
                243,
                244,
                245
            ],
            "start_col": 5,
            "end_col": 6
        },
        {
            "check": "assembly",
            "description": "SushiToken.getChainId() (contracts/SushiToken.sol#241-245) uses assembly\n\t- INLINE ASM (contracts/SushiToken.sol#243)\n",
            "impact": "Informational",
            "confidence": "High",
            "lines": [
                243
            ],
            "start_col": 9,
            "end_col": 42
        },
        {
            "check": "naming-convention",
            "description": "Parameter SushiToken.mint(address,uint256)._to (contracts/SushiToken.sol#12) is not in mixedCase\n",
            "impact": "Informational",
            "confidence": "High",
            "lines": [
                12
            ],
            "start_col": 19,
            "end_col": 30
        },
        {
            "check": "naming-convention",
            "description": "Parameter SushiToken.mint(address,uint256)._amount (contracts/SushiToken.sol#12) is not in mixedCase\n",
            "impact": "Informational",
            "confidence": "High",
            "lines": [
                12
            ],
            "start_col": 32,
            "end_col": 47
        }
    ],
    "@openzeppelin/contracts/utils/Address.sol": [
        {
            "check": "assembly",
            "description": "Address._verifyCallResult(bool,bytes,string) (@openzeppelin/contracts/utils/Address.sol#147-164) uses assembly\n\t- INLINE ASM (@openzeppelin/contracts/utils/Address.sol#156-159)\n",
            "impact": "Informational",
            "confidence": "High",
            "lines": [
                147,
                148,
                149,
                150,
                151,
                152,
                153,
                154,
                155,
                156,
                157,
                158,
                159,
                160,
                161,
                162,
                163,
                164
            ],
            "start_col": 5,
            "end_col": 6
        },
        {
            "check": "assembly",
            "description": "Address._verifyCallResult(bool,bytes,string) (@openzeppelin/contracts/utils/Address.sol#147-164) uses assembly\n\t- INLINE ASM (@openzeppelin/contracts/utils/Address.sol#156-159)\n",
            "impact": "Informational",
            "confidence": "High",
            "lines": [
                156,
                157,
                158,
                159
            ],
            "start_col": 17,
            "end_col": 18
        },
        {
            "check": "assembly",
            "description": "Address.isContract(address) (@openzeppelin/contracts/utils/Address.sol#26-35) uses assembly\n\t- INLINE ASM (@openzeppelin/contracts/utils/Address.sol#33)\n",
            "impact": "Informational",
            "confidence": "High",
            "lines": [
                26,
                27,
                28,
                29,
                30,
                31,
                32,
                33,
                34,
                35
            ],
            "start_col": 5,
            "end_col": 6
        },
        {
            "check": "assembly",
            "description": "Address.isContract(address) (@openzeppelin/contracts/utils/Address.sol#26-35) uses assembly\n\t- INLINE ASM (@openzeppelin/contracts/utils/Address.sol#33)\n",
            "impact": "Informational",
            "confidence": "High",
            "lines": [
                33
            ],
            "start_col": 9,
            "end_col": 50
        },
        {
            "check": "dead-code",
            "description": "Address.sendValue(address,uint256) (@openzeppelin/contracts/utils/Address.sol#53-59) is never used and should be removed\n",
            "impact": "Informational",
            "confidence": "Medium",
            "lines": [
                53,
                54,
                55,
                56,
                57,
                58,
                59
            ],
            "start_col": 5,
            "end_col": 6
        },
        {
            "check": "dead-code",
            "description": "Address.functionCallWithValue(address,bytes,uint256) (@openzeppelin/contracts/utils/Address.sol#104-106) is never used and should be removed\n",
            "impact": "Informational",
            "confidence": "Medium",
            "lines": [
                104,
                105,
                106
            ],
            "start_col": 5,
            "end_col": 6
        },
        {
            "check": "dead-code",
            "description": "Address.functionStaticCall(address,bytes) (@openzeppelin/contracts/utils/Address.sol#129-131) is never used and should be removed\n",
            "impact": "Informational",
            "confidence": "Medium",
            "lines": [
                129,
                130,
                131
            ],
            "start_col": 5,
            "end_col": 6
        },
        {
            "check": "dead-code",
            "description": "Address.functionStaticCall(address,bytes,string) (@openzeppelin/contracts/utils/Address.sol#139-145) is never used and should be removed\n",
            "impact": "Informational",
            "confidence": "Medium",
            "lines": [
                139,
                140,
                141,
                142,
                143,
                144,
                145
            ],
            "start_col": 5,
            "end_col": 6
        },
        {
            "check": "dead-code",
            "description": "Address.functionCall(address,bytes) (@openzeppelin/contracts/utils/Address.sol#79-81) is never used and should be removed\n",
            "impact": "Informational",
            "confidence": "Medium",
            "lines": [
                79,
                80,
                81
            ],
            "start_col": 5,
            "end_col": 6
        },
        {
            "check": "low-level-calls",
            "description": "Low level call in Address.sendValue(address,uint256) (@openzeppelin/contracts/utils/Address.sol#53-59):\n\t- (success,None) = recipient.call{value: amount}() (@openzeppelin/contracts/utils/Address.sol#57)\n",
            "impact": "Informational",
            "confidence": "High",
            "lines": [
                53,
                54,
                55,
                56,
                57,
                58,
                59
            ],
            "start_col": 5,
            "end_col": 6
        },
        {
            "check": "low-level-calls",
            "description": "Low level call in Address.sendValue(address,uint256) (@openzeppelin/contracts/utils/Address.sol#53-59):\n\t- (success,None) = recipient.call{value: amount}() (@openzeppelin/contracts/utils/Address.sol#57)\n",
            "impact": "Informational",
            "confidence": "High",
            "lines": [
                57
            ],
            "start_col": 9,
            "end_col": 63
        },
        {
            "check": "low-level-calls",
            "description": "Low level call in Address.functionCallWithValue(address,bytes,uint256,string) (@openzeppelin/contracts/utils/Address.sol#114-121):\n\t- (success,returndata) = target.call{value: value}(data) (@openzeppelin/contracts/utils/Address.sol#119)\n",
            "impact": "Informational",
            "confidence": "High",
            "lines": [
                114,
                115,
                116,
                117,
                118,
                119,
                120,
                121
            ],
            "start_col": 5,
            "end_col": 6
        },
        {
            "check": "low-level-calls",
            "description": "Low level call in Address.functionCallWithValue(address,bytes,uint256,string) (@openzeppelin/contracts/utils/Address.sol#114-121):\n\t- (success,returndata) = target.call{value: value}(data) (@openzeppelin/contracts/utils/Address.sol#119)\n",
            "impact": "Informational",
            "confidence": "High",
            "lines": [
                119
            ],
            "start_col": 9,
            "end_col": 84
        },
        {
            "check": "low-level-calls",
            "description": "Low level call in Address.functionStaticCall(address,bytes,string) (@openzeppelin/contracts/utils/Address.sol#139-145):\n\t- (success,returndata) = target.staticcall(data) (@openzeppelin/contracts/utils/Address.sol#143)\n",
            "impact": "Informational",
            "confidence": "High",
            "lines": [
                139,
                140,
                141,
                142,
                143,
                144,
                145
            ],
            "start_col": 5,
            "end_col": 6
        },
        {
            "check": "low-level-calls",
            "description": "Low level call in Address.functionStaticCall(address,bytes,string) (@openzeppelin/contracts/utils/Address.sol#139-145):\n\t- (success,returndata) = target.staticcall(data) (@openzeppelin/contracts/utils/Address.sol#143)\n",
            "impact": "Informational",
            "confidence": "High",
            "lines": [
                143
            ],
            "start_col": 9,
            "end_col": 74
        },
        {
            "check": "assembly",
            "description": "Address._verifyCallResult(bool,bytes,string) (@openzeppelin/contracts/utils/Address.sol#147-164) uses assembly\n\t- INLINE ASM (@openzeppelin/contracts/utils/Address.sol#156-159)\n",
            "impact": "Informational",
            "confidence": "High",
            "lines": [
                147,
                148,
                149,
                150,
                151,
                152,
                153,
                154,
                155,
                156,
                157,
                158,
                159,
                160,
                161,
                162,
                163,
                164
            ],
            "start_col": 5,
            "end_col": 6
        },
        {
            "check": "assembly",
            "description": "Address._verifyCallResult(bool,bytes,string) (@openzeppelin/contracts/utils/Address.sol#147-164) uses assembly\n\t- INLINE ASM (@openzeppelin/contracts/utils/Address.sol#156-159)\n",
            "impact": "Informational",
            "confidence": "High",
            "lines": [
                156,
                157,
                158,
                159
            ],
            "start_col": 17,
            "end_col": 18
        },
        {
            "check": "assembly",
            "description": "Address.isContract(address) (@openzeppelin/contracts/utils/Address.sol#26-35) uses assembly\n\t- INLINE ASM (@openzeppelin/contracts/utils/Address.sol#33)\n",
            "impact": "Informational",
            "confidence": "High",
            "lines": [
                26,
                27,
                28,
                29,
                30,
                31,
                32,
                33,
                34,
                35
            ],
            "start_col": 5,
            "end_col": 6
        },
        {
            "check": "assembly",
            "description": "Address.isContract(address) (@openzeppelin/contracts/utils/Address.sol#26-35) uses assembly\n\t- INLINE ASM (@openzeppelin/contracts/utils/Address.sol#33)\n",
            "impact": "Informational",
            "confidence": "High",
            "lines": [
                33
            ],
            "start_col": 9,
            "end_col": 50
        },
        {
            "check": "dead-code",
            "description": "Address.sendValue(address,uint256) (@openzeppelin/contracts/utils/Address.sol#53-59) is never used and should be removed\n",
            "impact": "Informational",
            "confidence": "Medium",
            "lines": [
                53,
                54,
                55,
                56,
                57,
                58,
                59
            ],
            "start_col": 5,
            "end_col": 6
        },
        {
            "check": "dead-code",
            "description": "Address.functionCallWithValue(address,bytes,uint256) (@openzeppelin/contracts/utils/Address.sol#104-106) is never used and should be removed\n",
            "impact": "Informational",
            "confidence": "Medium",
            "lines": [
                104,
                105,
                106
            ],
            "start_col": 5,
            "end_col": 6
        },
        {
            "check": "dead-code",
            "description": "Address.functionStaticCall(address,bytes) (@openzeppelin/contracts/utils/Address.sol#129-131) is never used and should be removed\n",
            "impact": "Informational",
            "confidence": "Medium",
            "lines": [
                129,
                130,
                131
            ],
            "start_col": 5,
            "end_col": 6
        },
        {
            "check": "dead-code",
            "description": "Address.functionStaticCall(address,bytes,string) (@openzeppelin/contracts/utils/Address.sol#139-145) is never used and should be removed\n",
            "impact": "Informational",
            "confidence": "Medium",
            "lines": [
                139,
                140,
                141,
                142,
                143,
                144,
                145
            ],
            "start_col": 5,
            "end_col": 6
        },
        {
            "check": "dead-code",
            "description": "Address.functionCall(address,bytes) (@openzeppelin/contracts/utils/Address.sol#79-81) is never used and should be removed\n",
            "impact": "Informational",
            "confidence": "Medium",
            "lines": [
                79,
                80,
                81
            ],
            "start_col": 5,
            "end_col": 6
        },
        {
            "check": "low-level-calls",
            "description": "Low level call in Address.sendValue(address,uint256) (@openzeppelin/contracts/utils/Address.sol#53-59):\n\t- (success,None) = recipient.call{value: amount}() (@openzeppelin/contracts/utils/Address.sol#57)\n",
            "impact": "Informational",
            "confidence": "High",
            "lines": [
                53,
                54,
                55,
                56,
                57,
                58,
                59
            ],
            "start_col": 5,
            "end_col": 6
        },
        {
            "check": "low-level-calls",
            "description": "Low level call in Address.sendValue(address,uint256) (@openzeppelin/contracts/utils/Address.sol#53-59):\n\t- (success,None) = recipient.call{value: amount}() (@openzeppelin/contracts/utils/Address.sol#57)\n",
            "impact": "Informational",
            "confidence": "High",
            "lines": [
                57
            ],
            "start_col": 9,
            "end_col": 63
        },
        {
            "check": "low-level-calls",
            "description": "Low level call in Address.functionCallWithValue(address,bytes,uint256,string) (@openzeppelin/contracts/utils/Address.sol#114-121):\n\t- (success,returndata) = target.call{value: value}(data) (@openzeppelin/contracts/utils/Address.sol#119)\n",
            "impact": "Informational",
            "confidence": "High",
            "lines": [
                114,
                115,
                116,
                117,
                118,
                119,
                120,
                121
            ],
            "start_col": 5,
            "end_col": 6
        },
        {
            "check": "low-level-calls",
            "description": "Low level call in Address.functionCallWithValue(address,bytes,uint256,string) (@openzeppelin/contracts/utils/Address.sol#114-121):\n\t- (success,returndata) = target.call{value: value}(data) (@openzeppelin/contracts/utils/Address.sol#119)\n",
            "impact": "Informational",
            "confidence": "High",
            "lines": [
                119
            ],
            "start_col": 9,
            "end_col": 84
        },
        {
            "check": "low-level-calls",
            "description": "Low level call in Address.functionStaticCall(address,bytes,string) (@openzeppelin/contracts/utils/Address.sol#139-145):\n\t- (success,returndata) = target.staticcall(data) (@openzeppelin/contracts/utils/Address.sol#143)\n",
            "impact": "Informational",
            "confidence": "High",
            "lines": [
                139,
                140,
                141,
                142,
                143,
                144,
                145
            ],
            "start_col": 5,
            "end_col": 6
        },
        {
            "check": "low-level-calls",
            "description": "Low level call in Address.functionStaticCall(address,bytes,string) (@openzeppelin/contracts/utils/Address.sol#139-145):\n\t- (success,returndata) = target.staticcall(data) (@openzeppelin/contracts/utils/Address.sol#143)\n",
            "impact": "Informational",
            "confidence": "High",
            "lines": [
                143
            ],
            "start_col": 9,
            "end_col": 74
        }
    ],
    "@openzeppelin/contracts/utils/EnumerableSet.sol": [
        {
            "check": "dead-code",
            "description": "EnumerableSet._contains(EnumerableSet.Set,bytes32) (@openzeppelin/contracts/utils/EnumerableSet.sol#109-111) is never used and should be removed\n",
            "impact": "Informational",
            "confidence": "Medium",
            "lines": [
                109,
                110,
                111
            ],
            "start_col": 5,
            "end_col": 6
        },
        {
            "check": "dead-code",
            "description": "EnumerableSet.length(EnumerableSet.Bytes32Set) (@openzeppelin/contracts/utils/EnumerableSet.sol#171-173) is never used and should be removed\n",
            "impact": "Informational",
            "confidence": "Medium",
            "lines": [
                171,
                172,
                173
            ],
            "start_col": 5,
            "end_col": 6
        },
        {
            "check": "dead-code",
            "description": "EnumerableSet.at(EnumerableSet.Bytes32Set,uint256) (@openzeppelin/contracts/utils/EnumerableSet.sol#185-187) is never used and should be removed\n",
            "impact": "Informational",
            "confidence": "Medium",
            "lines": [
                185,
                186,
                187
            ],
            "start_col": 5,
            "end_col": 6
        },
        {
            "check": "dead-code",
            "description": "EnumerableSet._length(EnumerableSet.Set) (@openzeppelin/contracts/utils/EnumerableSet.sol#116-118) is never used and should be removed\n",
            "impact": "Informational",
            "confidence": "Medium",
            "lines": [
                116,
                117,
                118
            ],
            "start_col": 5,
            "end_col": 6
        },
        {
            "check": "dead-code",
            "description": "EnumerableSet._at(EnumerableSet.Set,uint256) (@openzeppelin/contracts/utils/EnumerableSet.sol#130-133) is never used and should be removed\n",
            "impact": "Informational",
            "confidence": "Medium",
            "lines": [
                130,
                131,
                132,
                133
            ],
            "start_col": 5,
            "end_col": 6
        },
        {
            "check": "dead-code",
            "description": "EnumerableSet.remove(EnumerableSet.UintSet,uint256) (@openzeppelin/contracts/utils/EnumerableSet.sol#266-268) is never used and should be removed\n",
            "impact": "Informational",
            "confidence": "Medium",
            "lines": [
                266,
                267,
                268
            ],
            "start_col": 5,
            "end_col": 6
        },
        {
            "check": "dead-code",
            "description": "EnumerableSet.contains(EnumerableSet.Bytes32Set,bytes32) (@openzeppelin/contracts/utils/EnumerableSet.sol#164-166) is never used and should be removed\n",
            "impact": "Informational",
            "confidence": "Medium",
            "lines": [
                164,
                165,
                166
            ],
            "start_col": 5,
            "end_col": 6
        },
        {
            "check": "dead-code",
            "description": "EnumerableSet.contains(EnumerableSet.UintSet,uint256) (@openzeppelin/contracts/utils/EnumerableSet.sol#273-275) is never used and should be removed\n",
            "impact": "Informational",
            "confidence": "Medium",
            "lines": [
                273,
                274,
                275
            ],
            "start_col": 5,
            "end_col": 6
        },
        {
            "check": "dead-code",
            "description": "EnumerableSet.remove(EnumerableSet.AddressSet,address) (@openzeppelin/contracts/utils/EnumerableSet.sol#211-213) is never used and should be removed\n",
            "impact": "Informational",
            "confidence": "Medium",
            "lines": [
                211,
                212,
                213
            ],
            "start_col": 5,
            "end_col": 6
        },
        {
            "check": "dead-code",
            "description": "EnumerableSet.at(EnumerableSet.AddressSet,uint256) (@openzeppelin/contracts/utils/EnumerableSet.sol#239-241) is never used and should be removed\n",
            "impact": "Informational",
            "confidence": "Medium",
            "lines": [
                239,
                240,
                241
            ],
            "start_col": 5,
            "end_col": 6
        },
        {
            "check": "dead-code",
            "description": "EnumerableSet.contains(EnumerableSet.AddressSet,address) (@openzeppelin/contracts/utils/EnumerableSet.sol#218-220) is never used and should be removed\n",
            "impact": "Informational",
            "confidence": "Medium",
            "lines": [
                218,
                219,
                220
            ],
            "start_col": 5,
            "end_col": 6
        },
        {
            "check": "dead-code",
            "description": "EnumerableSet.length(EnumerableSet.AddressSet) (@openzeppelin/contracts/utils/EnumerableSet.sol#225-227) is never used and should be removed\n",
            "impact": "Informational",
            "confidence": "Medium",
            "lines": [
                225,
                226,
                227
            ],
            "start_col": 5,
            "end_col": 6
        },
        {
            "check": "dead-code",
            "description": "EnumerableSet.add(EnumerableSet.Bytes32Set,bytes32) (@openzeppelin/contracts/utils/EnumerableSet.sol#147-149) is never used and should be removed\n",
            "impact": "Informational",
            "confidence": "Medium",
            "lines": [
                147,
                148,
                149
            ],
            "start_col": 5,
            "end_col": 6
        },
        {
            "check": "dead-code",
            "description": "EnumerableSet._add(EnumerableSet.Set,bytes32) (@openzeppelin/contracts/utils/EnumerableSet.sol#54-64) is never used and should be removed\n",
            "impact": "Informational",
            "confidence": "Medium",
            "lines": [
                54,
                55,
                56,
                57,
                58,
                59,
                60,
                61,
                62,
                63,
                64
            ],
            "start_col": 5,
            "end_col": 6
        },
        {
            "check": "dead-code",
            "description": "EnumerableSet.length(EnumerableSet.UintSet) (@openzeppelin/contracts/utils/EnumerableSet.sol#280-282) is never used and should be removed\n",
            "impact": "Informational",
            "confidence": "Medium",
            "lines": [
                280,
                281,
                282
            ],
            "start_col": 5,
            "end_col": 6
        },
        {
            "check": "dead-code",
            "description": "EnumerableSet.at(EnumerableSet.UintSet,uint256) (@openzeppelin/contracts/utils/EnumerableSet.sol#294-296) is never used and should be removed\n",
            "impact": "Informational",
            "confidence": "Medium",
            "lines": [
                294,
                295,
                296
            ],
            "start_col": 5,
            "end_col": 6
        },
        {
            "check": "dead-code",
            "description": "EnumerableSet.add(EnumerableSet.AddressSet,address) (@openzeppelin/contracts/utils/EnumerableSet.sol#201-203) is never used and should be removed\n",
            "impact": "Informational",
            "confidence": "Medium",
            "lines": [
                201,
                202,
                203
            ],
            "start_col": 5,
            "end_col": 6
        },
        {
            "check": "dead-code",
            "description": "EnumerableSet._remove(EnumerableSet.Set,bytes32) (@openzeppelin/contracts/utils/EnumerableSet.sol#72-104) is never used and should be removed\n",
            "impact": "Informational",
            "confidence": "Medium",
            "lines": [
                72,
                73,
                74,
                75,
                76,
                77,
                78,
                79,
                80,
                81,
                82,
                83,
                84,
                85,
                86,
                87,
                88,
                89,
                90,
                91,
                92,
                93,
                94,
                95,
                96,
                97,
                98,
                99,
                100,
                101,
                102,
                103,
                104
            ],
            "start_col": 5,
            "end_col": 6
        },
        {
            "check": "dead-code",
            "description": "EnumerableSet.add(EnumerableSet.UintSet,uint256) (@openzeppelin/contracts/utils/EnumerableSet.sol#256-258) is never used and should be removed\n",
            "impact": "Informational",
            "confidence": "Medium",
            "lines": [
                256,
                257,
                258
            ],
            "start_col": 5,
            "end_col": 6
        },
        {
            "check": "dead-code",
            "description": "EnumerableSet.remove(EnumerableSet.Bytes32Set,bytes32) (@openzeppelin/contracts/utils/EnumerableSet.sol#157-159) is never used and should be removed\n",
            "impact": "Informational",
            "confidence": "Medium",
            "lines": [
                157,
                158,
                159
            ],
            "start_col": 5,
            "end_col": 6
        }
    ],
    "@openzeppelin/contracts/token/ERC20/SafeERC20.sol": [
        {
            "check": "dead-code",
            "description": "SafeERC20.safeIncreaseAllowance(IERC20,address,uint256) (@openzeppelin/contracts/token/ERC20/SafeERC20.sol#48-51) is never used and should be removed\n",
            "impact": "Informational",
            "confidence": "Medium",
            "lines": [
                48,
                49,
                50,
                51
            ],
            "start_col": 5,
            "end_col": 6
        },
        {
            "check": "dead-code",
            "description": "SafeERC20.safeDecreaseAllowance(IERC20,address,uint256) (@openzeppelin/contracts/token/ERC20/SafeERC20.sol#53-56) is never used and should be removed\n",
            "impact": "Informational",
            "confidence": "Medium",
            "lines": [
                53,
                54,
                55,
                56
            ],
            "start_col": 5,
            "end_col": 6
        },
        {
            "check": "dead-code",
            "description": "SafeERC20.safeIncreaseAllowance(IERC20,address,uint256) (@openzeppelin/contracts/token/ERC20/SafeERC20.sol#48-51) is never used and should be removed\n",
            "impact": "Informational",
            "confidence": "Medium",
            "lines": [
                48,
                49,
                50,
                51
            ],
            "start_col": 5,
            "end_col": 6
        },
        {
            "check": "dead-code",
            "description": "SafeERC20.safeApprove(IERC20,address,uint256) (@openzeppelin/contracts/token/ERC20/SafeERC20.sol#37-46) is never used and should be removed\n",
            "impact": "Informational",
            "confidence": "Medium",
            "lines": [
                37,
                38,
                39,
                40,
                41,
                42,
                43,
                44,
                45,
                46
            ],
            "start_col": 5,
            "end_col": 6
        },
        {
            "check": "dead-code",
            "description": "SafeERC20.safeTransferFrom(IERC20,address,address,uint256) (@openzeppelin/contracts/token/ERC20/SafeERC20.sol#26-28) is never used and should be removed\n",
            "impact": "Informational",
            "confidence": "Medium",
            "lines": [
                26,
                27,
                28
            ],
            "start_col": 5,
            "end_col": 6
        },
        {
            "check": "dead-code",
            "description": "SafeERC20.safeDecreaseAllowance(IERC20,address,uint256) (@openzeppelin/contracts/token/ERC20/SafeERC20.sol#53-56) is never used and should be removed\n",
            "impact": "Informational",
            "confidence": "Medium",
            "lines": [
                53,
                54,
                55,
                56
            ],
            "start_col": 5,
            "end_col": 6
        }
    ],
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": [
        {
            "check": "dead-code",
            "description": "ERC20._burn(address,uint256) (@openzeppelin/contracts/token/ERC20/ERC20.sol#249-257) is never used and should be removed\n",
            "impact": "Informational",
            "confidence": "Medium",
            "lines": [
                249,
                250,
                251,
                252,
                253,
                254,
                255,
                256,
                257
            ],
            "start_col": 5,
            "end_col": 6
        },
        {
            "check": "dead-code",
            "description": "ERC20._setupDecimals(uint8) (@openzeppelin/contracts/token/ERC20/ERC20.sol#287-289) is never used and should be removed\n",
            "impact": "Informational",
            "confidence": "Medium",
            "lines": [
                287,
                288,
                289
            ],
            "start_col": 5,
            "end_col": 6
        },
        {
            "check": "dead-code",
            "description": "ERC20._setupDecimals(uint8) (@openzeppelin/contracts/token/ERC20/ERC20.sol#287-289) is never used and should be removed\n",
            "impact": "Informational",
            "confidence": "Medium",
            "lines": [
                287,
                288,
                289
            ],
            "start_col": 5,
            "end_col": 6
        },
        {
            "check": "dead-code",
            "description": "ERC20._burn(address,uint256) (@openzeppelin/contracts/token/ERC20/ERC20.sol#249-257) is never used and should be removed\n",
            "impact": "Informational",
            "confidence": "Medium",
            "lines": [
                249,
                250,
                251,
                252,
                253,
                254,
                255,
                256,
                257
            ],
            "start_col": 5,
            "end_col": 6
        },
        {
            "check": "dead-code",
            "description": "ERC20._setupDecimals(uint8) (@openzeppelin/contracts/token/ERC20/ERC20.sol#287-289) is never used and should be removed\n",
            "impact": "Informational",
            "confidence": "Medium",
            "lines": [
                287,
                288,
                289
            ],
            "start_col": 5,
            "end_col": 6
        }
    ],
    "@openzeppelin/contracts/math/SafeMath.sol": [
        {
            "check": "dead-code",
            "description": "SafeMath.mod(uint256,uint256,string) (@openzeppelin/contracts/math/SafeMath.sol#155-158) is never used and should be removed\n",
            "impact": "Informational",
            "confidence": "Medium",
            "lines": [
                155,
                156,
                157,
                158
            ],
            "start_col": 5,
            "end_col": 6
        },
        {
            "check": "dead-code",
            "description": "SafeMath.mod(uint256,uint256) (@openzeppelin/contracts/math/SafeMath.sol#139-141) is never used and should be removed\n",
            "impact": "Informational",
            "confidence": "Medium",
            "lines": [
                139,
                140,
                141
            ],
            "start_col": 5,
            "end_col": 6
        },
        {
            "check": "dead-code",
            "description": "SafeMath.mod(uint256,uint256,string) (@openzeppelin/contracts/math/SafeMath.sol#155-158) is never used and should be removed\n",
            "impact": "Informational",
            "confidence": "Medium",
            "lines": [
                155,
                156,
                157,
                158
            ],
            "start_col": 5,
            "end_col": 6
        },
        {
            "check": "dead-code",
            "description": "SafeMath.mod(uint256,uint256) (@openzeppelin/contracts/math/SafeMath.sol#139-141) is never used and should be removed\n",
            "impact": "Informational",
            "confidence": "Medium",
            "lines": [
                139,
                140,
                141
            ],
            "start_col": 5,
            "end_col": 6
        },
        {
            "check": "dead-code",
            "description": "SafeMath.mul(uint256,uint256) (@openzeppelin/contracts/math/SafeMath.sol#77-89) is never used and should be removed\n",
            "impact": "Informational",
            "confidence": "Medium",
            "lines": [
                77,
                78,
                79,
                80,
                81,
                82,
                83,
                84,
                85,
                86,
                87,
                88,
                89
            ],
            "start_col": 5,
            "end_col": 6
        },
        {
            "check": "dead-code",
            "description": "SafeMath.sub(uint256,uint256) (@openzeppelin/contracts/math/SafeMath.sol#46-48) is never used and should be removed\n",
            "impact": "Informational",
            "confidence": "Medium",
            "lines": [
                46,
                47,
                48
            ],
            "start_col": 5,
            "end_col": 6
        },
        {
            "check": "dead-code",
            "description": "SafeMath.add(uint256,uint256) (@openzeppelin/contracts/math/SafeMath.sol#29-34) is never used and should be removed\n",
            "impact": "Informational",
            "confidence": "Medium",
            "lines": [
                29,
                30,
                31,
                32,
                33,
                34
            ],
            "start_col": 5,
            "end_col": 6
        },
        {
            "check": "dead-code",
            "description": "SafeMath.sub(uint256,uint256,string) (@openzeppelin/contracts/math/SafeMath.sol#60-65) is never used and should be removed\n",
            "impact": "Informational",
            "confidence": "Medium",
            "lines": [
                60,
                61,
                62,
                63,
                64,
                65
            ],
            "start_col": 5,
            "end_col": 6
        },
        {
            "check": "dead-code",
            "description": "SafeMath.mod(uint256,uint256,string) (@openzeppelin/contracts/math/SafeMath.sol#155-158) is never used and should be removed\n",
            "impact": "Informational",
            "confidence": "Medium",
            "lines": [
                155,
                156,
                157,
                158
            ],
            "start_col": 5,
            "end_col": 6
        },
        {
            "check": "dead-code",
            "description": "SafeMath.div(uint256,uint256,string) (@openzeppelin/contracts/math/SafeMath.sol#119-125) is never used and should be removed\n",
            "impact": "Informational",
            "confidence": "Medium",
            "lines": [
                119,
                120,
                121,
                122,
                123,
                124,
                125
            ],
            "start_col": 5,
            "end_col": 6
        },
        {
            "check": "dead-code",
            "description": "SafeMath.mod(uint256,uint256) (@openzeppelin/contracts/math/SafeMath.sol#139-141) is never used and should be removed\n",
            "impact": "Informational",
            "confidence": "Medium",
            "lines": [
                139,
                140,
                141
            ],
            "start_col": 5,
            "end_col": 6
        },
        {
            "check": "dead-code",
            "description": "SafeMath.div(uint256,uint256) (@openzeppelin/contracts/math/SafeMath.sol#103-105) is never used and should be removed\n",
            "impact": "Informational",
            "confidence": "Medium",
            "lines": [
                103,
                104,
                105
            ],
            "start_col": 5,
            "end_col": 6
        },
        {
            "check": "dead-code",
            "description": "SafeMath.mul(uint256,uint256) (@openzeppelin/contracts/math/SafeMath.sol#77-89) is never used and should be removed\n",
            "impact": "Informational",
            "confidence": "Medium",
            "lines": [
                77,
                78,
                79,
                80,
                81,
                82,
                83,
                84,
                85,
                86,
                87,
                88,
                89
            ],
            "start_col": 5,
            "end_col": 6
        },
        {
            "check": "dead-code",
            "description": "SafeMath.mod(uint256,uint256,string) (@openzeppelin/contracts/math/SafeMath.sol#155-158) is never used and should be removed\n",
            "impact": "Informational",
            "confidence": "Medium",
            "lines": [
                155,
                156,
                157,
                158
            ],
            "start_col": 5,
            "end_col": 6
        },
        {
            "check": "dead-code",
            "description": "SafeMath.div(uint256,uint256,string) (@openzeppelin/contracts/math/SafeMath.sol#119-125) is never used and should be removed\n",
            "impact": "Informational",
            "confidence": "Medium",
            "lines": [
                119,
                120,
                121,
                122,
                123,
                124,
                125
            ],
            "start_col": 5,
            "end_col": 6
        },
        {
            "check": "dead-code",
            "description": "SafeMath.mod(uint256,uint256) (@openzeppelin/contracts/math/SafeMath.sol#139-141) is never used and should be removed\n",
            "impact": "Informational",
            "confidence": "Medium",
            "lines": [
                139,
                140,
                141
            ],
            "start_col": 5,
            "end_col": 6
        },
        {
            "check": "dead-code",
            "description": "SafeMath.div(uint256,uint256) (@openzeppelin/contracts/math/SafeMath.sol#103-105) is never used and should be removed\n",
            "impact": "Informational",
            "confidence": "Medium",
            "lines": [
                103,
                104,
                105
            ],
            "start_col": 5,
            "end_col": 6
        },
        {
            "check": "dead-code",
            "description": "SafeMath.mul(uint256,uint256) (@openzeppelin/contracts/math/SafeMath.sol#77-89) is never used and should be removed\n",
            "impact": "Informational",
            "confidence": "Medium",
            "lines": [
                77,
                78,
                79,
                80,
                81,
                82,
                83,
                84,
                85,
                86,
                87,
                88,
                89
            ],
            "start_col": 5,
            "end_col": 6
        },
        {
            "check": "dead-code",
            "description": "SafeMath.sub(uint256,uint256) (@openzeppelin/contracts/math/SafeMath.sol#46-48) is never used and should be removed\n",
            "impact": "Informational",
            "confidence": "Medium",
            "lines": [
                46,
                47,
                48
            ],
            "start_col": 5,
            "end_col": 6
        },
        {
            "check": "dead-code",
            "description": "SafeMath.sub(uint256,uint256,string) (@openzeppelin/contracts/math/SafeMath.sol#60-65) is never used and should be removed\n",
            "impact": "Informational",
            "confidence": "Medium",
            "lines": [
                60,
                61,
                62,
                63,
                64,
                65
            ],
            "start_col": 5,
            "end_col": 6
        },
        {
            "check": "dead-code",
            "description": "SafeMath.mod(uint256,uint256,string) (@openzeppelin/contracts/math/SafeMath.sol#155-158) is never used and should be removed\n",
            "impact": "Informational",
            "confidence": "Medium",
            "lines": [
                155,
                156,
                157,
                158
            ],
            "start_col": 5,
            "end_col": 6
        },
        {
            "check": "dead-code",
            "description": "SafeMath.div(uint256,uint256,string) (@openzeppelin/contracts/math/SafeMath.sol#119-125) is never used and should be removed\n",
            "impact": "Informational",
            "confidence": "Medium",
            "lines": [
                119,
                120,
                121,
                122,
                123,
                124,
                125
            ],
            "start_col": 5,
            "end_col": 6
        },
        {
            "check": "dead-code",
            "description": "SafeMath.mod(uint256,uint256) (@openzeppelin/contracts/math/SafeMath.sol#139-141) is never used and should be removed\n",
            "impact": "Informational",
            "confidence": "Medium",
            "lines": [
                139,
                140,
                141
            ],
            "start_col": 5,
            "end_col": 6
        },
        {
            "check": "dead-code",
            "description": "SafeMath.div(uint256,uint256) (@openzeppelin/contracts/math/SafeMath.sol#103-105) is never used and should be removed\n",
            "impact": "Informational",
            "confidence": "Medium",
            "lines": [
                103,
                104,
                105
            ],
            "start_col": 5,
            "end_col": 6
        }
    ],
    "@openzeppelin/contracts/GSN/Context.sol": [
        {
            "check": "dead-code",
            "description": "Context._msgData() (@openzeppelin/contracts/GSN/Context.sol#20-23) is never used and should be removed\n",
            "impact": "Informational",
            "confidence": "Medium",
            "lines": [
                20,
                21,
                22,
                23
            ],
            "start_col": 5,
            "end_col": 6
        },
        {
            "check": "redundant-statements",
            "description": "Redundant expression \"this (@openzeppelin/contracts/GSN/Context.sol#21)\" inContext (@openzeppelin/contracts/GSN/Context.sol#15-24)\n",
            "impact": "Informational",
            "confidence": "High",
            "lines": [
                21
            ],
            "start_col": 9,
            "end_col": 13
        },
        {
            "check": "redundant-statements",
            "description": "Redundant expression \"this (@openzeppelin/contracts/GSN/Context.sol#21)\" inContext (@openzeppelin/contracts/GSN/Context.sol#15-24)\n",
            "impact": "Informational",
            "confidence": "High",
            "lines": [
                15,
                16,
                17,
                18,
                19,
                20,
                21,
                22,
                23,
                24
            ],
            "start_col": 1,
            "end_col": 2
        },
        {
            "check": "dead-code",
            "description": "Context._msgData() (@openzeppelin/contracts/GSN/Context.sol#20-23) is never used and should be removed\n",
            "impact": "Informational",
            "confidence": "Medium",
            "lines": [
                20,
                21,
                22,
                23
            ],
            "start_col": 5,
            "end_col": 6
        },
        {
            "check": "redundant-statements",
            "description": "Redundant expression \"this (@openzeppelin/contracts/GSN/Context.sol#21)\" inContext (@openzeppelin/contracts/GSN/Context.sol#15-24)\n",
            "impact": "Informational",
            "confidence": "High",
            "lines": [
                21
            ],
            "start_col": 9,
            "end_col": 13
        },
        {
            "check": "redundant-statements",
            "description": "Redundant expression \"this (@openzeppelin/contracts/GSN/Context.sol#21)\" inContext (@openzeppelin/contracts/GSN/Context.sol#15-24)\n",
            "impact": "Informational",
            "confidence": "High",
            "lines": [
                15,
                16,
                17,
                18,
                19,
                20,
                21,
                22,
                23,
                24
            ],
            "start_col": 1,
            "end_col": 2
        },
        {
            "check": "dead-code",
            "description": "Context._msgData() (@openzeppelin/contracts/GSN/Context.sol#20-23) is never used and should be removed\n",
            "impact": "Informational",
            "confidence": "Medium",
            "lines": [
                20,
                21,
                22,
                23
            ],
            "start_col": 5,
            "end_col": 6
        },
        {
            "check": "redundant-statements",
            "description": "Redundant expression \"this (@openzeppelin/contracts/GSN/Context.sol#21)\" inContext (@openzeppelin/contracts/GSN/Context.sol#15-24)\n",
            "impact": "Informational",
            "confidence": "High",
            "lines": [
                21
            ],
            "start_col": 9,
            "end_col": 13
        },
        {
            "check": "redundant-statements",
            "description": "Redundant expression \"this (@openzeppelin/contracts/GSN/Context.sol#21)\" inContext (@openzeppelin/contracts/GSN/Context.sol#15-24)\n",
            "impact": "Informational",
            "confidence": "High",
            "lines": [
                15,
                16,
                17,
                18,
                19,
                20,
                21,
                22,
                23,
                24
            ],
            "start_col": 1,
            "end_col": 2
        }
    ],
    "contracts/Migrator.sol": [
        {
            "check": "unchecked-transfer",
            "description": "Migrator.migrate(IUniswapV2Pair) (contracts/Migrator.sol#28-46) ignores return value by orig.transferFrom(msg.sender,address(orig),lp) (contracts/Migrator.sol#41)\n",
            "impact": "High",
            "confidence": "Medium",
            "lines": [
                28,
                29,
                30,
                31,
                32,
                33,
                34,
                35,
                36,
                37,
                38,
                39,
                40,
                41,
                42,
                43,
                44,
                45,
                46
            ],
            "start_col": 5,
            "end_col": 6
        },
        {
            "check": "unchecked-transfer",
            "description": "Migrator.migrate(IUniswapV2Pair) (contracts/Migrator.sol#28-46) ignores return value by orig.transferFrom(msg.sender,address(orig),lp) (contracts/Migrator.sol#41)\n",
            "impact": "High",
            "confidence": "Medium",
            "lines": [
                41
            ],
            "start_col": 9,
            "end_col": 57
        },
        {
            "check": "incorrect-equality",
            "description": "Migrator.migrate(IUniswapV2Pair) (contracts/Migrator.sol#28-46) uses a dangerous strict equality:\n\t- lp == 0 (contracts/Migrator.sol#39)\n",
            "impact": "Medium",
            "confidence": "High",
            "lines": [
                28,
                29,
                30,
                31,
                32,
                33,
                34,
                35,
                36,
                37,
                38,
                39,
                40,
                41,
                42,
                43,
                44,
                45,
                46
            ],
            "start_col": 5,
            "end_col": 6
        },
        {
            "check": "incorrect-equality",
            "description": "Migrator.migrate(IUniswapV2Pair) (contracts/Migrator.sol#28-46) uses a dangerous strict equality:\n\t- lp == 0 (contracts/Migrator.sol#39)\n",
            "impact": "Medium",
            "confidence": "High",
            "lines": [
                39
            ],
            "start_col": 13,
            "end_col": 20
        },
        {
            "check": "unused-return",
            "description": "Migrator.migrate(IUniswapV2Pair) (contracts/Migrator.sol#28-46) ignores return value by pair.mint(msg.sender) (contracts/Migrator.sol#43)\n",
            "impact": "Medium",
            "confidence": "Medium",
            "lines": [
                28,
                29,
                30,
                31,
                32,
                33,
                34,
                35,
                36,
                37,
                38,
                39,
                40,
                41,
                42,
                43,
                44,
                45,
                46
            ],
            "start_col": 5,
            "end_col": 6
        },
        {
            "check": "unused-return",
            "description": "Migrator.migrate(IUniswapV2Pair) (contracts/Migrator.sol#28-46) ignores return value by pair.mint(msg.sender) (contracts/Migrator.sol#43)\n",
            "impact": "Medium",
            "confidence": "Medium",
            "lines": [
                43
            ],
            "start_col": 9,
            "end_col": 30
        },
        {
            "check": "unused-return",
            "description": "Migrator.migrate(IUniswapV2Pair) (contracts/Migrator.sol#28-46) ignores return value by orig.burn(address(pair)) (contracts/Migrator.sol#42)\n",
            "impact": "Medium",
            "confidence": "Medium",
            "lines": [
                28,
                29,
                30,
                31,
                32,
                33,
                34,
                35,
                36,
                37,
                38,
                39,
                40,
                41,
                42,
                43,
                44,
                45,
                46
            ],
            "start_col": 5,
            "end_col": 6
        },
        {
            "check": "unused-return",
            "description": "Migrator.migrate(IUniswapV2Pair) (contracts/Migrator.sol#28-46) ignores return value by orig.burn(address(pair)) (contracts/Migrator.sol#42)\n",
            "impact": "Medium",
            "confidence": "Medium",
            "lines": [
                42
            ],
            "start_col": 9,
            "end_col": 33
        },
        {
            "check": "missing-zero-check",
            "description": "Migrator.constructor(address,address,IUniswapV2Factory,uint256)._oldFactory (contracts/Migrator.sol#18) lacks a zero-check on :\n\t\t- oldFactory = _oldFactory (contracts/Migrator.sol#23)\n",
            "impact": "Low",
            "confidence": "Medium",
            "lines": [
                18
            ],
            "start_col": 9,
            "end_col": 28
        },
        {
            "check": "missing-zero-check",
            "description": "Migrator.constructor(address,address,IUniswapV2Factory,uint256)._oldFactory (contracts/Migrator.sol#18) lacks a zero-check on :\n\t\t- oldFactory = _oldFactory (contracts/Migrator.sol#23)\n",
            "impact": "Low",
            "confidence": "Medium",
            "lines": [
                23
            ],
            "start_col": 9,
            "end_col": 33
        },
        {
            "check": "missing-zero-check",
            "description": "Migrator.constructor(address,address,IUniswapV2Factory,uint256)._chef (contracts/Migrator.sol#17) lacks a zero-check on :\n\t\t- chef = _chef (contracts/Migrator.sol#22)\n",
            "impact": "Low",
            "confidence": "Medium",
            "lines": [
                17
            ],
            "start_col": 9,
            "end_col": 22
        },
        {
            "check": "missing-zero-check",
            "description": "Migrator.constructor(address,address,IUniswapV2Factory,uint256)._chef (contracts/Migrator.sol#17) lacks a zero-check on :\n\t\t- chef = _chef (contracts/Migrator.sol#22)\n",
            "impact": "Low",
            "confidence": "Medium",
            "lines": [
                22
            ],
            "start_col": 9,
            "end_col": 21
        },
        {
            "check": "reentrancy-benign",
            "description": "Reentrancy in Migrator.migrate(IUniswapV2Pair) (contracts/Migrator.sol#28-46):\n\tExternal calls:\n\t- pair = IUniswapV2Pair(factory.createPair(token0,token1)) (contracts/Migrator.sol#36)\n\tState variables written after the call(s):\n\t- desiredLiquidity = lp (contracts/Migrator.sol#40)\n",
            "impact": "Low",
            "confidence": "Medium",
            "lines": [
                28,
                29,
                30,
                31,
                32,
                33,
                34,
                35,
                36,
                37,
                38,
                39,
                40,
                41,
                42,
                43,
                44,
                45,
                46
            ],
            "start_col": 5,
            "end_col": 6
        },
        {
            "check": "reentrancy-benign",
            "description": "Reentrancy in Migrator.migrate(IUniswapV2Pair) (contracts/Migrator.sol#28-46):\n\tExternal calls:\n\t- pair = IUniswapV2Pair(factory.createPair(token0,token1)) (contracts/Migrator.sol#36)\n\tState variables written after the call(s):\n\t- desiredLiquidity = lp (contracts/Migrator.sol#40)\n",
            "impact": "Low",
            "confidence": "Medium",
            "lines": [
                36
            ],
            "start_col": 13,
            "end_col": 70
        },
        {
            "check": "reentrancy-benign",
            "description": "Reentrancy in Migrator.migrate(IUniswapV2Pair) (contracts/Migrator.sol#28-46):\n\tExternal calls:\n\t- pair = IUniswapV2Pair(factory.createPair(token0,token1)) (contracts/Migrator.sol#36)\n\tState variables written after the call(s):\n\t- desiredLiquidity = lp (contracts/Migrator.sol#40)\n",
            "impact": "Low",
            "confidence": "Medium",
            "lines": [
                36
            ],
            "start_col": 13,
            "end_col": 70
        },
        {
            "check": "reentrancy-benign",
            "description": "Reentrancy in Migrator.migrate(IUniswapV2Pair) (contracts/Migrator.sol#28-46):\n\tExternal calls:\n\t- pair = IUniswapV2Pair(factory.createPair(token0,token1)) (contracts/Migrator.sol#36)\n\tState variables written after the call(s):\n\t- desiredLiquidity = lp (contracts/Migrator.sol#40)\n",
            "impact": "Low",
            "confidence": "Medium",
            "lines": [
                40
            ],
            "start_col": 9,
            "end_col": 30
        },
        {
            "check": "reentrancy-benign",
            "description": "Reentrancy in Migrator.migrate(IUniswapV2Pair) (contracts/Migrator.sol#28-46):\n\tExternal calls:\n\t- pair = IUniswapV2Pair(factory.createPair(token0,token1)) (contracts/Migrator.sol#36)\n\t- orig.transferFrom(msg.sender,address(orig),lp) (contracts/Migrator.sol#41)\n\t- orig.burn(address(pair)) (contracts/Migrator.sol#42)\n\t- pair.mint(msg.sender) (contracts/Migrator.sol#43)\n\tState variables written after the call(s):\n\t- desiredLiquidity = uint256(- 1) (contracts/Migrator.sol#44)\n",
            "impact": "Low",
            "confidence": "Medium",
            "lines": [
                28,
                29,
                30,
                31,
                32,
                33,
                34,
                35,
                36,
                37,
                38,
                39,
                40,
                41,
                42,
                43,
                44,
                45,
                46
            ],
            "start_col": 5,
            "end_col": 6
        },
        {
            "check": "reentrancy-benign",
            "description": "Reentrancy in Migrator.migrate(IUniswapV2Pair) (contracts/Migrator.sol#28-46):\n\tExternal calls:\n\t- pair = IUniswapV2Pair(factory.createPair(token0,token1)) (contracts/Migrator.sol#36)\n\t- orig.transferFrom(msg.sender,address(orig),lp) (contracts/Migrator.sol#41)\n\t- orig.burn(address(pair)) (contracts/Migrator.sol#42)\n\t- pair.mint(msg.sender) (contracts/Migrator.sol#43)\n\tState variables written after the call(s):\n\t- desiredLiquidity = uint256(- 1) (contracts/Migrator.sol#44)\n",
            "impact": "Low",
            "confidence": "Medium",
            "lines": [
                36
            ],
            "start_col": 13,
            "end_col": 70
        },
        {
            "check": "reentrancy-benign",
            "description": "Reentrancy in Migrator.migrate(IUniswapV2Pair) (contracts/Migrator.sol#28-46):\n\tExternal calls:\n\t- pair = IUniswapV2Pair(factory.createPair(token0,token1)) (contracts/Migrator.sol#36)\n\t- orig.transferFrom(msg.sender,address(orig),lp) (contracts/Migrator.sol#41)\n\t- orig.burn(address(pair)) (contracts/Migrator.sol#42)\n\t- pair.mint(msg.sender) (contracts/Migrator.sol#43)\n\tState variables written after the call(s):\n\t- desiredLiquidity = uint256(- 1) (contracts/Migrator.sol#44)\n",
            "impact": "Low",
            "confidence": "Medium",
            "lines": [
                41
            ],
            "start_col": 9,
            "end_col": 57
        },
        {
            "check": "reentrancy-benign",
            "description": "Reentrancy in Migrator.migrate(IUniswapV2Pair) (contracts/Migrator.sol#28-46):\n\tExternal calls:\n\t- pair = IUniswapV2Pair(factory.createPair(token0,token1)) (contracts/Migrator.sol#36)\n\t- orig.transferFrom(msg.sender,address(orig),lp) (contracts/Migrator.sol#41)\n\t- orig.burn(address(pair)) (contracts/Migrator.sol#42)\n\t- pair.mint(msg.sender) (contracts/Migrator.sol#43)\n\tState variables written after the call(s):\n\t- desiredLiquidity = uint256(- 1) (contracts/Migrator.sol#44)\n",
            "impact": "Low",
            "confidence": "Medium",
            "lines": [
                42
            ],
            "start_col": 9,
            "end_col": 33
        },
        {
            "check": "reentrancy-benign",
            "description": "Reentrancy in Migrator.migrate(IUniswapV2Pair) (contracts/Migrator.sol#28-46):\n\tExternal calls:\n\t- pair = IUniswapV2Pair(factory.createPair(token0,token1)) (contracts/Migrator.sol#36)\n\t- orig.transferFrom(msg.sender,address(orig),lp) (contracts/Migrator.sol#41)\n\t- orig.burn(address(pair)) (contracts/Migrator.sol#42)\n\t- pair.mint(msg.sender) (contracts/Migrator.sol#43)\n\tState variables written after the call(s):\n\t- desiredLiquidity = uint256(- 1) (contracts/Migrator.sol#44)\n",
            "impact": "Low",
            "confidence": "Medium",
            "lines": [
                43
            ],
            "start_col": 9,
            "end_col": 30
        },
        {
            "check": "reentrancy-benign",
            "description": "Reentrancy in Migrator.migrate(IUniswapV2Pair) (contracts/Migrator.sol#28-46):\n\tExternal calls:\n\t- pair = IUniswapV2Pair(factory.createPair(token0,token1)) (contracts/Migrator.sol#36)\n\t- orig.transferFrom(msg.sender,address(orig),lp) (contracts/Migrator.sol#41)\n\t- orig.burn(address(pair)) (contracts/Migrator.sol#42)\n\t- pair.mint(msg.sender) (contracts/Migrator.sol#43)\n\tState variables written after the call(s):\n\t- desiredLiquidity = uint256(- 1) (contracts/Migrator.sol#44)\n",
            "impact": "Low",
            "confidence": "Medium",
            "lines": [
                36
            ],
            "start_col": 13,
            "end_col": 70
        },
        {
            "check": "reentrancy-benign",
            "description": "Reentrancy in Migrator.migrate(IUniswapV2Pair) (contracts/Migrator.sol#28-46):\n\tExternal calls:\n\t- pair = IUniswapV2Pair(factory.createPair(token0,token1)) (contracts/Migrator.sol#36)\n\t- orig.transferFrom(msg.sender,address(orig),lp) (contracts/Migrator.sol#41)\n\t- orig.burn(address(pair)) (contracts/Migrator.sol#42)\n\t- pair.mint(msg.sender) (contracts/Migrator.sol#43)\n\tState variables written after the call(s):\n\t- desiredLiquidity = uint256(- 1) (contracts/Migrator.sol#44)\n",
            "impact": "Low",
            "confidence": "Medium",
            "lines": [
                41
            ],
            "start_col": 9,
            "end_col": 57
        },
        {
            "check": "reentrancy-benign",
            "description": "Reentrancy in Migrator.migrate(IUniswapV2Pair) (contracts/Migrator.sol#28-46):\n\tExternal calls:\n\t- pair = IUniswapV2Pair(factory.createPair(token0,token1)) (contracts/Migrator.sol#36)\n\t- orig.transferFrom(msg.sender,address(orig),lp) (contracts/Migrator.sol#41)\n\t- orig.burn(address(pair)) (contracts/Migrator.sol#42)\n\t- pair.mint(msg.sender) (contracts/Migrator.sol#43)\n\tState variables written after the call(s):\n\t- desiredLiquidity = uint256(- 1) (contracts/Migrator.sol#44)\n",
            "impact": "Low",
            "confidence": "Medium",
            "lines": [
                42
            ],
            "start_col": 9,
            "end_col": 33
        },
        {
            "check": "reentrancy-benign",
            "description": "Reentrancy in Migrator.migrate(IUniswapV2Pair) (contracts/Migrator.sol#28-46):\n\tExternal calls:\n\t- pair = IUniswapV2Pair(factory.createPair(token0,token1)) (contracts/Migrator.sol#36)\n\t- orig.transferFrom(msg.sender,address(orig),lp) (contracts/Migrator.sol#41)\n\t- orig.burn(address(pair)) (contracts/Migrator.sol#42)\n\t- pair.mint(msg.sender) (contracts/Migrator.sol#43)\n\tState variables written after the call(s):\n\t- desiredLiquidity = uint256(- 1) (contracts/Migrator.sol#44)\n",
            "impact": "Low",
            "confidence": "Medium",
            "lines": [
                43
            ],
            "start_col": 9,
            "end_col": 30
        },
        {
            "check": "reentrancy-benign",
            "description": "Reentrancy in Migrator.migrate(IUniswapV2Pair) (contracts/Migrator.sol#28-46):\n\tExternal calls:\n\t- pair = IUniswapV2Pair(factory.createPair(token0,token1)) (contracts/Migrator.sol#36)\n\t- orig.transferFrom(msg.sender,address(orig),lp) (contracts/Migrator.sol#41)\n\t- orig.burn(address(pair)) (contracts/Migrator.sol#42)\n\t- pair.mint(msg.sender) (contracts/Migrator.sol#43)\n\tState variables written after the call(s):\n\t- desiredLiquidity = uint256(- 1) (contracts/Migrator.sol#44)\n",
            "impact": "Low",
            "confidence": "Medium",
            "lines": [
                44
            ],
            "start_col": 9,
            "end_col": 39
        },
        {
            "check": "immutable-states",
            "description": "Migrator.oldFactory (contracts/Migrator.sol#11) should be immutable \n",
            "impact": "Optimization",
            "confidence": "High",
            "lines": [
                11
            ],
            "start_col": 5,
            "end_col": 30
        },
        {
            "check": "immutable-states",
            "description": "Migrator.notBeforeBlock (contracts/Migrator.sol#13) should be immutable \n",
            "impact": "Optimization",
            "confidence": "High",
            "lines": [
                13
            ],
            "start_col": 5,
            "end_col": 34
        },
        {
            "check": "immutable-states",
            "description": "Migrator.factory (contracts/Migrator.sol#12) should be immutable \n",
            "impact": "Optimization",
            "confidence": "High",
            "lines": [
                12
            ],
            "start_col": 5,
            "end_col": 37
        },
        {
            "check": "immutable-states",
            "description": "Migrator.chef (contracts/Migrator.sol#10) should be immutable \n",
            "impact": "Optimization",
            "confidence": "High",
            "lines": [
                10
            ],
            "start_col": 5,
            "end_col": 24
        }
    ],
    "contracts/uniswapv2/interfaces/IUniswapV2Pair.sol": [
        {
            "check": "naming-convention",
            "description": "Function IUniswapV2Pair.PERMIT_TYPEHASH() (contracts/uniswapv2/interfaces/IUniswapV2Pair.sol#21) is not in mixedCase\n",
            "impact": "Informational",
            "confidence": "High",
            "lines": [
                21
            ],
            "start_col": 5,
            "end_col": 64
        },
        {
            "check": "naming-convention",
            "description": "Function IUniswapV2Pair.MINIMUM_LIQUIDITY() (contracts/uniswapv2/interfaces/IUniswapV2Pair.sol#38) is not in mixedCase\n",
            "impact": "Informational",
            "confidence": "High",
            "lines": [
                38
            ],
            "start_col": 5,
            "end_col": 63
        },
        {
            "check": "naming-convention",
            "description": "Function IUniswapV2Pair.DOMAIN_SEPARATOR() (contracts/uniswapv2/interfaces/IUniswapV2Pair.sol#20) is not in mixedCase\n",
            "impact": "Informational",
            "confidence": "High",
            "lines": [
                20
            ],
            "start_col": 5,
            "end_col": 65
        },
        {
            "check": "naming-convention",
            "description": "Function IUniswapV2Pair.PERMIT_TYPEHASH() (contracts/uniswapv2/interfaces/IUniswapV2Pair.sol#21) is not in mixedCase\n",
            "impact": "Informational",
            "confidence": "High",
            "lines": [
                21
            ],
            "start_col": 5,
            "end_col": 64
        },
        {
            "check": "naming-convention",
            "description": "Function IUniswapV2Pair.MINIMUM_LIQUIDITY() (contracts/uniswapv2/interfaces/IUniswapV2Pair.sol#38) is not in mixedCase\n",
            "impact": "Informational",
            "confidence": "High",
            "lines": [
                38
            ],
            "start_col": 5,
            "end_col": 63
        },
        {
            "check": "naming-convention",
            "description": "Function IUniswapV2Pair.DOMAIN_SEPARATOR() (contracts/uniswapv2/interfaces/IUniswapV2Pair.sol#20) is not in mixedCase\n",
            "impact": "Informational",
            "confidence": "High",
            "lines": [
                20
            ],
            "start_col": 5,
            "end_col": 65
        },
        {
            "check": "naming-convention",
            "description": "Function IUniswapV2Pair.PERMIT_TYPEHASH() (contracts/uniswapv2/interfaces/IUniswapV2Pair.sol#21) is not in mixedCase\n",
            "impact": "Informational",
            "confidence": "High",
            "lines": [
                21
            ],
            "start_col": 5,
            "end_col": 64
        },
        {
            "check": "naming-convention",
            "description": "Function IUniswapV2Pair.MINIMUM_LIQUIDITY() (contracts/uniswapv2/interfaces/IUniswapV2Pair.sol#38) is not in mixedCase\n",
            "impact": "Informational",
            "confidence": "High",
            "lines": [
                38
            ],
            "start_col": 5,
            "end_col": 63
        },
        {
            "check": "naming-convention",
            "description": "Function IUniswapV2Pair.DOMAIN_SEPARATOR() (contracts/uniswapv2/interfaces/IUniswapV2Pair.sol#20) is not in mixedCase\n",
            "impact": "Informational",
            "confidence": "High",
            "lines": [
                20
            ],
            "start_col": 5,
            "end_col": 65
        }
    ],
    "contracts/SushiBar.sol": [
        {
            "check": "unchecked-transfer",
            "description": "SushiBar.enter(uint256) (contracts/SushiBar.sol#23-39) ignores return value by sushi.transferFrom(msg.sender,address(this),_amount) (contracts/SushiBar.sol#38)\n",
            "impact": "High",
            "confidence": "Medium",
            "lines": [
                23,
                24,
                25,
                26,
                27,
                28,
                29,
                30,
                31,
                32,
                33,
                34,
                35,
                36,
                37,
                38,
                39
            ],
            "start_col": 5,
            "end_col": 6
        },
        {
            "check": "unchecked-transfer",
            "description": "SushiBar.enter(uint256) (contracts/SushiBar.sol#23-39) ignores return value by sushi.transferFrom(msg.sender,address(this),_amount) (contracts/SushiBar.sol#38)\n",
            "impact": "High",
            "confidence": "Medium",
            "lines": [
                38
            ],
            "start_col": 9,
            "end_col": 63
        },
        {
            "check": "unchecked-transfer",
            "description": "SushiBar.leave(uint256) (contracts/SushiBar.sol#43-50) ignores return value by sushi.transfer(msg.sender,what) (contracts/SushiBar.sol#49)\n",
            "impact": "High",
            "confidence": "Medium",
            "lines": [
                43,
                44,
                45,
                46,
                47,
                48,
                49,
                50
            ],
            "start_col": 5,
            "end_col": 6
        },
        {
            "check": "unchecked-transfer",
            "description": "SushiBar.leave(uint256) (contracts/SushiBar.sol#43-50) ignores return value by sushi.transfer(msg.sender,what) (contracts/SushiBar.sol#49)\n",
            "impact": "High",
            "confidence": "Medium",
            "lines": [
                49
            ],
            "start_col": 9,
            "end_col": 41
        },
        {
            "check": "incorrect-equality",
            "description": "SushiBar.enter(uint256) (contracts/SushiBar.sol#23-39) uses a dangerous strict equality:\n\t- totalShares == 0 || totalSushi == 0 (contracts/SushiBar.sol#29)\n",
            "impact": "Medium",
            "confidence": "High",
            "lines": [
                23,
                24,
                25,
                26,
                27,
                28,
                29,
                30,
                31,
                32,
                33,
                34,
                35,
                36,
                37,
                38,
                39
            ],
            "start_col": 5,
            "end_col": 6
        },
        {
            "check": "incorrect-equality",
            "description": "SushiBar.enter(uint256) (contracts/SushiBar.sol#23-39) uses a dangerous strict equality:\n\t- totalShares == 0 || totalSushi == 0 (contracts/SushiBar.sol#29)\n",
            "impact": "Medium",
            "confidence": "High",
            "lines": [
                29
            ],
            "start_col": 13,
            "end_col": 48
        },
        {
            "check": "naming-convention",
            "description": "Parameter SushiBar.leave(uint256)._share (contracts/SushiBar.sol#43) is not in mixedCase\n",
            "impact": "Informational",
            "confidence": "High",
            "lines": [
                43
            ],
            "start_col": 20,
            "end_col": 34
        },
        {
            "check": "naming-convention",
            "description": "Parameter SushiBar.enter(uint256)._amount (contracts/SushiBar.sol#23) is not in mixedCase\n",
            "impact": "Informational",
            "confidence": "High",
            "lines": [
                23
            ],
            "start_col": 20,
            "end_col": 35
        },
        {
            "check": "immutable-states",
            "description": "SushiBar.sushi (contracts/SushiBar.sol#14) should be immutable \n",
            "impact": "Optimization",
            "confidence": "High",
            "lines": [
                14
            ],
            "start_col": 5,
            "end_col": 24
        }
    ],
    "contracts/SushiMaker.sol": [
        {
            "check": "unused-return",
            "description": "SushiMaker._swap(address,address,uint256,address) (contracts/SushiMaker.sol#170-191) ignores return value by (reserve0,reserve1,None) = pair.getReserves() (contracts/SushiMaker.sol#178)\n",
            "impact": "Medium",
            "confidence": "Medium",
            "lines": [
                170,
                171,
                172,
                173,
                174,
                175,
                176,
                177,
                178,
                179,
                180,
                181,
                182,
                183,
                184,
                185,
                186,
                187,
                188,
                189,
                190,
                191
            ],
            "start_col": 5,
            "end_col": 6
        },
        {
            "check": "unused-return",
            "description": "SushiMaker._swap(address,address,uint256,address) (contracts/SushiMaker.sol#170-191) ignores return value by (reserve0,reserve1,None) = pair.getReserves() (contracts/SushiMaker.sol#178)\n",
            "impact": "Medium",
            "confidence": "Medium",
            "lines": [
                178
            ],
            "start_col": 9,
            "end_col": 67
        },
        {
            "check": "missing-zero-check",
            "description": "SushiMaker.constructor(address,address,address,address)._weth (contracts/SushiMaker.sol#43) lacks a zero-check on :\n\t\t- weth = _weth (contracts/SushiMaker.sol#47)\n",
            "impact": "Low",
            "confidence": "Medium",
            "lines": [
                43
            ],
            "start_col": 66,
            "end_col": 79
        },
        {
            "check": "missing-zero-check",
            "description": "SushiMaker.constructor(address,address,address,address)._weth (contracts/SushiMaker.sol#43) lacks a zero-check on :\n\t\t- weth = _weth (contracts/SushiMaker.sol#47)\n",
            "impact": "Low",
            "confidence": "Medium",
            "lines": [
                47
            ],
            "start_col": 8,
            "end_col": 20
        },
        {
            "check": "missing-zero-check",
            "description": "SushiMaker.constructor(address,address,address,address)._sushi (contracts/SushiMaker.sol#43) lacks a zero-check on :\n\t\t- sushi = _sushi (contracts/SushiMaker.sol#46)\n",
            "impact": "Low",
            "confidence": "Medium",
            "lines": [
                43
            ],
            "start_col": 50,
            "end_col": 64
        },
        {
            "check": "missing-zero-check",
            "description": "SushiMaker.constructor(address,address,address,address)._sushi (contracts/SushiMaker.sol#43) lacks a zero-check on :\n\t\t- sushi = _sushi (contracts/SushiMaker.sol#46)\n",
            "impact": "Low",
            "confidence": "Medium",
            "lines": [
                46
            ],
            "start_col": 8,
            "end_col": 22
        },
        {
            "check": "missing-zero-check",
            "description": "SushiMaker.constructor(address,address,address,address)._bar (contracts/SushiMaker.sol#43) lacks a zero-check on :\n\t\t- bar = _bar (contracts/SushiMaker.sol#45)\n",
            "impact": "Low",
            "confidence": "Medium",
            "lines": [
                43
            ],
            "start_col": 36,
            "end_col": 48
        },
        {
            "check": "missing-zero-check",
            "description": "SushiMaker.constructor(address,address,address,address)._bar (contracts/SushiMaker.sol#43) lacks a zero-check on :\n\t\t- bar = _bar (contracts/SushiMaker.sol#45)\n",
            "impact": "Low",
            "confidence": "Medium",
            "lines": [
                45
            ],
            "start_col": 8,
            "end_col": 18
        },
        {
            "check": "calls-loop",
            "description": "SushiMaker._swap(address,address,uint256,address) (contracts/SushiMaker.sol#170-191) has external calls inside a loop: pair.swap(amountOut,0,to,new bytes(0)) (contracts/SushiMaker.sol#188)\n",
            "impact": "Low",
            "confidence": "Medium",
            "lines": [
                170,
                171,
                172,
                173,
                174,
                175,
                176,
                177,
                178,
                179,
                180,
                181,
                182,
                183,
                184,
                185,
                186,
                187,
                188,
                189,
                190,
                191
            ],
            "start_col": 5,
            "end_col": 6
        },
        {
            "check": "calls-loop",
            "description": "SushiMaker._swap(address,address,uint256,address) (contracts/SushiMaker.sol#170-191) has external calls inside a loop: pair.swap(amountOut,0,to,new bytes(0)) (contracts/SushiMaker.sol#188)\n",
            "impact": "Low",
            "confidence": "Medium",
            "lines": [
                188
            ],
            "start_col": 13,
            "end_col": 54
        },
        {
            "check": "calls-loop",
            "description": "SushiMaker._swap(address,address,uint256,address) (contracts/SushiMaker.sol#170-191) has external calls inside a loop: fromToken == pair.token0() (contracts/SushiMaker.sol#180)\n",
            "impact": "Low",
            "confidence": "Medium",
            "lines": [
                170,
                171,
                172,
                173,
                174,
                175,
                176,
                177,
                178,
                179,
                180,
                181,
                182,
                183,
                184,
                185,
                186,
                187,
                188,
                189,
                190,
                191
            ],
            "start_col": 5,
            "end_col": 6
        },
        {
            "check": "calls-loop",
            "description": "SushiMaker._swap(address,address,uint256,address) (contracts/SushiMaker.sol#170-191) has external calls inside a loop: fromToken == pair.token0() (contracts/SushiMaker.sol#180)\n",
            "impact": "Low",
            "confidence": "Medium",
            "lines": [
                180
            ],
            "start_col": 13,
            "end_col": 39
        },
        {
            "check": "calls-loop",
            "description": "SushiMaker._convert(address,address) (contracts/SushiMaker.sol#102-116) has external calls inside a loop: token0 != pair.token0() (contracts/SushiMaker.sol#112)\n",
            "impact": "Low",
            "confidence": "Medium",
            "lines": [
                102,
                103,
                104,
                105,
                106,
                107,
                108,
                109,
                110,
                111,
                112,
                113,
                114,
                115,
                116
            ],
            "start_col": 5,
            "end_col": 6
        },
        {
            "check": "calls-loop",
            "description": "SushiMaker._convert(address,address) (contracts/SushiMaker.sol#102-116) has external calls inside a loop: token0 != pair.token0() (contracts/SushiMaker.sol#112)\n",
            "impact": "Low",
            "confidence": "Medium",
            "lines": [
                112
            ],
            "start_col": 13,
            "end_col": 36
        },
        {
            "check": "calls-loop",
            "description": "SushiMaker._swap(address,address,uint256,address) (contracts/SushiMaker.sol#170-191) has external calls inside a loop: (reserve0,reserve1,None) = pair.getReserves() (contracts/SushiMaker.sol#178)\n",
            "impact": "Low",
            "confidence": "Medium",
            "lines": [
                170,
                171,
                172,
                173,
                174,
                175,
                176,
                177,
                178,
                179,
                180,
                181,
                182,
                183,
                184,
                185,
                186,
                187,
                188,
                189,
                190,
                191
            ],
            "start_col": 5,
            "end_col": 6
        },
        {
            "check": "calls-loop",
            "description": "SushiMaker._swap(address,address,uint256,address) (contracts/SushiMaker.sol#170-191) has external calls inside a loop: (reserve0,reserve1,None) = pair.getReserves() (contracts/SushiMaker.sol#178)\n",
            "impact": "Low",
            "confidence": "Medium",
            "lines": [
                178
            ],
            "start_col": 9,
            "end_col": 67
        },
        {
            "check": "calls-loop",
            "description": "SushiMaker._swap(address,address,uint256,address) (contracts/SushiMaker.sol#170-191) has external calls inside a loop: pair.swap(0,amountOut,to,new bytes(0)) (contracts/SushiMaker.sol#183)\n",
            "impact": "Low",
            "confidence": "Medium",
            "lines": [
                170,
                171,
                172,
                173,
                174,
                175,
                176,
                177,
                178,
                179,
                180,
                181,
                182,
                183,
                184,
                185,
                186,
                187,
                188,
                189,
                190,
                191
            ],
            "start_col": 5,
            "end_col": 6
        },
        {
            "check": "calls-loop",
            "description": "SushiMaker._swap(address,address,uint256,address) (contracts/SushiMaker.sol#170-191) has external calls inside a loop: pair.swap(0,amountOut,to,new bytes(0)) (contracts/SushiMaker.sol#183)\n",
            "impact": "Low",
            "confidence": "Medium",
            "lines": [
                183
            ],
            "start_col": 13,
            "end_col": 54
        },
        {
            "check": "calls-loop",
            "description": "SushiMaker._convert(address,address) (contracts/SushiMaker.sol#102-116) has external calls inside a loop: pair = IUniswapV2Pair(factory.getPair(token0,token1)) (contracts/SushiMaker.sol#105)\n",
            "impact": "Low",
            "confidence": "Medium",
            "lines": [
                102,
                103,
                104,
                105,
                106,
                107,
                108,
                109,
                110,
                111,
                112,
                113,
                114,
                115,
                116
            ],
            "start_col": 5,
            "end_col": 6
        },
        {
            "check": "calls-loop",
            "description": "SushiMaker._convert(address,address) (contracts/SushiMaker.sol#102-116) has external calls inside a loop: pair = IUniswapV2Pair(factory.getPair(token0,token1)) (contracts/SushiMaker.sol#105)\n",
            "impact": "Low",
            "confidence": "Medium",
            "lines": [
                105
            ],
            "start_col": 9,
            "end_col": 78
        },
        {
            "check": "calls-loop",
            "description": "SushiMaker._convert(address,address) (contracts/SushiMaker.sol#102-116) has external calls inside a loop: IERC20(address(pair)).safeTransfer(address(pair),pair.balanceOf(address(this))) (contracts/SushiMaker.sol#109)\n",
            "impact": "Low",
            "confidence": "Medium",
            "lines": [
                102,
                103,
                104,
                105,
                106,
                107,
                108,
                109,
                110,
                111,
                112,
                113,
                114,
                115,
                116
            ],
            "start_col": 5,
            "end_col": 6
        },
        {
            "check": "calls-loop",
            "description": "SushiMaker._convert(address,address) (contracts/SushiMaker.sol#102-116) has external calls inside a loop: IERC20(address(pair)).safeTransfer(address(pair),pair.balanceOf(address(this))) (contracts/SushiMaker.sol#109)\n",
            "impact": "Low",
            "confidence": "Medium",
            "lines": [
                109
            ],
            "start_col": 9,
            "end_col": 89
        },
        {
            "check": "calls-loop",
            "description": "SushiMaker._swap(address,address,uint256,address) (contracts/SushiMaker.sol#170-191) has external calls inside a loop: pair = IUniswapV2Pair(factory.getPair(fromToken,toToken)) (contracts/SushiMaker.sol#173)\n",
            "impact": "Low",
            "confidence": "Medium",
            "lines": [
                170,
                171,
                172,
                173,
                174,
                175,
                176,
                177,
                178,
                179,
                180,
                181,
                182,
                183,
                184,
                185,
                186,
                187,
                188,
                189,
                190,
                191
            ],
            "start_col": 5,
            "end_col": 6
        },
        {
            "check": "calls-loop",
            "description": "SushiMaker._swap(address,address,uint256,address) (contracts/SushiMaker.sol#170-191) has external calls inside a loop: pair = IUniswapV2Pair(factory.getPair(fromToken,toToken)) (contracts/SushiMaker.sol#173)\n",
            "impact": "Low",
            "confidence": "Medium",
            "lines": [
                173
            ],
            "start_col": 9,
            "end_col": 82
        },
        {
            "check": "calls-loop",
            "description": "SushiMaker._convert(address,address) (contracts/SushiMaker.sol#102-116) has external calls inside a loop: (amount0,amount1) = pair.burn(address(this)) (contracts/SushiMaker.sol#111)\n",
            "impact": "Low",
            "confidence": "Medium",
            "lines": [
                102,
                103,
                104,
                105,
                106,
                107,
                108,
                109,
                110,
                111,
                112,
                113,
                114,
                115,
                116
            ],
            "start_col": 5,
            "end_col": 6
        },
        {
            "check": "calls-loop",
            "description": "SushiMaker._convert(address,address) (contracts/SushiMaker.sol#102-116) has external calls inside a loop: (amount0,amount1) = pair.burn(address(this)) (contracts/SushiMaker.sol#111)\n",
            "impact": "Low",
            "confidence": "Medium",
            "lines": [
                111
            ],
            "start_col": 9,
            "end_col": 70
        },
        {
            "check": "reentrancy-events",
            "description": "Reentrancy in SushiMaker._convert(address,address) (contracts/SushiMaker.sol#102-116):\n\tExternal calls:\n\t- IERC20(address(pair)).safeTransfer(address(pair),pair.balanceOf(address(this))) (contracts/SushiMaker.sol#109)\n\t- (amount0,amount1) = pair.burn(address(this)) (contracts/SushiMaker.sol#111)\n\t- LogConvert(msg.sender,token0,token1,amount0,amount1,_convertStep(token0,token1,amount0,amount1)) (contracts/SushiMaker.sol#115)\n\t\t- (success,data) = address(token).call(abi.encodeWithSelector(0xa9059cbb,to,amount)) (contracts/libraries/BoringERC20.sol#23)\n\t\t- IERC20(sushi).safeTransfer(bar,amount) (contracts/SushiMaker.sol#126)\n\t\t- IERC20(fromToken).safeTransfer(address(pair),amountIn) (contracts/SushiMaker.sol#182)\n\t\t- pair.swap(0,amountOut,to,new bytes(0)) (contracts/SushiMaker.sol#183)\n\t\t- IERC20(fromToken).safeTransfer(address(pair),amountIn) (contracts/SushiMaker.sol#187)\n\t\t- pair.swap(amountOut,0,to,new bytes(0)) (contracts/SushiMaker.sol#188)\n\t\t- IERC20(sushi).safeTransfer(bar,amount0) (contracts/SushiMaker.sol#136)\n\t\t- IERC20(sushi).safeTransfer(bar,amount1) (contracts/SushiMaker.sol#139)\n\tEvent emitted after the call(s):\n\t- LogConvert(msg.sender,token0,token1,amount0,amount1,_convertStep(token0,token1,amount0,amount1)) (contracts/SushiMaker.sol#115)\n",
            "impact": "Low",
            "confidence": "Medium",
            "lines": [
                102,
                103,
                104,
                105,
                106,
                107,
                108,
                109,
                110,
                111,
                112,
                113,
                114,
                115,
                116
            ],
            "start_col": 5,
            "end_col": 6
        },
        {
            "check": "reentrancy-events",
            "description": "Reentrancy in SushiMaker._convert(address,address) (contracts/SushiMaker.sol#102-116):\n\tExternal calls:\n\t- IERC20(address(pair)).safeTransfer(address(pair),pair.balanceOf(address(this))) (contracts/SushiMaker.sol#109)\n\t- (amount0,amount1) = pair.burn(address(this)) (contracts/SushiMaker.sol#111)\n\t- LogConvert(msg.sender,token0,token1,amount0,amount1,_convertStep(token0,token1,amount0,amount1)) (contracts/SushiMaker.sol#115)\n\t\t- (success,data) = address(token).call(abi.encodeWithSelector(0xa9059cbb,to,amount)) (contracts/libraries/BoringERC20.sol#23)\n\t\t- IERC20(sushi).safeTransfer(bar,amount) (contracts/SushiMaker.sol#126)\n\t\t- IERC20(fromToken).safeTransfer(address(pair),amountIn) (contracts/SushiMaker.sol#182)\n\t\t- pair.swap(0,amountOut,to,new bytes(0)) (contracts/SushiMaker.sol#183)\n\t\t- IERC20(fromToken).safeTransfer(address(pair),amountIn) (contracts/SushiMaker.sol#187)\n\t\t- pair.swap(amountOut,0,to,new bytes(0)) (contracts/SushiMaker.sol#188)\n\t\t- IERC20(sushi).safeTransfer(bar,amount0) (contracts/SushiMaker.sol#136)\n\t\t- IERC20(sushi).safeTransfer(bar,amount1) (contracts/SushiMaker.sol#139)\n\tEvent emitted after the call(s):\n\t- LogConvert(msg.sender,token0,token1,amount0,amount1,_convertStep(token0,token1,amount0,amount1)) (contracts/SushiMaker.sol#115)\n",
            "impact": "Low",
            "confidence": "Medium",
            "lines": [
                109
            ],
            "start_col": 9,
            "end_col": 89
        },
        {
            "check": "reentrancy-events",
            "description": "Reentrancy in SushiMaker._convert(address,address) (contracts/SushiMaker.sol#102-116):\n\tExternal calls:\n\t- IERC20(address(pair)).safeTransfer(address(pair),pair.balanceOf(address(this))) (contracts/SushiMaker.sol#109)\n\t- (amount0,amount1) = pair.burn(address(this)) (contracts/SushiMaker.sol#111)\n\t- LogConvert(msg.sender,token0,token1,amount0,amount1,_convertStep(token0,token1,amount0,amount1)) (contracts/SushiMaker.sol#115)\n\t\t- (success,data) = address(token).call(abi.encodeWithSelector(0xa9059cbb,to,amount)) (contracts/libraries/BoringERC20.sol#23)\n\t\t- IERC20(sushi).safeTransfer(bar,amount) (contracts/SushiMaker.sol#126)\n\t\t- IERC20(fromToken).safeTransfer(address(pair),amountIn) (contracts/SushiMaker.sol#182)\n\t\t- pair.swap(0,amountOut,to,new bytes(0)) (contracts/SushiMaker.sol#183)\n\t\t- IERC20(fromToken).safeTransfer(address(pair),amountIn) (contracts/SushiMaker.sol#187)\n\t\t- pair.swap(amountOut,0,to,new bytes(0)) (contracts/SushiMaker.sol#188)\n\t\t- IERC20(sushi).safeTransfer(bar,amount0) (contracts/SushiMaker.sol#136)\n\t\t- IERC20(sushi).safeTransfer(bar,amount1) (contracts/SushiMaker.sol#139)\n\tEvent emitted after the call(s):\n\t- LogConvert(msg.sender,token0,token1,amount0,amount1,_convertStep(token0,token1,amount0,amount1)) (contracts/SushiMaker.sol#115)\n",
            "impact": "Low",
            "confidence": "Medium",
            "lines": [
                111
            ],
            "start_col": 9,
            "end_col": 70
        },
        {
            "check": "reentrancy-events",
            "description": "Reentrancy in SushiMaker._convert(address,address) (contracts/SushiMaker.sol#102-116):\n\tExternal calls:\n\t- IERC20(address(pair)).safeTransfer(address(pair),pair.balanceOf(address(this))) (contracts/SushiMaker.sol#109)\n\t- (amount0,amount1) = pair.burn(address(this)) (contracts/SushiMaker.sol#111)\n\t- LogConvert(msg.sender,token0,token1,amount0,amount1,_convertStep(token0,token1,amount0,amount1)) (contracts/SushiMaker.sol#115)\n\t\t- (success,data) = address(token).call(abi.encodeWithSelector(0xa9059cbb,to,amount)) (contracts/libraries/BoringERC20.sol#23)\n\t\t- IERC20(sushi).safeTransfer(bar,amount) (contracts/SushiMaker.sol#126)\n\t\t- IERC20(fromToken).safeTransfer(address(pair),amountIn) (contracts/SushiMaker.sol#182)\n\t\t- pair.swap(0,amountOut,to,new bytes(0)) (contracts/SushiMaker.sol#183)\n\t\t- IERC20(fromToken).safeTransfer(address(pair),amountIn) (contracts/SushiMaker.sol#187)\n\t\t- pair.swap(amountOut,0,to,new bytes(0)) (contracts/SushiMaker.sol#188)\n\t\t- IERC20(sushi).safeTransfer(bar,amount0) (contracts/SushiMaker.sol#136)\n\t\t- IERC20(sushi).safeTransfer(bar,amount1) (contracts/SushiMaker.sol#139)\n\tEvent emitted after the call(s):\n\t- LogConvert(msg.sender,token0,token1,amount0,amount1,_convertStep(token0,token1,amount0,amount1)) (contracts/SushiMaker.sol#115)\n",
            "impact": "Low",
            "confidence": "Medium",
            "lines": [
                115
            ],
            "start_col": 9,
            "end_col": 118
        },
        {
            "check": "reentrancy-events",
            "description": "Reentrancy in SushiMaker._convert(address,address) (contracts/SushiMaker.sol#102-116):\n\tExternal calls:\n\t- IERC20(address(pair)).safeTransfer(address(pair),pair.balanceOf(address(this))) (contracts/SushiMaker.sol#109)\n\t- (amount0,amount1) = pair.burn(address(this)) (contracts/SushiMaker.sol#111)\n\t- LogConvert(msg.sender,token0,token1,amount0,amount1,_convertStep(token0,token1,amount0,amount1)) (contracts/SushiMaker.sol#115)\n\t\t- (success,data) = address(token).call(abi.encodeWithSelector(0xa9059cbb,to,amount)) (contracts/libraries/BoringERC20.sol#23)\n\t\t- IERC20(sushi).safeTransfer(bar,amount) (contracts/SushiMaker.sol#126)\n\t\t- IERC20(fromToken).safeTransfer(address(pair),amountIn) (contracts/SushiMaker.sol#182)\n\t\t- pair.swap(0,amountOut,to,new bytes(0)) (contracts/SushiMaker.sol#183)\n\t\t- IERC20(fromToken).safeTransfer(address(pair),amountIn) (contracts/SushiMaker.sol#187)\n\t\t- pair.swap(amountOut,0,to,new bytes(0)) (contracts/SushiMaker.sol#188)\n\t\t- IERC20(sushi).safeTransfer(bar,amount0) (contracts/SushiMaker.sol#136)\n\t\t- IERC20(sushi).safeTransfer(bar,amount1) (contracts/SushiMaker.sol#139)\n\tEvent emitted after the call(s):\n\t- LogConvert(msg.sender,token0,token1,amount0,amount1,_convertStep(token0,token1,amount0,amount1)) (contracts/SushiMaker.sol#115)\n",
            "impact": "Low",
            "confidence": "Medium",
            "lines": [
                126
            ],
            "start_col": 17,
            "end_col": 56
        },
        {
            "check": "reentrancy-events",
            "description": "Reentrancy in SushiMaker._convert(address,address) (contracts/SushiMaker.sol#102-116):\n\tExternal calls:\n\t- IERC20(address(pair)).safeTransfer(address(pair),pair.balanceOf(address(this))) (contracts/SushiMaker.sol#109)\n\t- (amount0,amount1) = pair.burn(address(this)) (contracts/SushiMaker.sol#111)\n\t- LogConvert(msg.sender,token0,token1,amount0,amount1,_convertStep(token0,token1,amount0,amount1)) (contracts/SushiMaker.sol#115)\n\t\t- (success,data) = address(token).call(abi.encodeWithSelector(0xa9059cbb,to,amount)) (contracts/libraries/BoringERC20.sol#23)\n\t\t- IERC20(sushi).safeTransfer(bar,amount) (contracts/SushiMaker.sol#126)\n\t\t- IERC20(fromToken).safeTransfer(address(pair),amountIn) (contracts/SushiMaker.sol#182)\n\t\t- pair.swap(0,amountOut,to,new bytes(0)) (contracts/SushiMaker.sol#183)\n\t\t- IERC20(fromToken).safeTransfer(address(pair),amountIn) (contracts/SushiMaker.sol#187)\n\t\t- pair.swap(amountOut,0,to,new bytes(0)) (contracts/SushiMaker.sol#188)\n\t\t- IERC20(sushi).safeTransfer(bar,amount0) (contracts/SushiMaker.sol#136)\n\t\t- IERC20(sushi).safeTransfer(bar,amount1) (contracts/SushiMaker.sol#139)\n\tEvent emitted after the call(s):\n\t- LogConvert(msg.sender,token0,token1,amount0,amount1,_convertStep(token0,token1,amount0,amount1)) (contracts/SushiMaker.sol#115)\n",
            "impact": "Low",
            "confidence": "Medium",
            "lines": [
                182
            ],
            "start_col": 13,
            "end_col": 68
        },
        {
            "check": "reentrancy-events",
            "description": "Reentrancy in SushiMaker._convert(address,address) (contracts/SushiMaker.sol#102-116):\n\tExternal calls:\n\t- IERC20(address(pair)).safeTransfer(address(pair),pair.balanceOf(address(this))) (contracts/SushiMaker.sol#109)\n\t- (amount0,amount1) = pair.burn(address(this)) (contracts/SushiMaker.sol#111)\n\t- LogConvert(msg.sender,token0,token1,amount0,amount1,_convertStep(token0,token1,amount0,amount1)) (contracts/SushiMaker.sol#115)\n\t\t- (success,data) = address(token).call(abi.encodeWithSelector(0xa9059cbb,to,amount)) (contracts/libraries/BoringERC20.sol#23)\n\t\t- IERC20(sushi).safeTransfer(bar,amount) (contracts/SushiMaker.sol#126)\n\t\t- IERC20(fromToken).safeTransfer(address(pair),amountIn) (contracts/SushiMaker.sol#182)\n\t\t- pair.swap(0,amountOut,to,new bytes(0)) (contracts/SushiMaker.sol#183)\n\t\t- IERC20(fromToken).safeTransfer(address(pair),amountIn) (contracts/SushiMaker.sol#187)\n\t\t- pair.swap(amountOut,0,to,new bytes(0)) (contracts/SushiMaker.sol#188)\n\t\t- IERC20(sushi).safeTransfer(bar,amount0) (contracts/SushiMaker.sol#136)\n\t\t- IERC20(sushi).safeTransfer(bar,amount1) (contracts/SushiMaker.sol#139)\n\tEvent emitted after the call(s):\n\t- LogConvert(msg.sender,token0,token1,amount0,amount1,_convertStep(token0,token1,amount0,amount1)) (contracts/SushiMaker.sol#115)\n",
            "impact": "Low",
            "confidence": "Medium",
            "lines": [
                183
            ],
            "start_col": 13,
            "end_col": 54
        },
        {
            "check": "reentrancy-events",
            "description": "Reentrancy in SushiMaker._convert(address,address) (contracts/SushiMaker.sol#102-116):\n\tExternal calls:\n\t- IERC20(address(pair)).safeTransfer(address(pair),pair.balanceOf(address(this))) (contracts/SushiMaker.sol#109)\n\t- (amount0,amount1) = pair.burn(address(this)) (contracts/SushiMaker.sol#111)\n\t- LogConvert(msg.sender,token0,token1,amount0,amount1,_convertStep(token0,token1,amount0,amount1)) (contracts/SushiMaker.sol#115)\n\t\t- (success,data) = address(token).call(abi.encodeWithSelector(0xa9059cbb,to,amount)) (contracts/libraries/BoringERC20.sol#23)\n\t\t- IERC20(sushi).safeTransfer(bar,amount) (contracts/SushiMaker.sol#126)\n\t\t- IERC20(fromToken).safeTransfer(address(pair),amountIn) (contracts/SushiMaker.sol#182)\n\t\t- pair.swap(0,amountOut,to,new bytes(0)) (contracts/SushiMaker.sol#183)\n\t\t- IERC20(fromToken).safeTransfer(address(pair),amountIn) (contracts/SushiMaker.sol#187)\n\t\t- pair.swap(amountOut,0,to,new bytes(0)) (contracts/SushiMaker.sol#188)\n\t\t- IERC20(sushi).safeTransfer(bar,amount0) (contracts/SushiMaker.sol#136)\n\t\t- IERC20(sushi).safeTransfer(bar,amount1) (contracts/SushiMaker.sol#139)\n\tEvent emitted after the call(s):\n\t- LogConvert(msg.sender,token0,token1,amount0,amount1,_convertStep(token0,token1,amount0,amount1)) (contracts/SushiMaker.sol#115)\n",
            "impact": "Low",
            "confidence": "Medium",
            "lines": [
                187
            ],
            "start_col": 13,
            "end_col": 68
        },
        {
            "check": "reentrancy-events",
            "description": "Reentrancy in SushiMaker._convert(address,address) (contracts/SushiMaker.sol#102-116):\n\tExternal calls:\n\t- IERC20(address(pair)).safeTransfer(address(pair),pair.balanceOf(address(this))) (contracts/SushiMaker.sol#109)\n\t- (amount0,amount1) = pair.burn(address(this)) (contracts/SushiMaker.sol#111)\n\t- LogConvert(msg.sender,token0,token1,amount0,amount1,_convertStep(token0,token1,amount0,amount1)) (contracts/SushiMaker.sol#115)\n\t\t- (success,data) = address(token).call(abi.encodeWithSelector(0xa9059cbb,to,amount)) (contracts/libraries/BoringERC20.sol#23)\n\t\t- IERC20(sushi).safeTransfer(bar,amount) (contracts/SushiMaker.sol#126)\n\t\t- IERC20(fromToken).safeTransfer(address(pair),amountIn) (contracts/SushiMaker.sol#182)\n\t\t- pair.swap(0,amountOut,to,new bytes(0)) (contracts/SushiMaker.sol#183)\n\t\t- IERC20(fromToken).safeTransfer(address(pair),amountIn) (contracts/SushiMaker.sol#187)\n\t\t- pair.swap(amountOut,0,to,new bytes(0)) (contracts/SushiMaker.sol#188)\n\t\t- IERC20(sushi).safeTransfer(bar,amount0) (contracts/SushiMaker.sol#136)\n\t\t- IERC20(sushi).safeTransfer(bar,amount1) (contracts/SushiMaker.sol#139)\n\tEvent emitted after the call(s):\n\t- LogConvert(msg.sender,token0,token1,amount0,amount1,_convertStep(token0,token1,amount0,amount1)) (contracts/SushiMaker.sol#115)\n",
            "impact": "Low",
            "confidence": "Medium",
            "lines": [
                188
            ],
            "start_col": 13,
            "end_col": 54
        },
        {
            "check": "reentrancy-events",
            "description": "Reentrancy in SushiMaker._convert(address,address) (contracts/SushiMaker.sol#102-116):\n\tExternal calls:\n\t- IERC20(address(pair)).safeTransfer(address(pair),pair.balanceOf(address(this))) (contracts/SushiMaker.sol#109)\n\t- (amount0,amount1) = pair.burn(address(this)) (contracts/SushiMaker.sol#111)\n\t- LogConvert(msg.sender,token0,token1,amount0,amount1,_convertStep(token0,token1,amount0,amount1)) (contracts/SushiMaker.sol#115)\n\t\t- (success,data) = address(token).call(abi.encodeWithSelector(0xa9059cbb,to,amount)) (contracts/libraries/BoringERC20.sol#23)\n\t\t- IERC20(sushi).safeTransfer(bar,amount) (contracts/SushiMaker.sol#126)\n\t\t- IERC20(fromToken).safeTransfer(address(pair),amountIn) (contracts/SushiMaker.sol#182)\n\t\t- pair.swap(0,amountOut,to,new bytes(0)) (contracts/SushiMaker.sol#183)\n\t\t- IERC20(fromToken).safeTransfer(address(pair),amountIn) (contracts/SushiMaker.sol#187)\n\t\t- pair.swap(amountOut,0,to,new bytes(0)) (contracts/SushiMaker.sol#188)\n\t\t- IERC20(sushi).safeTransfer(bar,amount0) (contracts/SushiMaker.sol#136)\n\t\t- IERC20(sushi).safeTransfer(bar,amount1) (contracts/SushiMaker.sol#139)\n\tEvent emitted after the call(s):\n\t- LogConvert(msg.sender,token0,token1,amount0,amount1,_convertStep(token0,token1,amount0,amount1)) (contracts/SushiMaker.sol#115)\n",
            "impact": "Low",
            "confidence": "Medium",
            "lines": [
                136
            ],
            "start_col": 13,
            "end_col": 53
        },
        {
            "check": "reentrancy-events",
            "description": "Reentrancy in SushiMaker._convert(address,address) (contracts/SushiMaker.sol#102-116):\n\tExternal calls:\n\t- IERC20(address(pair)).safeTransfer(address(pair),pair.balanceOf(address(this))) (contracts/SushiMaker.sol#109)\n\t- (amount0,amount1) = pair.burn(address(this)) (contracts/SushiMaker.sol#111)\n\t- LogConvert(msg.sender,token0,token1,amount0,amount1,_convertStep(token0,token1,amount0,amount1)) (contracts/SushiMaker.sol#115)\n\t\t- (success,data) = address(token).call(abi.encodeWithSelector(0xa9059cbb,to,amount)) (contracts/libraries/BoringERC20.sol#23)\n\t\t- IERC20(sushi).safeTransfer(bar,amount) (contracts/SushiMaker.sol#126)\n\t\t- IERC20(fromToken).safeTransfer(address(pair),amountIn) (contracts/SushiMaker.sol#182)\n\t\t- pair.swap(0,amountOut,to,new bytes(0)) (contracts/SushiMaker.sol#183)\n\t\t- IERC20(fromToken).safeTransfer(address(pair),amountIn) (contracts/SushiMaker.sol#187)\n\t\t- pair.swap(amountOut,0,to,new bytes(0)) (contracts/SushiMaker.sol#188)\n\t\t- IERC20(sushi).safeTransfer(bar,amount0) (contracts/SushiMaker.sol#136)\n\t\t- IERC20(sushi).safeTransfer(bar,amount1) (contracts/SushiMaker.sol#139)\n\tEvent emitted after the call(s):\n\t- LogConvert(msg.sender,token0,token1,amount0,amount1,_convertStep(token0,token1,amount0,amount1)) (contracts/SushiMaker.sol#115)\n",
            "impact": "Low",
            "confidence": "Medium",
            "lines": [
                139
            ],
            "start_col": 13,
            "end_col": 53
        },
        {
            "check": "reentrancy-events",
            "description": "Reentrancy in SushiMaker._convert(address,address) (contracts/SushiMaker.sol#102-116):\n\tExternal calls:\n\t- IERC20(address(pair)).safeTransfer(address(pair),pair.balanceOf(address(this))) (contracts/SushiMaker.sol#109)\n\t- (amount0,amount1) = pair.burn(address(this)) (contracts/SushiMaker.sol#111)\n\t- LogConvert(msg.sender,token0,token1,amount0,amount1,_convertStep(token0,token1,amount0,amount1)) (contracts/SushiMaker.sol#115)\n\t\t- (success,data) = address(token).call(abi.encodeWithSelector(0xa9059cbb,to,amount)) (contracts/libraries/BoringERC20.sol#23)\n\t\t- IERC20(sushi).safeTransfer(bar,amount) (contracts/SushiMaker.sol#126)\n\t\t- IERC20(fromToken).safeTransfer(address(pair),amountIn) (contracts/SushiMaker.sol#182)\n\t\t- pair.swap(0,amountOut,to,new bytes(0)) (contracts/SushiMaker.sol#183)\n\t\t- IERC20(fromToken).safeTransfer(address(pair),amountIn) (contracts/SushiMaker.sol#187)\n\t\t- pair.swap(amountOut,0,to,new bytes(0)) (contracts/SushiMaker.sol#188)\n\t\t- IERC20(sushi).safeTransfer(bar,amount0) (contracts/SushiMaker.sol#136)\n\t\t- IERC20(sushi).safeTransfer(bar,amount1) (contracts/SushiMaker.sol#139)\n\tEvent emitted after the call(s):\n\t- LogConvert(msg.sender,token0,token1,amount0,amount1,_convertStep(token0,token1,amount0,amount1)) (contracts/SushiMaker.sol#115)\n",
            "impact": "Low",
            "confidence": "Medium",
            "lines": [
                115
            ],
            "start_col": 9,
            "end_col": 118
        }
    ],
    "contracts/libraries/BoringERC20.sol": [
        {
            "check": "calls-loop",
            "description": "BoringERC20.safeTransfer(IERC20,address,uint256) (contracts/libraries/BoringERC20.sol#22-25) has external calls inside a loop: (success,data) = address(token).call(abi.encodeWithSelector(0xa9059cbb,to,amount)) (contracts/libraries/BoringERC20.sol#23)\n",
            "impact": "Low",
            "confidence": "Medium",
            "lines": [
                22,
                23,
                24,
                25
            ],
            "start_col": 5,
            "end_col": 6
        },
        {
            "check": "calls-loop",
            "description": "BoringERC20.safeTransfer(IERC20,address,uint256) (contracts/libraries/BoringERC20.sol#22-25) has external calls inside a loop: (success,data) = address(token).call(abi.encodeWithSelector(0xa9059cbb,to,amount)) (contracts/libraries/BoringERC20.sol#23)\n",
            "impact": "Low",
            "confidence": "Medium",
            "lines": [
                23
            ],
            "start_col": 9,
            "end_col": 112
        },
        {
            "check": "reentrancy-events",
            "description": "Reentrancy in SushiMaker._convert(address,address) (contracts/SushiMaker.sol#102-116):\n\tExternal calls:\n\t- IERC20(address(pair)).safeTransfer(address(pair),pair.balanceOf(address(this))) (contracts/SushiMaker.sol#109)\n\t- (amount0,amount1) = pair.burn(address(this)) (contracts/SushiMaker.sol#111)\n\t- LogConvert(msg.sender,token0,token1,amount0,amount1,_convertStep(token0,token1,amount0,amount1)) (contracts/SushiMaker.sol#115)\n\t\t- (success,data) = address(token).call(abi.encodeWithSelector(0xa9059cbb,to,amount)) (contracts/libraries/BoringERC20.sol#23)\n\t\t- IERC20(sushi).safeTransfer(bar,amount) (contracts/SushiMaker.sol#126)\n\t\t- IERC20(fromToken).safeTransfer(address(pair),amountIn) (contracts/SushiMaker.sol#182)\n\t\t- pair.swap(0,amountOut,to,new bytes(0)) (contracts/SushiMaker.sol#183)\n\t\t- IERC20(fromToken).safeTransfer(address(pair),amountIn) (contracts/SushiMaker.sol#187)\n\t\t- pair.swap(amountOut,0,to,new bytes(0)) (contracts/SushiMaker.sol#188)\n\t\t- IERC20(sushi).safeTransfer(bar,amount0) (contracts/SushiMaker.sol#136)\n\t\t- IERC20(sushi).safeTransfer(bar,amount1) (contracts/SushiMaker.sol#139)\n\tEvent emitted after the call(s):\n\t- LogConvert(msg.sender,token0,token1,amount0,amount1,_convertStep(token0,token1,amount0,amount1)) (contracts/SushiMaker.sol#115)\n",
            "impact": "Low",
            "confidence": "Medium",
            "lines": [
                23
            ],
            "start_col": 9,
            "end_col": 112
        },
        {
            "check": "dead-code",
            "description": "BoringERC20.safeSymbol(IERC20) (contracts/libraries/BoringERC20.sol#7-10) is never used and should be removed\n",
            "impact": "Informational",
            "confidence": "Medium",
            "lines": [
                7,
                8,
                9,
                10
            ],
            "start_col": 5,
            "end_col": 6
        },
        {
            "check": "dead-code",
            "description": "BoringERC20.safeTransferFrom(IERC20,address,uint256) (contracts/libraries/BoringERC20.sol#27-30) is never used and should be removed\n",
            "impact": "Informational",
            "confidence": "Medium",
            "lines": [
                27,
                28,
                29,
                30
            ],
            "start_col": 5,
            "end_col": 6
        },
        {
            "check": "dead-code",
            "description": "BoringERC20.safeName(IERC20) (contracts/libraries/BoringERC20.sol#12-15) is never used and should be removed\n",
            "impact": "Informational",
            "confidence": "Medium",
            "lines": [
                12,
                13,
                14,
                15
            ],
            "start_col": 5,
            "end_col": 6
        },
        {
            "check": "low-level-calls",
            "description": "Low level call in BoringERC20.safeName(IERC20) (contracts/libraries/BoringERC20.sol#12-15):\n\t- (success,data) = address(token).staticcall(abi.encodeWithSelector(0x06fdde03)) (contracts/libraries/BoringERC20.sol#13)\n",
            "impact": "Informational",
            "confidence": "High",
            "lines": [
                12,
                13,
                14,
                15
            ],
            "start_col": 5,
            "end_col": 6
        },
        {
            "check": "low-level-calls",
            "description": "Low level call in BoringERC20.safeName(IERC20) (contracts/libraries/BoringERC20.sol#12-15):\n\t- (success,data) = address(token).staticcall(abi.encodeWithSelector(0x06fdde03)) (contracts/libraries/BoringERC20.sol#13)\n",
            "impact": "Informational",
            "confidence": "High",
            "lines": [
                13
            ],
            "start_col": 9,
            "end_col": 106
        },
        {
            "check": "low-level-calls",
            "description": "Low level call in BoringERC20.safeDecimals(IERC20) (contracts/libraries/BoringERC20.sol#17-20):\n\t- (success,data) = address(token).staticcall(abi.encodeWithSelector(0x313ce567)) (contracts/libraries/BoringERC20.sol#18)\n",
            "impact": "Informational",
            "confidence": "High",
            "lines": [
                17,
                18,
                19,
                20
            ],
            "start_col": 5,
            "end_col": 6
        },
        {
            "check": "low-level-calls",
            "description": "Low level call in BoringERC20.safeDecimals(IERC20) (contracts/libraries/BoringERC20.sol#17-20):\n\t- (success,data) = address(token).staticcall(abi.encodeWithSelector(0x313ce567)) (contracts/libraries/BoringERC20.sol#18)\n",
            "impact": "Informational",
            "confidence": "High",
            "lines": [
                18
            ],
            "start_col": 9,
            "end_col": 106
        },
        {
            "check": "low-level-calls",
            "description": "Low level call in BoringERC20.safeTransfer(IERC20,address,uint256) (contracts/libraries/BoringERC20.sol#22-25):\n\t- (success,data) = address(token).call(abi.encodeWithSelector(0xa9059cbb,to,amount)) (contracts/libraries/BoringERC20.sol#23)\n",
            "impact": "Informational",
            "confidence": "High",
            "lines": [
                22,
                23,
                24,
                25
            ],
            "start_col": 5,
            "end_col": 6
        },
        {
            "check": "low-level-calls",
            "description": "Low level call in BoringERC20.safeTransfer(IERC20,address,uint256) (contracts/libraries/BoringERC20.sol#22-25):\n\t- (success,data) = address(token).call(abi.encodeWithSelector(0xa9059cbb,to,amount)) (contracts/libraries/BoringERC20.sol#23)\n",
            "impact": "Informational",
            "confidence": "High",
            "lines": [
                23
            ],
            "start_col": 9,
            "end_col": 112
        },
        {
            "check": "low-level-calls",
            "description": "Low level call in BoringERC20.safeTransferFrom(IERC20,address,uint256) (contracts/libraries/BoringERC20.sol#27-30):\n\t- (success,data) = address(token).call(abi.encodeWithSelector(0x23b872dd,from,address(this),amount)) (contracts/libraries/BoringERC20.sol#28)\n",
            "impact": "Informational",
            "confidence": "High",
            "lines": [
                27,
                28,
                29,
                30
            ],
            "start_col": 5,
            "end_col": 6
        },
        {
            "check": "low-level-calls",
            "description": "Low level call in BoringERC20.safeTransferFrom(IERC20,address,uint256) (contracts/libraries/BoringERC20.sol#27-30):\n\t- (success,data) = address(token).call(abi.encodeWithSelector(0x23b872dd,from,address(this),amount)) (contracts/libraries/BoringERC20.sol#28)\n",
            "impact": "Informational",
            "confidence": "High",
            "lines": [
                28
            ],
            "start_col": 9,
            "end_col": 129
        },
        {
            "check": "low-level-calls",
            "description": "Low level call in BoringERC20.safeSymbol(IERC20) (contracts/libraries/BoringERC20.sol#7-10):\n\t- (success,data) = address(token).staticcall(abi.encodeWithSelector(0x95d89b41)) (contracts/libraries/BoringERC20.sol#8)\n",
            "impact": "Informational",
            "confidence": "High",
            "lines": [
                7,
                8,
                9,
                10
            ],
            "start_col": 5,
            "end_col": 6
        },
        {
            "check": "low-level-calls",
            "description": "Low level call in BoringERC20.safeSymbol(IERC20) (contracts/libraries/BoringERC20.sol#7-10):\n\t- (success,data) = address(token).staticcall(abi.encodeWithSelector(0x95d89b41)) (contracts/libraries/BoringERC20.sol#8)\n",
            "impact": "Informational",
            "confidence": "High",
            "lines": [
                8
            ],
            "start_col": 9,
            "end_col": 106
        }
    ],
    "contracts/libraries/BoringMath.sol": [
        {
            "check": "dead-code",
            "description": "BoringMath128.add(uint128,uint128) (contracts/libraries/BoringMath.sol#15) is never used and should be removed\n",
            "impact": "Informational",
            "confidence": "Medium",
            "lines": [
                15
            ],
            "start_col": 5,
            "end_col": 130
        },
        {
            "check": "dead-code",
            "description": "BoringMath128.sub(uint128,uint128) (contracts/libraries/BoringMath.sol#16) is never used and should be removed\n",
            "impact": "Informational",
            "confidence": "Medium",
            "lines": [
                16
            ],
            "start_col": 5,
            "end_col": 127
        },
        {
            "check": "dead-code",
            "description": "BoringMath.sub(uint256,uint256) (contracts/libraries/BoringMath.sol#6) is never used and should be removed\n",
            "impact": "Informational",
            "confidence": "Medium",
            "lines": [
                6
            ],
            "start_col": 5,
            "end_col": 127
        },
        {
            "check": "dead-code",
            "description": "BoringMath.to128(uint256) (contracts/libraries/BoringMath.sol#8-11) is never used and should be removed\n",
            "impact": "Informational",
            "confidence": "Medium",
            "lines": [
                8,
                9,
                10,
                11
            ],
            "start_col": 5,
            "end_col": 6
        }
    ],
    "contracts/uniswapv2/interfaces/IUniswapV2ERC20.sol": [
        {
            "check": "naming-convention",
            "description": "Function IUniswapV2ERC20.DOMAIN_SEPARATOR() (contracts/uniswapv2/interfaces/IUniswapV2ERC20.sol#20) is not in mixedCase\n",
            "impact": "Informational",
            "confidence": "High",
            "lines": [
                20
            ],
            "start_col": 5,
            "end_col": 65
        },
        {
            "check": "naming-convention",
            "description": "Function IUniswapV2ERC20.PERMIT_TYPEHASH() (contracts/uniswapv2/interfaces/IUniswapV2ERC20.sol#21) is not in mixedCase\n",
            "impact": "Informational",
            "confidence": "High",
            "lines": [
                21
            ],
            "start_col": 5,
            "end_col": 64
        }
    ],
    "contracts/SushiRoll.sol": [
        {
            "check": "unchecked-transfer",
            "description": "SushiRoll.removeLiquidity(address,address,uint256,uint256,uint256,uint256) (contracts/SushiRoll.sol#74-89) ignores return value by pair.transferFrom(msg.sender,address(pair),liquidity) (contracts/SushiRoll.sol#83)\n",
            "impact": "High",
            "confidence": "Medium",
            "lines": [
                74,
                75,
                76,
                77,
                78,
                79,
                80,
                81,
                82,
                83,
                84,
                85,
                86,
                87,
                88,
                89
            ],
            "start_col": 5,
            "end_col": 6
        },
        {
            "check": "unchecked-transfer",
            "description": "SushiRoll.removeLiquidity(address,address,uint256,uint256,uint256,uint256) (contracts/SushiRoll.sol#74-89) ignores return value by pair.transferFrom(msg.sender,address(pair),liquidity) (contracts/SushiRoll.sol#83)\n",
            "impact": "High",
            "confidence": "Medium",
            "lines": [
                83
            ],
            "start_col": 9,
            "end_col": 64
        },
        {
            "check": "unused-return",
            "description": "SushiRoll._addLiquidity(address,address,uint256,uint256) (contracts/SushiRoll.sol#115-139) ignores return value by factory.createPair(tokenA,tokenB) (contracts/SushiRoll.sol#124)\n",
            "impact": "Medium",
            "confidence": "Medium",
            "lines": [
                115,
                116,
                117,
                118,
                119,
                120,
                121,
                122,
                123,
                124,
                125,
                126,
                127,
                128,
                129,
                130,
                131,
                132,
                133,
                134,
                135,
                136,
                137,
                138,
                139
            ],
            "start_col": 5,
            "end_col": 6
        },
        {
            "check": "unused-return",
            "description": "SushiRoll._addLiquidity(address,address,uint256,uint256) (contracts/SushiRoll.sol#115-139) ignores return value by factory.createPair(tokenA,tokenB) (contracts/SushiRoll.sol#124)\n",
            "impact": "Medium",
            "confidence": "Medium",
            "lines": [
                124
            ],
            "start_col": 13,
            "end_col": 47
        },
        {
            "check": "unused-return",
            "description": "SushiRoll.removeLiquidity(address,address,uint256,uint256,uint256,uint256) (contracts/SushiRoll.sol#74-89) ignores return value by (token0,None) = UniswapV2Library.sortTokens(tokenA,tokenB) (contracts/SushiRoll.sol#85)\n",
            "impact": "Medium",
            "confidence": "Medium",
            "lines": [
                74,
                75,
                76,
                77,
                78,
                79,
                80,
                81,
                82,
                83,
                84,
                85,
                86,
                87,
                88,
                89
            ],
            "start_col": 5,
            "end_col": 6
        },
        {
            "check": "unused-return",
            "description": "SushiRoll.removeLiquidity(address,address,uint256,uint256,uint256,uint256) (contracts/SushiRoll.sol#74-89) ignores return value by (token0,None) = UniswapV2Library.sortTokens(tokenA,tokenB) (contracts/SushiRoll.sol#85)\n",
            "impact": "Medium",
            "confidence": "Medium",
            "lines": [
                85
            ],
            "start_col": 9,
            "end_col": 72
        },
        {
            "check": "unused-return",
            "description": "SushiRoll.addLiquidity(address,address,uint256,uint256) (contracts/SushiRoll.sol#102-113) ignores return value by IUniswapV2Pair(pair).mint(msg.sender) (contracts/SushiRoll.sol#112)\n",
            "impact": "Medium",
            "confidence": "Medium",
            "lines": [
                102,
                103,
                104,
                105,
                106,
                107,
                108,
                109,
                110,
                111,
                112,
                113
            ],
            "start_col": 5,
            "end_col": 6
        },
        {
            "check": "unused-return",
            "description": "SushiRoll.addLiquidity(address,address,uint256,uint256) (contracts/SushiRoll.sol#102-113) ignores return value by IUniswapV2Pair(pair).mint(msg.sender) (contracts/SushiRoll.sol#112)\n",
            "impact": "Medium",
            "confidence": "Medium",
            "lines": [
                112
            ],
            "start_col": 9,
            "end_col": 46
        },
        {
            "check": "timestamp",
            "description": "SushiRoll.migrate(address,address,uint256,uint256,uint256,uint256) (contracts/SushiRoll.sol#42-72) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- require(bool,string)(deadline >= block.timestamp,SushiSwap: EXPIRED) (contracts/SushiRoll.sol#50)\n",
            "impact": "Low",
            "confidence": "Medium",
            "lines": [
                42,
                43,
                44,
                45,
                46,
                47,
                48,
                49,
                50,
                51,
                52,
                53,
                54,
                55,
                56,
                57,
                58,
                59,
                60,
                61,
                62,
                63,
                64,
                65,
                66,
                67,
                68,
                69,
                70,
                71,
                72
            ],
            "start_col": 5,
            "end_col": 6
        },
        {
            "check": "timestamp",
            "description": "SushiRoll.migrate(address,address,uint256,uint256,uint256,uint256) (contracts/SushiRoll.sol#42-72) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- require(bool,string)(deadline >= block.timestamp,SushiSwap: EXPIRED) (contracts/SushiRoll.sol#50)\n",
            "impact": "Low",
            "confidence": "Medium",
            "lines": [
                50
            ],
            "start_col": 9,
            "end_col": 67
        },
        {
            "check": "similar-names",
            "description": "Variable SushiRoll.addLiquidity(address,address,uint256,uint256).amountADesired (contracts/SushiRoll.sol#105) is too similar to SushiRoll.addLiquidity(address,address,uint256,uint256).amountBDesired (contracts/SushiRoll.sol#106)\n",
            "impact": "Informational",
            "confidence": "Medium",
            "lines": [
                105
            ],
            "start_col": 9,
            "end_col": 31
        },
        {
            "check": "similar-names",
            "description": "Variable SushiRoll.addLiquidity(address,address,uint256,uint256).amountADesired (contracts/SushiRoll.sol#105) is too similar to SushiRoll.addLiquidity(address,address,uint256,uint256).amountBDesired (contracts/SushiRoll.sol#106)\n",
            "impact": "Informational",
            "confidence": "Medium",
            "lines": [
                106
            ],
            "start_col": 9,
            "end_col": 31
        },
        {
            "check": "similar-names",
            "description": "Variable SushiRoll._addLiquidity(address,address,uint256,uint256).amountAOptimal (contracts/SushiRoll.sol#134) is too similar to SushiRoll._addLiquidity(address,address,uint256,uint256).amountBOptimal (contracts/SushiRoll.sol#130)\n",
            "impact": "Informational",
            "confidence": "Medium",
            "lines": [
                134
            ],
            "start_col": 17,
            "end_col": 100
        },
        {
            "check": "similar-names",
            "description": "Variable SushiRoll._addLiquidity(address,address,uint256,uint256).amountAOptimal (contracts/SushiRoll.sol#134) is too similar to SushiRoll._addLiquidity(address,address,uint256,uint256).amountBOptimal (contracts/SushiRoll.sol#130)\n",
            "impact": "Informational",
            "confidence": "Medium",
            "lines": [
                130
            ],
            "start_col": 13,
            "end_col": 96
        },
        {
            "check": "similar-names",
            "description": "Variable SushiRoll._addLiquidity(address,address,uint256,uint256).amountADesired (contracts/SushiRoll.sol#118) is too similar to SushiRoll.addLiquidity(address,address,uint256,uint256).amountBDesired (contracts/SushiRoll.sol#106)\n",
            "impact": "Informational",
            "confidence": "Medium",
            "lines": [
                118
            ],
            "start_col": 9,
            "end_col": 31
        },
        {
            "check": "similar-names",
            "description": "Variable SushiRoll._addLiquidity(address,address,uint256,uint256).amountADesired (contracts/SushiRoll.sol#118) is too similar to SushiRoll.addLiquidity(address,address,uint256,uint256).amountBDesired (contracts/SushiRoll.sol#106)\n",
            "impact": "Informational",
            "confidence": "Medium",
            "lines": [
                106
            ],
            "start_col": 9,
            "end_col": 31
        },
        {
            "check": "similar-names",
            "description": "Variable SushiRoll.addLiquidity(address,address,uint256,uint256).amountADesired (contracts/SushiRoll.sol#105) is too similar to SushiRoll._addLiquidity(address,address,uint256,uint256).amountBDesired (contracts/SushiRoll.sol#119)\n",
            "impact": "Informational",
            "confidence": "Medium",
            "lines": [
                105
            ],
            "start_col": 9,
            "end_col": 31
        },
        {
            "check": "similar-names",
            "description": "Variable SushiRoll.addLiquidity(address,address,uint256,uint256).amountADesired (contracts/SushiRoll.sol#105) is too similar to SushiRoll._addLiquidity(address,address,uint256,uint256).amountBDesired (contracts/SushiRoll.sol#119)\n",
            "impact": "Informational",
            "confidence": "Medium",
            "lines": [
                119
            ],
            "start_col": 9,
            "end_col": 31
        },
        {
            "check": "similar-names",
            "description": "Variable SushiRoll._addLiquidity(address,address,uint256,uint256).amountADesired (contracts/SushiRoll.sol#118) is too similar to SushiRoll._addLiquidity(address,address,uint256,uint256).amountBDesired (contracts/SushiRoll.sol#119)\n",
            "impact": "Informational",
            "confidence": "Medium",
            "lines": [
                118
            ],
            "start_col": 9,
            "end_col": 31
        },
        {
            "check": "similar-names",
            "description": "Variable SushiRoll._addLiquidity(address,address,uint256,uint256).amountADesired (contracts/SushiRoll.sol#118) is too similar to SushiRoll._addLiquidity(address,address,uint256,uint256).amountBDesired (contracts/SushiRoll.sol#119)\n",
            "impact": "Informational",
            "confidence": "Medium",
            "lines": [
                119
            ],
            "start_col": 9,
            "end_col": 31
        },
        {
            "check": "similar-names",
            "description": "Variable SushiRoll.migrate(address,address,uint256,uint256,uint256,uint256).pooledAmountA (contracts/SushiRoll.sol#63) is too similar to SushiRoll.migrate(address,address,uint256,uint256,uint256,uint256).pooledAmountB (contracts/SushiRoll.sol#63)\n",
            "impact": "Informational",
            "confidence": "Medium",
            "lines": [
                63
            ],
            "start_col": 10,
            "end_col": 31
        },
        {
            "check": "similar-names",
            "description": "Variable SushiRoll.migrate(address,address,uint256,uint256,uint256,uint256).pooledAmountA (contracts/SushiRoll.sol#63) is too similar to SushiRoll.migrate(address,address,uint256,uint256,uint256,uint256).pooledAmountB (contracts/SushiRoll.sol#63)\n",
            "impact": "Informational",
            "confidence": "Medium",
            "lines": [
                63
            ],
            "start_col": 33,
            "end_col": 54
        },
        {
            "check": "immutable-states",
            "description": "SushiRoll.router (contracts/SushiRoll.sol#17) should be immutable \n",
            "impact": "Optimization",
            "confidence": "High",
            "lines": [
                17
            ],
            "start_col": 5,
            "end_col": 37
        },
        {
            "check": "immutable-states",
            "description": "SushiRoll.oldRouter (contracts/SushiRoll.sol#16) should be immutable \n",
            "impact": "Optimization",
            "confidence": "High",
            "lines": [
                16
            ],
            "start_col": 5,
            "end_col": 40
        }
    ],
    "contracts/uniswapv2/libraries/UniswapV2Library.sol": [
        {
            "check": "unused-return",
            "description": "UniswapV2Library.getReserves(address,address,address) (contracts/uniswapv2/libraries/UniswapV2Library.sol#31-35) ignores return value by (reserve0,reserve1,None) = IUniswapV2Pair(pairFor(factory,tokenA,tokenB)).getReserves() (contracts/uniswapv2/libraries/UniswapV2Library.sol#33)\n",
            "impact": "Medium",
            "confidence": "Medium",
            "lines": [
                31,
                32,
                33,
                34,
                35
            ],
            "start_col": 5,
            "end_col": 6
        },
        {
            "check": "unused-return",
            "description": "UniswapV2Library.getReserves(address,address,address) (contracts/uniswapv2/libraries/UniswapV2Library.sol#31-35) ignores return value by (reserve0,reserve1,None) = IUniswapV2Pair(pairFor(factory,tokenA,tokenB)).getReserves() (contracts/uniswapv2/libraries/UniswapV2Library.sol#33)\n",
            "impact": "Medium",
            "confidence": "Medium",
            "lines": [
                33
            ],
            "start_col": 9,
            "end_col": 105
        },
        {
            "check": "dead-code",
            "description": "UniswapV2Library.getAmountsIn(address,uint256,address[]) (contracts/uniswapv2/libraries/UniswapV2Library.sol#75-83) is never used and should be removed\n",
            "impact": "Informational",
            "confidence": "Medium",
            "lines": [
                75,
                76,
                77,
                78,
                79,
                80,
                81,
                82,
                83
            ],
            "start_col": 5,
            "end_col": 6
        },
        {
            "check": "dead-code",
            "description": "UniswapV2Library.getAmountOut(uint256,uint256,uint256) (contracts/uniswapv2/libraries/UniswapV2Library.sol#45-52) is never used and should be removed\n",
            "impact": "Informational",
            "confidence": "Medium",
            "lines": [
                45,
                46,
                47,
                48,
                49,
                50,
                51,
                52
            ],
            "start_col": 5,
            "end_col": 6
        },
        {
            "check": "dead-code",
            "description": "UniswapV2Library.getAmountIn(uint256,uint256,uint256) (contracts/uniswapv2/libraries/UniswapV2Library.sol#55-61) is never used and should be removed\n",
            "impact": "Informational",
            "confidence": "Medium",
            "lines": [
                55,
                56,
                57,
                58,
                59,
                60,
                61
            ],
            "start_col": 5,
            "end_col": 6
        },
        {
            "check": "dead-code",
            "description": "UniswapV2Library.getAmountsOut(address,uint256,address[]) (contracts/uniswapv2/libraries/UniswapV2Library.sol#64-72) is never used and should be removed\n",
            "impact": "Informational",
            "confidence": "Medium",
            "lines": [
                64,
                65,
                66,
                67,
                68,
                69,
                70,
                71,
                72
            ],
            "start_col": 5,
            "end_col": 6
        }
    ],
    "contracts/uniswapv2/libraries/SafeMath.sol": [
        {
            "check": "dead-code",
            "description": "SafeMathUniswap.sub(uint256,uint256) (contracts/uniswapv2/libraries/SafeMath.sol#12-14) is never used and should be removed\n",
            "impact": "Informational",
            "confidence": "Medium",
            "lines": [
                12,
                13,
                14
            ],
            "start_col": 5,
            "end_col": 6
        },
        {
            "check": "dead-code",
            "description": "SafeMathUniswap.add(uint256,uint256) (contracts/uniswapv2/libraries/SafeMath.sol#8-10) is never used and should be removed\n",
            "impact": "Informational",
            "confidence": "Medium",
            "lines": [
                8,
                9,
                10
            ],
            "start_col": 5,
            "end_col": 6
        }
    ],
    "contracts/uniswapv2/interfaces/IUniswapV2Router01.sol": [
        {
            "check": "naming-convention",
            "description": "Function IUniswapV2Router01.WETH() (contracts/uniswapv2/interfaces/IUniswapV2Router01.sol#7) is not in mixedCase\n",
            "impact": "Informational",
            "confidence": "High",
            "lines": [
                7
            ],
            "start_col": 5,
            "end_col": 53
        },
        {
            "check": "similar-names",
            "description": "Variable IUniswapV2Router01.addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256).amountADesired (contracts/uniswapv2/interfaces/IUniswapV2Router01.sol#12) is too similar to IUniswapV2Router01.addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256).amountBDesired (contracts/uniswapv2/interfaces/IUniswapV2Router01.sol#13)\n",
            "impact": "Informational",
            "confidence": "Medium",
            "lines": [
                12
            ],
            "start_col": 9,
            "end_col": 28
        },
        {
            "check": "similar-names",
            "description": "Variable IUniswapV2Router01.addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256).amountADesired (contracts/uniswapv2/interfaces/IUniswapV2Router01.sol#12) is too similar to IUniswapV2Router01.addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256).amountBDesired (contracts/uniswapv2/interfaces/IUniswapV2Router01.sol#13)\n",
            "impact": "Informational",
            "confidence": "Medium",
            "lines": [
                13
            ],
            "start_col": 9,
            "end_col": 28
        }
    ],
    "contracts/Timelock.sol": [
        {
            "check": "missing-zero-check",
            "description": "Timelock.executeTransaction(address,uint256,string,bytes,uint256).target (contracts/Timelock.sol#103) lacks a zero-check on :\n\t\t- (success,returnData) = target.call.value(value)(callData) (contracts/Timelock.sol#122)\n",
            "impact": "Low",
            "confidence": "Medium",
            "lines": [
                103
            ],
            "start_col": 33,
            "end_col": 47
        },
        {
            "check": "missing-zero-check",
            "description": "Timelock.executeTransaction(address,uint256,string,bytes,uint256).target (contracts/Timelock.sol#103) lacks a zero-check on :\n\t\t- (success,returnData) = target.call.value(value)(callData) (contracts/Timelock.sol#122)\n",
            "impact": "Low",
            "confidence": "Medium",
            "lines": [
                122
            ],
            "start_col": 9,
            "end_col": 85
        },
        {
            "check": "missing-zero-check",
            "description": "Timelock.constructor(address,uint256).admin_ (contracts/Timelock.sol#41) lacks a zero-check on :\n\t\t- admin = admin_ (contracts/Timelock.sol#45)\n",
            "impact": "Low",
            "confidence": "Medium",
            "lines": [
                41
            ],
            "start_col": 17,
            "end_col": 31
        },
        {
            "check": "missing-zero-check",
            "description": "Timelock.constructor(address,uint256).admin_ (contracts/Timelock.sol#41) lacks a zero-check on :\n\t\t- admin = admin_ (contracts/Timelock.sol#45)\n",
            "impact": "Low",
            "confidence": "Medium",
            "lines": [
                45
            ],
            "start_col": 9,
            "end_col": 23
        },
        {
            "check": "missing-zero-check",
            "description": "Timelock.setPendingAdmin(address).pendingAdmin_ (contracts/Timelock.sol#70) lacks a zero-check on :\n\t\t- pendingAdmin = pendingAdmin_ (contracts/Timelock.sol#78)\n",
            "impact": "Low",
            "confidence": "Medium",
            "lines": [
                70
            ],
            "start_col": 30,
            "end_col": 51
        },
        {
            "check": "missing-zero-check",
            "description": "Timelock.setPendingAdmin(address).pendingAdmin_ (contracts/Timelock.sol#70) lacks a zero-check on :\n\t\t- pendingAdmin = pendingAdmin_ (contracts/Timelock.sol#78)\n",
            "impact": "Low",
            "confidence": "Medium",
            "lines": [
                78
            ],
            "start_col": 9,
            "end_col": 37
        },
        {
            "check": "reentrancy-events",
            "description": "Reentrancy in Timelock.executeTransaction(address,uint256,string,bytes,uint256) (contracts/Timelock.sol#103-128):\n\tExternal calls:\n\t- (success,returnData) = target.call.value(value)(callData) (contracts/Timelock.sol#122)\n\tEvent emitted after the call(s):\n\t- ExecuteTransaction(txHash,target,value,signature,data,eta) (contracts/Timelock.sol#125)\n",
            "impact": "Low",
            "confidence": "Medium",
            "lines": [
                103,
                104,
                105,
                106,
                107,
                108,
                109,
                110,
                111,
                112,
                113,
                114,
                115,
                116,
                117,
                118,
                119,
                120,
                121,
                122,
                123,
                124,
                125,
                126,
                127,
                128
            ],
            "start_col": 5,
            "end_col": 6
        },
        {
            "check": "reentrancy-events",
            "description": "Reentrancy in Timelock.executeTransaction(address,uint256,string,bytes,uint256) (contracts/Timelock.sol#103-128):\n\tExternal calls:\n\t- (success,returnData) = target.call.value(value)(callData) (contracts/Timelock.sol#122)\n\tEvent emitted after the call(s):\n\t- ExecuteTransaction(txHash,target,value,signature,data,eta) (contracts/Timelock.sol#125)\n",
            "impact": "Low",
            "confidence": "Medium",
            "lines": [
                122
            ],
            "start_col": 9,
            "end_col": 85
        },
        {
            "check": "reentrancy-events",
            "description": "Reentrancy in Timelock.executeTransaction(address,uint256,string,bytes,uint256) (contracts/Timelock.sol#103-128):\n\tExternal calls:\n\t- (success,returnData) = target.call.value(value)(callData) (contracts/Timelock.sol#122)\n\tEvent emitted after the call(s):\n\t- ExecuteTransaction(txHash,target,value,signature,data,eta) (contracts/Timelock.sol#125)\n",
            "impact": "Low",
            "confidence": "Medium",
            "lines": [
                125
            ],
            "start_col": 9,
            "end_col": 77
        },
        {
            "check": "timestamp",
            "description": "Timelock.executeTransaction(address,uint256,string,bytes,uint256) (contracts/Timelock.sol#103-128) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- require(bool,string)(getBlockTimestamp() >= eta,Timelock::executeTransaction: Transaction hasn't surpassed time lock.) (contracts/Timelock.sol#108)\n\t- require(bool,string)(getBlockTimestamp() <= eta.add(GRACE_PERIOD),Timelock::executeTransaction: Transaction is stale.) (contracts/Timelock.sol#109)\n",
            "impact": "Low",
            "confidence": "Medium",
            "lines": [
                103,
                104,
                105,
                106,
                107,
                108,
                109,
                110,
                111,
                112,
                113,
                114,
                115,
                116,
                117,
                118,
                119,
                120,
                121,
                122,
                123,
                124,
                125,
                126,
                127,
                128
            ],
            "start_col": 5,
            "end_col": 6
        },
        {
            "check": "timestamp",
            "description": "Timelock.executeTransaction(address,uint256,string,bytes,uint256) (contracts/Timelock.sol#103-128) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- require(bool,string)(getBlockTimestamp() >= eta,Timelock::executeTransaction: Transaction hasn't surpassed time lock.) (contracts/Timelock.sol#108)\n\t- require(bool,string)(getBlockTimestamp() <= eta.add(GRACE_PERIOD),Timelock::executeTransaction: Transaction is stale.) (contracts/Timelock.sol#109)\n",
            "impact": "Low",
            "confidence": "Medium",
            "lines": [
                108
            ],
            "start_col": 9,
            "end_col": 117
        },
        {
            "check": "timestamp",
            "description": "Timelock.executeTransaction(address,uint256,string,bytes,uint256) (contracts/Timelock.sol#103-128) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- require(bool,string)(getBlockTimestamp() >= eta,Timelock::executeTransaction: Transaction hasn't surpassed time lock.) (contracts/Timelock.sol#108)\n\t- require(bool,string)(getBlockTimestamp() <= eta.add(GRACE_PERIOD),Timelock::executeTransaction: Transaction is stale.) (contracts/Timelock.sol#109)\n",
            "impact": "Low",
            "confidence": "Medium",
            "lines": [
                109
            ],
            "start_col": 9,
            "end_col": 117
        },
        {
            "check": "timestamp",
            "description": "Timelock.queueTransaction(address,uint256,string,bytes,uint256) (contracts/Timelock.sol#83-92) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- require(bool,string)(eta >= getBlockTimestamp().add(delay),Timelock::queueTransaction: Estimated execution block must satisfy delay.) (contracts/Timelock.sol#85)\n",
            "impact": "Low",
            "confidence": "Medium",
            "lines": [
                83,
                84,
                85,
                86,
                87,
                88,
                89,
                90,
                91,
                92
            ],
            "start_col": 5,
            "end_col": 6
        },
        {
            "check": "timestamp",
            "description": "Timelock.queueTransaction(address,uint256,string,bytes,uint256) (contracts/Timelock.sol#83-92) uses timestamp for comparisons\n\tDangerous comparisons:\n\t- require(bool,string)(eta >= getBlockTimestamp().add(delay),Timelock::queueTransaction: Estimated execution block must satisfy delay.) (contracts/Timelock.sol#85)\n",
            "impact": "Low",
            "confidence": "Medium",
            "lines": [
                85
            ],
            "start_col": 9,
            "end_col": 132
        },
        {
            "check": "low-level-calls",
            "description": "Low level call in Timelock.executeTransaction(address,uint256,string,bytes,uint256) (contracts/Timelock.sol#103-128):\n\t- (success,returnData) = target.call.value(value)(callData) (contracts/Timelock.sol#122)\n",
            "impact": "Informational",
            "confidence": "High",
            "lines": [
                103,
                104,
                105,
                106,
                107,
                108,
                109,
                110,
                111,
                112,
                113,
                114,
                115,
                116,
                117,
                118,
                119,
                120,
                121,
                122,
                123,
                124,
                125,
                126,
                127,
                128
            ],
            "start_col": 5,
            "end_col": 6
        },
        {
            "check": "low-level-calls",
            "description": "Low level call in Timelock.executeTransaction(address,uint256,string,bytes,uint256) (contracts/Timelock.sol#103-128):\n\t- (success,returnData) = target.call.value(value)(callData) (contracts/Timelock.sol#122)\n",
            "impact": "Informational",
            "confidence": "High",
            "lines": [
                122
            ],
            "start_col": 9,
            "end_col": 85
        },
        {
            "check": "naming-convention",
            "description": "Variable Timelock.admin_initialized (contracts/Timelock.sol#36) is not in mixedCase\n",
            "impact": "Informational",
            "confidence": "High",
            "lines": [
                36
            ],
            "start_col": 5,
            "end_col": 34
        }
    ]
}